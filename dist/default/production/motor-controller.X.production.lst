

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Dec 10 23:05:25 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4455
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    53                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    57                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    58                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    59  0000                     
    60                           ; Version 1.45
    61                           ; Generated 16/11/2017 GMT
    62                           ; 
    63                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    64                           ; All rights reserved.
    65                           ; 
    66                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    67                           ; 
    68                           ; Redistribution and use in source and binary forms, with or without modification, are
    69                           ; permitted provided that the following conditions are met:
    70                           ; 
    71                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    72                           ;        conditions and the following disclaimer.
    73                           ; 
    74                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    75                           ;        of conditions and the following disclaimer in the documentation and/or other
    76                           ;        materials provided with the distribution.
    77                           ; 
    78                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    79                           ;        software without specific prior written permission.
    80                           ; 
    81                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    82                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    83                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    84                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    85                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    86                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    87                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    88                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    89                           ; 
    90                           ; 
    91                           ; Code-generator required, PIC18F4455 Definitions
    92                           ; 
    93                           ; SFR Addresses
    94  0000                     
    95                           	psect	idataCOMRAM
    96  002308                     __pidataCOMRAM:
    97                           	opt stack 0
    98                           
    99                           ;initializer for _tx_transmission_end
   100  002308  0001               	dw	1
   101                           
   102                           	psect	mediumconst
   103  005EDC                     __pmediumconst:
   104                           	opt stack 0
   105  005EDC  00                 	db	0
   106  005EDD                     _dpowers:
   107                           	opt stack 0
   108  005EDD  0001               	dw	1
   109  005EDF  0000               	dw	0
   110  005EE1  000A               	dw	10
   111  005EE3  0000               	dw	0
   112  005EE5  0064               	dw	100
   113  005EE7  0000               	dw	0
   114  005EE9  03E8               	dw	1000
   115  005EEB  0000               	dw	0
   116  005EED  2710               	dw	10000
   117  005EEF  0000               	dw	0
   118  005EF1  86A0               	dw	34464
   119  005EF3  0001               	dw	1
   120  005EF5  4240               	dw	16960
   121  005EF7  000F               	dw	15
   122  005EF9  9680               	dw	38528
   123  005EFB  0098               	dw	152
   124  005EFD  E100               	dw	57600
   125  005EFF  05F5               	dw	1525
   126  005F01  CA00               	dw	51712
   127  005F03  3B9A               	dw	15258
   128  005F05                     __end_of_dpowers:
   129                           	opt stack 0
   130  005F05                     __powers_:
   131                           	opt stack 0
   132  005F05  00                 	db	0
   133  005F06  80                 	db	128
   134  005F07  3F                 	db	63
   135  005F08  00                 	db	0
   136  005F09  20                 	db	32
   137  005F0A  41                 	db	65
   138  005F0B  00                 	db	0
   139  005F0C  C8                 	db	200
   140  005F0D  42                 	db	66
   141  005F0E  00                 	db	0
   142  005F0F  7A                 	db	122
   143  005F10  44                 	db	68
   144  005F11  40                 	db	64
   145  005F12  1C                 	db	28
   146  005F13  46                 	db	70
   147  005F14  50                 	db	80
   148  005F15  C3                 	db	195
   149  005F16  47                 	db	71
   150  005F17  24                 	db	36
   151  005F18  74                 	db	116
   152  005F19  49                 	db	73
   153  005F1A  97                 	db	151
   154  005F1B  18                 	db	24
   155  005F1C  4B                 	db	75
   156  005F1D  BC                 	db	188
   157  005F1E  BE                 	db	190
   158  005F1F  4C                 	db	76
   159  005F20  6B                 	db	107
   160  005F21  6E                 	db	110
   161  005F22  4E                 	db	78
   162  005F23  03                 	db	3
   163  005F24  15                 	db	21
   164  005F25  50                 	db	80
   165  005F26  79                 	db	121
   166  005F27  AD                 	db	173
   167  005F28  60                 	db	96
   168  005F29  F3                 	db	243
   169  005F2A  49                 	db	73
   170  005F2B  71                 	db	113
   171  005F2C                     __end_of__powers_:
   172                           	opt stack 0
   173  005F2C                     __npowers_:
   174                           	opt stack 0
   175  005F2C  00                 	db	0
   176  005F2D  80                 	db	128
   177  005F2E  3F                 	db	63
   178  005F2F  CD                 	db	205
   179  005F30  CC                 	db	204
   180  005F31  3D                 	db	61
   181  005F32  D7                 	db	215
   182  005F33  23                 	db	35
   183  005F34  3C                 	db	60
   184  005F35  12                 	db	18
   185  005F36  83                 	db	131
   186  005F37  3A                 	db	58
   187  005F38  B7                 	db	183
   188  005F39  D1                 	db	209
   189  005F3A  38                 	db	56
   190  005F3B  C6                 	db	198
   191  005F3C  27                 	db	39
   192  005F3D  37                 	db	55
   193  005F3E  38                 	db	56
   194  005F3F  86                 	db	134
   195  005F40  35                 	db	53
   196  005F41  C0                 	db	192
   197  005F42  D6                 	db	214
   198  005F43  33                 	db	51
   199  005F44  CC                 	db	204
   200  005F45  2B                 	db	43
   201  005F46  32                 	db	50
   202  005F47  70                 	db	112
   203  005F48  89                 	db	137
   204  005F49  30                 	db	48
   205  005F4A  E7                 	db	231
   206  005F4B  DB                 	db	219
   207  005F4C  2E                 	db	46
   208  005F4D  E5                 	db	229
   209  005F4E  3C                 	db	60
   210  005F4F  1E                 	db	30
   211  005F50  42                 	db	66
   212  005F51  A2                 	db	162
   213  005F52  0D                 	db	13
   214  005F53                     __end_of__npowers_:
   215                           	opt stack 0
   216  0000                     _ADRES	set	4035
   217  0000                     _TXREG	set	4013
   218  0000                     _RCREG	set	4014
   219  0000                     _BAUDCONbits	set	4024
   220  0000                     _SPBRGH	set	4016
   221  0000                     _SPBRG	set	4015
   222  0000                     _RCSTAbits	set	4011
   223  0000                     _TXSTAbits	set	4012
   224  0000                     _CCP1CONbits	set	4029
   225  0000                     _T2CONbits	set	4042
   226  0000                     _PR2	set	4043
   227  0000                     _CCPR1L	set	4030
   228  0000                     _LATBbits	set	3978
   229  0000                     _ADCON2bits	set	4032
   230  0000                     _ADCON1bits	set	4033
   231  0000                     _INTCON2bits	set	4081
   232  0000                     _INTCONbits	set	4082
   233  0000                     _PIE1bits	set	3997
   234  0000                     _TRISC	set	3988
   235  0000                     _TRISD	set	3989
   236  0000                     _TRISB	set	3987
   237  0000                     _ADCON0bits	set	4034
   238  0000                     _PIR1bits	set	3998
   239  005F53                     STR_7:
   240  005F53  43                 	db	67	;'C'
   241  005F54  6F                 	db	111	;'o'
   242  005F55  6E                 	db	110	;'n'
   243  005F56  74                 	db	116	;'t'
   244  005F57  72                 	db	114	;'r'
   245  005F58  6F                 	db	111	;'o'
   246  005F59  6C                 	db	108	;'l'
   247  005F5A  6C                 	db	108	;'l'
   248  005F5B  65                 	db	101	;'e'
   249  005F5C  72                 	db	114	;'r'
   250  005F5D  20                 	db	32
   251  005F5E  2D                 	db	45
   252  005F5F  20                 	db	32
   253  005F60  56                 	db	86	;'V'
   254  005F61  30                 	db	48	;'0'
   255  005F62  2E                 	db	46
   256  005F63  30                 	db	48	;'0'
   257  005F64  2E                 	db	46
   258  005F65  30                 	db	48	;'0'
   259  005F66  0A                 	db	10
   260  005F67  00                 	db	0
   261  005F68                     STR_2:
   262  005F68  53                 	db	83	;'S'
   263  005F69  74                 	db	116	;'t'
   264  005F6A  61                 	db	97	;'a'
   265  005F6B  72                 	db	114	;'r'
   266  005F6C  74                 	db	116	;'t'
   267  005F6D  69                 	db	105	;'i'
   268  005F6E  6E                 	db	110	;'n'
   269  005F6F  67                 	db	103	;'g'
   270  005F70  20                 	db	32
   271  005F71  73                 	db	115	;'s'
   272  005F72  79                 	db	121	;'y'
   273  005F73  73                 	db	115	;'s'
   274  005F74  74                 	db	116	;'t'
   275  005F75  65                 	db	101	;'e'
   276  005F76  6D                 	db	109	;'m'
   277  005F77  2E                 	db	46
   278  005F78  2E                 	db	46
   279  005F79  2E                 	db	46
   280  005F7A  0A                 	db	10
   281  005F7B  00                 	db	0
   282  005F7C                     STR_1:
   283  005F7C  4D                 	db	77	;'M'
   284  005F7D  4F                 	db	79	;'O'
   285  005F7E  54                 	db	84	;'T'
   286  005F7F  4F                 	db	79	;'O'
   287  005F80  52                 	db	82	;'R'
   288  005F81  20                 	db	32
   289  005F82  43                 	db	67	;'C'
   290  005F83  4F                 	db	79	;'O'
   291  005F84  4E                 	db	78	;'N'
   292  005F85  54                 	db	84	;'T'
   293  005F86  52                 	db	82	;'R'
   294  005F87  4F                 	db	79	;'O'
   295  005F88  4C                 	db	76	;'L'
   296  005F89  4C                 	db	76	;'L'
   297  005F8A  45                 	db	69	;'E'
   298  005F8B  52                 	db	82	;'R'
   299  005F8C  0A                 	db	10
   300  005F8D  00                 	db	0
   301  005F8E                     STR_15:
   302  005F8E  4D                 	db	77	;'M'
   303  005F8F  31                 	db	49	;'1'
   304  005F90  20                 	db	32
   305  005F91  49                 	db	73	;'I'
   306  005F92  4E                 	db	78	;'N'
   307  005F93  31                 	db	49	;'1'
   308  005F94  20                 	db	32
   309  005F95  64                 	db	100	;'d'
   310  005F96  69                 	db	105	;'i'
   311  005F97  73                 	db	115	;'s'
   312  005F98  61                 	db	97	;'a'
   313  005F99  62                 	db	98	;'b'
   314  005F9A  6C                 	db	108	;'l'
   315  005F9B  65                 	db	101	;'e'
   316  005F9C  0A                 	db	10
   317  005F9D  00                 	db	0
   318  005F9E                     STR_17:
   319  005F9E  4D                 	db	77	;'M'
   320  005F9F  31                 	db	49	;'1'
   321  005FA0  20                 	db	32
   322  005FA1  49                 	db	73	;'I'
   323  005FA2  4E                 	db	78	;'N'
   324  005FA3  32                 	db	50	;'2'
   325  005FA4  20                 	db	32
   326  005FA5  64                 	db	100	;'d'
   327  005FA6  69                 	db	105	;'i'
   328  005FA7  73                 	db	115	;'s'
   329  005FA8  61                 	db	97	;'a'
   330  005FA9  62                 	db	98	;'b'
   331  005FAA  6C                 	db	108	;'l'
   332  005FAB  65                 	db	101	;'e'
   333  005FAC  0A                 	db	10
   334  005FAD  00                 	db	0
   335  005FAE                     STR_10:
   336  005FAE  4D                 	db	77	;'M'
   337  005FAF  31                 	db	49	;'1'
   338  005FB0  20                 	db	32
   339  005FB1  49                 	db	73	;'I'
   340  005FB2  4E                 	db	78	;'N'
   341  005FB3  31                 	db	49	;'1'
   342  005FB4  20                 	db	32
   343  005FB5  65                 	db	101	;'e'
   344  005FB6  6E                 	db	110	;'n'
   345  005FB7  61                 	db	97	;'a'
   346  005FB8  62                 	db	98	;'b'
   347  005FB9  6C                 	db	108	;'l'
   348  005FBA  65                 	db	101	;'e'
   349  005FBB  0A                 	db	10
   350  005FBC  00                 	db	0
   351  005FBD                     STR_12:
   352  005FBD  4D                 	db	77	;'M'
   353  005FBE  31                 	db	49	;'1'
   354  005FBF  20                 	db	32
   355  005FC0  49                 	db	73	;'I'
   356  005FC1  4E                 	db	78	;'N'
   357  005FC2  32                 	db	50	;'2'
   358  005FC3  20                 	db	32
   359  005FC4  65                 	db	101	;'e'
   360  005FC5  6E                 	db	110	;'n'
   361  005FC6  61                 	db	97	;'a'
   362  005FC7  62                 	db	98	;'b'
   363  005FC8  6C                 	db	108	;'l'
   364  005FC9  65                 	db	101	;'e'
   365  005FCA  0A                 	db	10
   366  005FCB  00                 	db	0
   367  005FCC                     STR_19:
   368  005FCC  70                 	db	112	;'p'
   369  005FCD  77                 	db	119	;'w'
   370  005FCE  6D                 	db	109	;'m'
   371  005FCF  20                 	db	32
   372  005FD0  65                 	db	101	;'e'
   373  005FD1  6E                 	db	110	;'n'
   374  005FD2  61                 	db	97	;'a'
   375  005FD3  62                 	db	98	;'b'
   376  005FD4  6C                 	db	108	;'l'
   377  005FD5  65                 	db	101	;'e'
   378  005FD6  64                 	db	100	;'d'
   379  005FD7  0A                 	db	10
   380  005FD8  00                 	db	0
   381  005FD9                     STR_22:
   382  005FD9  25                 	db	37
   383  005FDA  30                 	db	48	;'0'
   384  005FDB  2E                 	db	46
   385  005FDC  33                 	db	51	;'3'
   386  005FDD  66                 	db	102	;'f'
   387  005FDE  20                 	db	32
   388  005FDF  41                 	db	65	;'A'
   389  005FE0  0A                 	db	10
   390  005FE1  00                 	db	0
   391  005FE2                     STR_20:
   392  005FE2  69                 	db	105	;'i'
   393  005FE3  6D                 	db	109	;'m'
   394  005FE4  65                 	db	101	;'e'
   395  005FE5  61                 	db	97	;'a'
   396  005FE6  73                 	db	115	;'s'
   397  005FE7  00                 	db	0
   398  005FE8                     STR_18:
   399  005FE8  70                 	db	112	;'p'
   400  005FE9  77                 	db	119	;'w'
   401  005FEA  6D                 	db	109	;'m'
   402  005FEB  00                 	db	0
   403  005FEC                     STR_6:
   404  005FEC  69                 	db	105	;'i'
   405  005FED  64                 	db	100	;'d'
   406  005FEE  6E                 	db	110	;'n'
   407  005FEF  00                 	db	0
   408  005FF0                     STR_13:
   409  005FF0  64                 	db	100	;'d'
   410  005FF1  69                 	db	105	;'i'
   411  005FF2  73                 	db	115	;'s'
   412  005FF3  00                 	db	0
   413  005FF4                     STR_3:
   414  005FF4  20                 	db	32
   415  005FF5  0A                 	db	10
   416  005FF6  00                 	db	0
   417  005FF7                     STR_8:
   418  005FF7  65                 	db	101	;'e'
   419  005FF8  6E                 	db	110	;'n'
   420  005FF9  00                 	db	0
   421  005FFA                     STR_9:
   422  005FFA  31                 	db	49	;'1'
   423  005FFB  00                 	db	0
   424  005FFC                     STR_11:
   425  005FFC  32                 	db	50	;'2'
   426  005FFD  00                 	db	0
   427  0000                     
   428                           ; #config settings
   429  005FFE  00                 	db	0	; dummy byte at the end
   430  0000                     
   431                           	psect	cinit
   432  001F92                     __pcinit:
   433                           	opt stack 0
   434  001F92                     start_initialization:
   435                           	opt stack 0
   436  001F92                     __initialization:
   437                           	opt stack 0
   438                           
   439                           ; Initialize objects allocated to COMRAM (2 bytes)
   440                           ; load TBLPTR registers with __pidataCOMRAM
   441  001F92  0E08               	movlw	low __pidataCOMRAM
   442  001F94  6EF6               	movwf	tblptrl,c
   443  001F96  0E23               	movlw	high __pidataCOMRAM
   444  001F98  6EF7               	movwf	tblptrh,c
   445  001F9A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   446  001F9C  6EF8               	movwf	tblptru,c
   447  001F9E  0009               	tblrd		*+	;fetch initializer
   448  001FA0  CFF5 F04A          	movff	tablat,__pdataCOMRAM
   449  001FA4  0009               	tblrd		*+	;fetch initializer
   450  001FA6  CFF5 F04B          	movff	tablat,__pdataCOMRAM+1
   451                           
   452                           ; Clear objects allocated to BANK1 (118 bytes)
   453  001FAA  EE01  F083         	lfsr	0,__pbssBANK1
   454  001FAE  0E76               	movlw	118
   455  001FB0                     clear_0:
   456  001FB0  6AEE               	clrf	postinc0,c
   457  001FB2  06E8               	decf	wreg,f,c
   458  001FB4  E1FD               	bnz	clear_0
   459                           
   460                           ; Clear objects allocated to BANK0 (100 bytes)
   461  001FB6  EE00  F060         	lfsr	0,__pbssBANK0
   462  001FBA  0E64               	movlw	100
   463  001FBC                     clear_1:
   464  001FBC  6AEE               	clrf	postinc0,c
   465  001FBE  06E8               	decf	wreg,f,c
   466  001FC0  E1FD               	bnz	clear_1
   467                           
   468                           ; Clear objects allocated to COMRAM (12 bytes)
   469  001FC2  EE00  F03E         	lfsr	0,__pbssCOMRAM
   470  001FC6  0E0C               	movlw	12
   471  001FC8                     clear_2:
   472  001FC8  6AEE               	clrf	postinc0,c
   473  001FCA  06E8               	decf	wreg,f,c
   474  001FCC  E1FD               	bnz	clear_2
   475  001FCE                     end_of_initialization:
   476                           	opt stack 0
   477  001FCE                     __end_of__initialization:
   478                           	opt stack 0
   479  001FCE  904C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   480  001FD0  924C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   481  001FD2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   482  001FD4  6EF8               	movwf	tblptru,c
   483  001FD6  0100               	movlb	0
   484  001FD8  EFB6  F006         	goto	_main	;jump to C main() function
   485                           tblptru	equ	0xFF8
   486                           tblptrh	equ	0xFF7
   487                           tblptrl	equ	0xFF6
   488                           tablat	equ	0xFF5
   489                           postinc0	equ	0xFEE
   490                           wreg	equ	0xFE8
   491                           
   492                           	psect	bssCOMRAM
   493  00003E                     __pbssCOMRAM:
   494                           	opt stack 0
   495  00003E                     strtok@sp:
   496                           	opt stack 0
   497  00003E                     	ds	2
   498  000040                     _rx_buffer_full:
   499                           	opt stack 0
   500  000040                     	ds	2
   501  000042                     _rx_buffer_pointer:
   502                           	opt stack 0
   503  000042                     	ds	2
   504  000044                     _tx_buffer_pointer:
   505                           	opt stack 0
   506  000044                     	ds	2
   507  000046                     _pwm_counter:
   508                           	opt stack 0
   509  000046                     	ds	2
   510  000048                     _pwm:
   511                           	opt stack 0
   512  000048                     	ds	2
   513                           tblptru	equ	0xFF8
   514                           tblptrh	equ	0xFF7
   515                           tblptrl	equ	0xFF6
   516                           tablat	equ	0xFF5
   517                           postinc0	equ	0xFEE
   518                           wreg	equ	0xFE8
   519                           
   520                           	psect	dataCOMRAM
   521  00004A                     __pdataCOMRAM:
   522                           	opt stack 0
   523  00004A                     _tx_transmission_end:
   524                           	opt stack 0
   525  00004A                     	ds	2
   526                           tblptru	equ	0xFF8
   527                           tblptrh	equ	0xFF7
   528                           tblptrl	equ	0xFF6
   529                           tablat	equ	0xFF5
   530                           postinc0	equ	0xFEE
   531                           wreg	equ	0xFE8
   532                           
   533                           	psect	bssBANK0
   534  000060                     __pbssBANK0:
   535                           	opt stack 0
   536  000060                     _tx_buffer:
   537                           	opt stack 0
   538  000060                     	ds	100
   539                           tblptru	equ	0xFF8
   540                           tblptrh	equ	0xFF7
   541                           tblptrl	equ	0xFF6
   542                           tablat	equ	0xFF5
   543                           postinc0	equ	0xFEE
   544                           wreg	equ	0xFE8
   545                           
   546                           	psect	bssBANK1
   547  000183                     __pbssBANK1:
   548                           	opt stack 0
   549  000183                     main@F4085:
   550                           	opt stack 0
   551  000183                     	ds	16
   552  000193                     _motor_1_ia:
   553                           	opt stack 0
   554  000193                     	ds	2
   555  000195                     _rx_buffer:
   556                           	opt stack 0
   557  000195                     	ds	100
   558                           tblptru	equ	0xFF8
   559                           tblptrh	equ	0xFF7
   560                           tblptrl	equ	0xFF6
   561                           tablat	equ	0xFF5
   562                           postinc0	equ	0xFEE
   563                           wreg	equ	0xFE8
   564                           
   565                           	psect	cstackBANK1
   566  000100                     __pcstackBANK1:
   567                           	opt stack 0
   568  000100                     main@raw_command:
   569                           	opt stack 0
   570                           
   571                           ; 100 bytes @ 0x0
   572  000100                     	ds	100
   573  000164                     main@arg1:
   574                           	opt stack 0
   575                           
   576                           ; 2 bytes @ 0x64
   577  000164                     	ds	2
   578  000166                     _main$1536:
   579                           	opt stack 0
   580                           
   581                           ; 3 bytes @ 0x66
   582  000166                     	ds	3
   583  000169                     main@L298_inputs:
   584                           	opt stack 0
   585                           
   586                           ; 16 bytes @ 0x69
   587  000169                     	ds	16
   588  000179                     main@send_current:
   589                           	opt stack 0
   590                           
   591                           ; 6 bytes @ 0x79
   592  000179                     	ds	6
   593  00017F                     main@command:
   594                           	opt stack 0
   595                           
   596                           ; 2 bytes @ 0x7F
   597  00017F                     	ds	2
   598  000181                     main@arg2:
   599                           	opt stack 0
   600                           
   601                           ; 2 bytes @ 0x81
   602  000181                     	ds	2
   603                           tblptru	equ	0xFF8
   604                           tblptrh	equ	0xFF7
   605                           tblptrl	equ	0xFF6
   606                           tablat	equ	0xFF5
   607                           postinc0	equ	0xFEE
   608                           wreg	equ	0xFE8
   609                           
   610                           	psect	cstackBANK0
   611  0000C4                     __pcstackBANK0:
   612                           	opt stack 0
   613  0000C4                     ?___fttol:
   614                           	opt stack 0
   615  0000C4                     ___fttol@f1:
   616                           	opt stack 0
   617  0000C4                     _fround$1538:
   618                           	opt stack 0
   619                           
   620                           ; 3 bytes @ 0x0
   621  0000C4                     	ds	3
   622  0000C7                     _fround$1537:
   623                           	opt stack 0
   624                           
   625                           ; 3 bytes @ 0x3
   626  0000C7                     	ds	1
   627  0000C8                     ??___fttol:
   628                           
   629                           ; 1 bytes @ 0x4
   630  0000C8                     	ds	2
   631  0000CA                     fround@prec:
   632                           	opt stack 0
   633                           
   634                           ; 1 bytes @ 0x6
   635  0000CA                     	ds	1
   636  0000CB                     ?___ftadd:
   637                           	opt stack 0
   638  0000CB                     ___ftadd@f1:
   639                           	opt stack 0
   640                           
   641                           ; 3 bytes @ 0x7
   642  0000CB                     	ds	2
   643  0000CD                     ___fttol@sign1:
   644                           	opt stack 0
   645                           
   646                           ; 1 bytes @ 0x9
   647  0000CD                     	ds	1
   648  0000CE                     ___ftadd@f2:
   649                           	opt stack 0
   650  0000CE                     ___fttol@lval:
   651                           	opt stack 0
   652                           
   653                           ; 4 bytes @ 0xA
   654  0000CE                     	ds	3
   655  0000D1                     ___ftadd@sign:
   656                           	opt stack 0
   657                           
   658                           ; 1 bytes @ 0xD
   659  0000D1                     	ds	1
   660  0000D2                     ___ftadd@exp2:
   661                           	opt stack 0
   662  0000D2                     ___fttol@exp1:
   663                           	opt stack 0
   664                           
   665                           ; 1 bytes @ 0xE
   666  0000D2                     	ds	1
   667  0000D3                     ___ftadd@exp1:
   668                           	opt stack 0
   669                           
   670                           ; 1 bytes @ 0xF
   671  0000D3                     	ds	1
   672  0000D4                     ?___ftsub:
   673                           	opt stack 0
   674  0000D4                     ___ftsub@f1:
   675                           	opt stack 0
   676                           
   677                           ; 3 bytes @ 0x10
   678  0000D4                     	ds	3
   679  0000D7                     ___ftsub@f2:
   680                           	opt stack 0
   681                           
   682                           ; 3 bytes @ 0x13
   683  0000D7                     	ds	3
   684  0000DA                     ?_sprintf:
   685                           	opt stack 0
   686  0000DA                     sprintf@sp:
   687                           	opt stack 0
   688                           
   689                           ; 2 bytes @ 0x16
   690  0000DA                     	ds	2
   691  0000DC                     sprintf@f:
   692                           	opt stack 0
   693                           
   694                           ; 2 bytes @ 0x18
   695  0000DC                     	ds	5
   696  0000E1                     ??_sprintf:
   697                           
   698                           ; 1 bytes @ 0x1D
   699  0000E1                     	ds	6
   700  0000E7                     _sprintf$1540:
   701                           	opt stack 0
   702                           
   703                           ; 3 bytes @ 0x23
   704  0000E7                     	ds	3
   705  0000EA                     sprintf@ap:
   706                           	opt stack 0
   707                           
   708                           ; 2 bytes @ 0x26
   709  0000EA                     	ds	2
   710  0000EC                     sprintf@val:
   711                           	opt stack 0
   712                           
   713                           ; 4 bytes @ 0x28
   714  0000EC                     	ds	4
   715  0000F0                     sprintf@tmpval:
   716                           	opt stack 0
   717                           
   718                           ; 4 bytes @ 0x2C
   719  0000F0                     	ds	4
   720  0000F4                     sprintf@exp:
   721                           	opt stack 0
   722                           
   723                           ; 2 bytes @ 0x30
   724  0000F4                     	ds	2
   725  0000F6                     sprintf@flag:
   726                           	opt stack 0
   727                           
   728                           ; 2 bytes @ 0x32
   729  0000F6                     	ds	2
   730  0000F8                     sprintf@width:
   731                           	opt stack 0
   732                           
   733                           ; 2 bytes @ 0x34
   734  0000F8                     	ds	2
   735  0000FA                     sprintf@fval:
   736                           	opt stack 0
   737                           
   738                           ; 3 bytes @ 0x36
   739  0000FA                     	ds	3
   740  0000FD                     sprintf@prec:
   741                           	opt stack 0
   742                           
   743                           ; 2 bytes @ 0x39
   744  0000FD                     	ds	2
   745  0000FF                     sprintf@c:
   746                           	opt stack 0
   747                           
   748                           ; 1 bytes @ 0x3B
   749  0000FF                     	ds	1
   750                           tblptru	equ	0xFF8
   751                           tblptrh	equ	0xFF7
   752                           tblptrl	equ	0xFF6
   753                           tablat	equ	0xFF5
   754                           postinc0	equ	0xFEE
   755                           wreg	equ	0xFE8
   756                           
   757                           	psect	cstackCOMRAM
   758  000001                     __pcstackCOMRAM:
   759                           	opt stack 0
   760  000001                     
   761                           ; 1 bytes @ 0x0
   762  000001                     	ds	1
   763  000002                     ??_IRS:
   764                           
   765                           ; 1 bytes @ 0x1
   766  000002                     	ds	18
   767  000014                     ??_isdigit:
   768  000014                     ?_strcmp:
   769                           	opt stack 0
   770  000014                     ?_strchr:
   771                           	opt stack 0
   772  000014                     ?___awmod:
   773                           	opt stack 0
   774  000014                     ?___ftpack:
   775                           	opt stack 0
   776  000014                     ?___ftneg:
   777                           	opt stack 0
   778  000014                     ?__tdiv_to_l_:
   779                           	opt stack 0
   780  000014                     ?__div_to_l_:
   781                           	opt stack 0
   782  000014                     ?___lldiv:
   783                           	opt stack 0
   784  000014                     ?___llmod:
   785                           	opt stack 0
   786  000014                     send_sr@buffer:
   787                           	opt stack 0
   788  000014                     ___awmod@dividend:
   789                           	opt stack 0
   790  000014                     memset@p1:
   791                           	opt stack 0
   792  000014                     strcmp@s1:
   793                           	opt stack 0
   794  000014                     strcpy@to:
   795                           	opt stack 0
   796  000014                     strchr@ptr:
   797                           	opt stack 0
   798  000014                     __div_to_l_@f1:
   799                           	opt stack 0
   800  000014                     ___ftpack@arg:
   801                           	opt stack 0
   802  000014                     __tdiv_to_l_@f1:
   803                           	opt stack 0
   804  000014                     ___ftge@ff1:
   805                           	opt stack 0
   806  000014                     ___ftneg@f1:
   807                           	opt stack 0
   808  000014                     ___lldiv@dividend:
   809                           	opt stack 0
   810  000014                     ___llmod@dividend:
   811                           	opt stack 0
   812                           
   813                           ; 4 bytes @ 0x13
   814  000014                     	ds	1
   815  000015                     _isdigit$1159:
   816                           	opt stack 0
   817                           
   818                           ; 1 bytes @ 0x14
   819  000015                     	ds	1
   820  000016                     ??_send_sr:
   821  000016                     isdigit@c:
   822                           	opt stack 0
   823  000016                     ___awmod@divisor:
   824                           	opt stack 0
   825  000016                     memset@c:
   826                           	opt stack 0
   827  000016                     strcmp@s2:
   828                           	opt stack 0
   829  000016                     strcpy@from:
   830                           	opt stack 0
   831  000016                     strchr@chr:
   832                           	opt stack 0
   833                           
   834                           ; 2 bytes @ 0x15
   835  000016                     	ds	1
   836  000017                     ___ftpack@exp:
   837                           	opt stack 0
   838  000017                     send_sr@i:
   839                           	opt stack 0
   840  000017                     __div_to_l_@f2:
   841                           	opt stack 0
   842  000017                     __tdiv_to_l_@f2:
   843                           	opt stack 0
   844  000017                     ___ftge@ff2:
   845                           	opt stack 0
   846                           
   847                           ; 3 bytes @ 0x16
   848  000017                     	ds	1
   849  000018                     ??_strcmp:
   850  000018                     ?_strspn:
   851                           	opt stack 0
   852  000018                     ?_strcspn:
   853                           	opt stack 0
   854  000018                     ___awmod@counter:
   855                           	opt stack 0
   856  000018                     ___ftpack@sign:
   857                           	opt stack 0
   858  000018                     memset@n:
   859                           	opt stack 0
   860  000018                     strcpy@cp:
   861                           	opt stack 0
   862  000018                     strcspn@s1:
   863                           	opt stack 0
   864  000018                     strspn@s1:
   865                           	opt stack 0
   866  000018                     ___lldiv@divisor:
   867                           	opt stack 0
   868  000018                     ___llmod@divisor:
   869                           	opt stack 0
   870                           
   871                           ; 4 bytes @ 0x17
   872  000018                     	ds	1
   873  000019                     ??___ftpack:
   874  000019                     ___awmod@sign:
   875                           	opt stack 0
   876  000019                     strcmp@r:
   877                           	opt stack 0
   878                           
   879                           ; 1 bytes @ 0x18
   880  000019                     	ds	1
   881  00001A                     ??__tdiv_to_l_:
   882  00001A                     ??___ftge:
   883  00001A                     ?___awdiv:
   884                           	opt stack 0
   885  00001A                     ___awdiv@dividend:
   886                           	opt stack 0
   887  00001A                     memset@p:
   888                           	opt stack 0
   889  00001A                     strcspn@s2:
   890                           	opt stack 0
   891  00001A                     strspn@s2:
   892                           	opt stack 0
   893  00001A                     __div_to_l_@quot:
   894                           	opt stack 0
   895                           
   896                           ; 4 bytes @ 0x19
   897  00001A                     	ds	2
   898  00001C                     ??_strspn:
   899  00001C                     ??_strcspn:
   900  00001C                     ?___awtoft:
   901                           	opt stack 0
   902  00001C                     ?___lltoft:
   903                           	opt stack 0
   904  00001C                     ___llmod@counter:
   905                           	opt stack 0
   906  00001C                     uart_send_string@message:
   907                           	opt stack 0
   908  00001C                     uart_read_buffer@message:
   909                           	opt stack 0
   910  00001C                     ___awdiv@divisor:
   911                           	opt stack 0
   912  00001C                     ___awtoft@c:
   913                           	opt stack 0
   914  00001C                     ___lldiv@quotient:
   915                           	opt stack 0
   916  00001C                     ___lltoft@c:
   917                           	opt stack 0
   918                           
   919                           ; 4 bytes @ 0x1B
   920  00001C                     	ds	1
   921  00001D                     strcspn@i:
   922                           	opt stack 0
   923  00001D                     strspn@i:
   924                           	opt stack 0
   925  00001D                     __tdiv_to_l_@quot:
   926                           	opt stack 0
   927                           
   928                           ; 4 bytes @ 0x1C
   929  00001D                     	ds	1
   930  00001E                     ___awdiv@counter:
   931                           	opt stack 0
   932  00001E                     __div_to_l_@cntr:
   933                           	opt stack 0
   934                           
   935                           ; 1 bytes @ 0x1D
   936  00001E                     	ds	1
   937  00001F                     ?_strtok:
   938                           	opt stack 0
   939  00001F                     ___awdiv@sign:
   940                           	opt stack 0
   941  00001F                     ___awtoft@sign:
   942                           	opt stack 0
   943  00001F                     __div_to_l_@exp1:
   944                           	opt stack 0
   945  00001F                     strtok@s1:
   946                           	opt stack 0
   947                           
   948                           ; 2 bytes @ 0x1E
   949  00001F                     	ds	1
   950  000020                     ??___lltoft:
   951  000020                     ___lldiv@counter:
   952                           	opt stack 0
   953  000020                     ___awdiv@quotient:
   954                           	opt stack 0
   955                           
   956                           ; 2 bytes @ 0x1F
   957  000020                     	ds	1
   958  000021                     __tdiv_to_l_@cntr:
   959                           	opt stack 0
   960  000021                     strtok@s2:
   961                           	opt stack 0
   962                           
   963                           ; 2 bytes @ 0x20
   964  000021                     	ds	1
   965  000022                     ?___wmul:
   966                           	opt stack 0
   967  000022                     __tdiv_to_l_@exp1:
   968                           	opt stack 0
   969  000022                     ___wmul@multiplier:
   970                           	opt stack 0
   971                           
   972                           ; 2 bytes @ 0x21
   973  000022                     	ds	1
   974  000023                     
   975                           ; 1 bytes @ 0x22
   976  000023                     	ds	1
   977  000024                     ___lltoft@exp:
   978                           	opt stack 0
   979  000024                     ___wmul@multiplicand:
   980                           	opt stack 0
   981                           
   982                           ; 2 bytes @ 0x23
   983  000024                     	ds	2
   984  000026                     ___wmul@product:
   985                           	opt stack 0
   986                           
   987                           ; 2 bytes @ 0x25
   988  000026                     	ds	2
   989  000028                     ?_atoi:
   990                           	opt stack 0
   991  000028                     ?___ftmul:
   992                           	opt stack 0
   993  000028                     atoi@s:
   994                           	opt stack 0
   995  000028                     ___ftmul@f1:
   996                           	opt stack 0
   997                           
   998                           ; 3 bytes @ 0x27
   999  000028                     	ds	2
  1000  00002A                     ??_atoi:
  1001                           
  1002                           ; 1 bytes @ 0x29
  1003  00002A                     	ds	1
  1004  00002B                     ___ftmul@f2:
  1005                           	opt stack 0
  1006                           
  1007                           ; 3 bytes @ 0x2A
  1008  00002B                     	ds	1
  1009  00002C                     atoi@sign:
  1010                           	opt stack 0
  1011                           
  1012                           ; 1 bytes @ 0x2B
  1013  00002C                     	ds	1
  1014  00002D                     atoi@a:
  1015                           	opt stack 0
  1016                           
  1017                           ; 2 bytes @ 0x2C
  1018  00002D                     	ds	1
  1019  00002E                     ??___ftmul:
  1020                           
  1021                           ; 1 bytes @ 0x2D
  1022  00002E                     	ds	3
  1023  000031                     ___ftmul@exp:
  1024                           	opt stack 0
  1025                           
  1026                           ; 1 bytes @ 0x30
  1027  000031                     	ds	1
  1028  000032                     ___ftmul@f3_as_product:
  1029                           	opt stack 0
  1030                           
  1031                           ; 3 bytes @ 0x31
  1032  000032                     	ds	3
  1033  000035                     ___ftmul@cntr:
  1034                           	opt stack 0
  1035                           
  1036                           ; 1 bytes @ 0x34
  1037  000035                     	ds	1
  1038  000036                     ___ftmul@sign:
  1039                           	opt stack 0
  1040                           
  1041                           ; 1 bytes @ 0x35
  1042  000036                     	ds	1
  1043  000037                     ?_fround:
  1044                           	opt stack 0
  1045  000037                     ?_scale:
  1046                           	opt stack 0
  1047                           
  1048                           ; 3 bytes @ 0x36
  1049  000037                     	ds	3
  1050  00003A                     ??___ftadd:
  1051  00003A                     _scale$1539:
  1052                           	opt stack 0
  1053                           
  1054                           ; 3 bytes @ 0x39
  1055  00003A                     	ds	3
  1056  00003D                     scale@scl:
  1057                           	opt stack 0
  1058                           
  1059                           ; 1 bytes @ 0x3C
  1060  00003D                     	ds	1
  1061  00003E                     tblptru	equ	0xFF8
  1062                           tblptrh	equ	0xFF7
  1063                           tblptrl	equ	0xFF6
  1064                           tablat	equ	0xFF5
  1065                           postinc0	equ	0xFEE
  1066                           wreg	equ	0xFE8
  1067                           
  1068                           ; 1 bytes @ 0x3D
  1069 ;;
  1070 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1071 ;;
  1072 ;; *************** function _main *****************
  1073 ;; Defined at:
  1074 ;;		line 45 in file "main.c"
  1075 ;; Parameters:    Size  Location     Type
  1076 ;;		None
  1077 ;; Auto vars:     Size  Location     Type
  1078 ;;  send_current    6  121[BANK1 ] unsigned char [6]
  1079 ;;  raw_command   100    0[BANK1 ] unsigned char [100]
  1080 ;;  L298_inputs    16  105[BANK1 ] short [8]
  1081 ;;  arg2            2  129[BANK1 ] PTR unsigned char 
  1082 ;;		 -> NULL(0), main@raw_command(100), 
  1083 ;;  command         2  127[BANK1 ] PTR unsigned char 
  1084 ;;		 -> NULL(0), main@raw_command(100), 
  1085 ;;  arg1            2  100[BANK1 ] PTR unsigned char 
  1086 ;;		 -> NULL(0), main@raw_command(100), 
  1087 ;; Return value:  Size  Location     Type
  1088 ;;                  1    wreg      void 
  1089 ;; Registers used:
  1090 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1091 ;; Tracked objects:
  1092 ;;		On entry : 0/0
  1093 ;;		On exit  : 0/0
  1094 ;;		Unchanged: 0/0
  1095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1096 ;;      Params:         0       0       0       0       0       0       0       0       0
  1097 ;;      Locals:         0       0     131       0       0       0       0       0       0
  1098 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1099 ;;      Totals:         0       0     131       0       0       0       0       0       0
  1100 ;;Total ram usage:      131 bytes
  1101 ;; Hardware stack levels required when called:    6
  1102 ;; This function calls:
  1103 ;;		___awtoft
  1104 ;;		___ftmul
  1105 ;;		_atoi
  1106 ;;		_configure_pwm
  1107 ;;		_configure_tmr2
  1108 ;;		_memset
  1109 ;;		_send_sr
  1110 ;;		_sprintf
  1111 ;;		_strcmp
  1112 ;;		_strtok
  1113 ;;		_uart_read_buffer
  1114 ;;		_uart_send_string
  1115 ;;		_uart_set_baud_rate
  1116 ;;		_uart_set_rx
  1117 ;;		_uart_set_tx
  1118 ;; This function is called by:
  1119 ;;		Startup code after reset
  1120 ;; This function uses a non-reentrant model
  1121 ;;
  1122                           
  1123                           	psect	text0
  1124  000D6C                     __ptext0:
  1125                           	opt stack 0
  1126  000D6C                     _main:
  1127                           	opt stack 25
  1128                           
  1129                           ;main.c: 47: TRISB = 0;
  1130                           
  1131                           ;incstack = 0
  1132  000D6C  0E00               	movlw	0
  1133  000D6E  6E93               	movwf	3987,c	;volatile
  1134                           
  1135                           ;main.c: 48: TRISD = 0;
  1136  000D70  0E00               	movlw	0
  1137  000D72  6E95               	movwf	3989,c	;volatile
  1138                           
  1139                           ;main.c: 49: TRISC = 0;
  1140  000D74  0E00               	movlw	0
  1141  000D76  6E94               	movwf	3988,c	;volatile
  1142                           
  1143                           ;main.c: 51: uart_set_tx();
  1144  000D78  EC73  F011         	call	_uart_set_tx	;wreg free
  1145                           
  1146                           ;main.c: 52: uart_set_rx();
  1147  000D7C  EC79  F011         	call	_uart_set_rx	;wreg free
  1148                           
  1149                           ;main.c: 53: uart_set_baud_rate();
  1150  000D80  EC6B  F011         	call	_uart_set_baud_rate	;wreg free
  1151                           
  1152                           ;main.c: 59: PIE1bits.RCIE = 1;
  1153  000D84  8A9D               	bsf	3997,5,c	;volatile
  1154                           
  1155                           ;main.c: 60: PIE1bits.ADIE = 1;
  1156  000D86  8C9D               	bsf	3997,6,c	;volatile
  1157                           
  1158                           ;main.c: 63: PIR1bits.RCIF = 0;
  1159  000D88  9A9E               	bcf	3998,5,c	;volatile
  1160                           
  1161                           ;main.c: 64: PIR1bits.TXIF = 0;
  1162  000D8A  989E               	bcf	3998,4,c	;volatile
  1163                           
  1164                           ;main.c: 65: PIR1bits.ADIF = 0;
  1165  000D8C  9C9E               	bcf	3998,6,c	;volatile
  1166                           
  1167                           ;main.c: 66: INTCONbits.TMR0IF = 0;
  1168  000D8E  94F2               	bcf	intcon,2,c	;volatile
  1169                           
  1170                           ;main.c: 68: INTCONbits.GIE = 1;
  1171  000D90  8EF2               	bsf	intcon,7,c	;volatile
  1172                           
  1173                           ;main.c: 69: INTCONbits.PEIE = 1;
  1174  000D92  8CF2               	bsf	intcon,6,c	;volatile
  1175                           
  1176                           ;main.c: 71: INTCONbits.TMR0IE = 0;
  1177  000D94  9AF2               	bcf	intcon,5,c	;volatile
  1178                           
  1179                           ;main.c: 73: INTCON2bits.TMR0IP = 0;
  1180  000D96  94F1               	bcf	intcon2,2,c	;volatile
  1181                           
  1182                           ;main.c: 79: ADCON0bits.CHS=0;
  1183  000D98  94C2               	bcf	4034,2,c	;volatile
  1184  000D9A  96C2               	bcf	4034,3,c	;volatile
  1185  000D9C  98C2               	bcf	4034,4,c	;volatile
  1186  000D9E  9AC2               	bcf	4034,5,c	;volatile
  1187                           
  1188                           ;main.c: 81: ADCON0bits.ADON = 1;
  1189  000DA0  80C2               	bsf	4034,0,c	;volatile
  1190                           
  1191                           ;main.c: 84: ADCON1bits.VCFG = 3;
  1192  000DA2  0E30               	movlw	48
  1193  000DA4  12C1               	iorwf	4033,f,c	;volatile
  1194                           
  1195                           ;main.c: 85: ADCON1bits.PCFG = 11;
  1196  000DA6  50C1               	movf	4033,w,c	;volatile
  1197  000DA8  0BF0               	andlw	-16
  1198  000DAA  090B               	iorlw	11
  1199  000DAC  6EC1               	movwf	4033,c	;volatile
  1200                           
  1201                           ;main.c: 89: ADCON2bits.ADFM = 1;
  1202  000DAE  8EC0               	bsf	4032,7,c	;volatile
  1203                           
  1204                           ;main.c: 90: ADCON2bits.ACQT = 7;
  1205  000DB0  86C0               	bsf	4032,3,c	;volatile
  1206  000DB2  88C0               	bsf	4032,4,c	;volatile
  1207  000DB4  8AC0               	bsf	4032,5,c	;volatile
  1208                           
  1209                           ;main.c: 91: ADCON2bits.ADCS = 6;
  1210  000DB6  50C0               	movf	4032,w,c	;volatile
  1211  000DB8  0BF8               	andlw	-8
  1212  000DBA  0906               	iorlw	6
  1213  000DBC  6EC0               	movwf	4032,c	;volatile
  1214                           
  1215                           ;main.c: 93: uart_send_string("MOTOR CONTROLLER\n");
  1216  000DBE  0E7C               	movlw	low STR_1
  1217  000DC0  6E1C               	movwf	uart_send_string@message,c
  1218  000DC2  0E5F               	movlw	high STR_1
  1219  000DC4  6E1D               	movwf	uart_send_string@message+1,c
  1220  000DC6  EC37  F010         	call	_uart_send_string	;wreg free
  1221                           
  1222                           ;main.c: 94: uart_send_string("Starting system...\n");
  1223  000DCA  0E68               	movlw	low STR_2
  1224  000DCC  6E1C               	movwf	uart_send_string@message,c
  1225  000DCE  0E5F               	movlw	high STR_2
  1226  000DD0  6E1D               	movwf	uart_send_string@message+1,c
  1227  000DD2  EC37  F010         	call	_uart_send_string	;wreg free
  1228                           
  1229                           ;main.c: 96: char raw_command[100];
  1230                           ;main.c: 97: char * command;
  1231                           ;main.c: 98: char * arg1;
  1232                           ;main.c: 99: char * arg2;
  1233                           ;main.c: 101: short int L298_inputs[]={0, 0, 0, 0, 0, 0, 0, 0};
  1234  000DD6  EE21  F083         	lfsr	2,main@F4085
  1235  000DDA  EE11  F069         	lfsr	1,main@L298_inputs
  1236  000DDE  0E0F               	movlw	15
  1237  000DE0                     u4981:
  1238  000DE0  CFDB FFE3          	movff	plusw2,plusw1
  1239  000DE4  06E8               	decf	wreg,f,c
  1240  000DE6  E2FC               	bc	u4981
  1241                           
  1242                           ;main.c: 104: send_sr(L298_inputs);
  1243  000DE8  0E69               	movlw	low main@L298_inputs
  1244  000DEA  6E14               	movwf	send_sr@buffer,c
  1245  000DEC  0E01               	movlw	high main@L298_inputs
  1246  000DEE  6E15               	movwf	send_sr@buffer+1,c
  1247  000DF0  EC4E  F00F         	call	_send_sr	;wreg free
  1248                           
  1249                           ;main.c: 105: LATBbits.LATB3 = 0;
  1250  000DF4  968A               	bcf	3978,3,c	;volatile
  1251                           
  1252                           ;main.c: 107: configure_pwm();
  1253  000DF6  EC7F  F011         	call	_configure_pwm	;wreg free
  1254                           
  1255                           ;main.c: 108: configure_tmr2();
  1256  000DFA  EC62  F011         	call	_configure_tmr2	;wreg free
  1257                           
  1258                           ;main.c: 110: CCPR1L = 0;
  1259  000DFE  0E00               	movlw	0
  1260  000E00  6EBE               	movwf	4030,c	;volatile
  1261                           
  1262                           ;main.c: 112: ADCON0bits.GO = 1;
  1263  000E02  82C2               	bsf	4034,1,c	;volatile
  1264  000E04                     
  1265                           ;main.c: 115: {
  1266                           ;main.c: 116: memset(raw_command, 0, 100);
  1267  000E04  0E00               	movlw	low main@raw_command
  1268  000E06  6E14               	movwf	memset@p1,c
  1269  000E08  0E01               	movlw	high main@raw_command
  1270  000E0A  6E15               	movwf	memset@p1+1,c
  1271  000E0C  0E00               	movlw	0
  1272  000E0E  6E17               	movwf	memset@c+1,c
  1273  000E10  0E00               	movlw	0
  1274  000E12  6E16               	movwf	memset@c,c
  1275  000E14  0E00               	movlw	0
  1276  000E16  6E19               	movwf	memset@n+1,c
  1277  000E18  0E64               	movlw	100
  1278  000E1A  6E18               	movwf	memset@n,c
  1279  000E1C  EC18  F011         	call	_memset	;wreg free
  1280                           
  1281                           ;main.c: 118: uart_read_buffer(raw_command);
  1282  000E20  0E00               	movlw	low main@raw_command
  1283  000E22  6E1C               	movwf	uart_read_buffer@message,c
  1284  000E24  0E01               	movlw	high main@raw_command
  1285  000E26  6E1D               	movwf	uart_read_buffer@message+1,c
  1286  000E28  EC7B  F010         	call	_uart_read_buffer	;wreg free
  1287                           
  1288                           ;main.c: 120: command = strtok(raw_command, " \n");
  1289  000E2C  0E00               	movlw	low main@raw_command
  1290  000E2E  6E1F               	movwf	strtok@s1,c
  1291  000E30  0E01               	movlw	high main@raw_command
  1292  000E32  6E20               	movwf	strtok@s1+1,c
  1293  000E34  0EF4               	movlw	low STR_3
  1294  000E36  6E21               	movwf	strtok@s2,c
  1295  000E38  0E5F               	movlw	high STR_3
  1296  000E3A  6E22               	movwf	strtok@s2+1,c
  1297  000E3C  ECE4  F00C         	call	_strtok	;wreg free
  1298  000E40  C01F  F17F         	movff	?_strtok,main@command
  1299  000E44  C020  F180         	movff	?_strtok+1,main@command+1
  1300                           
  1301                           ;main.c: 121: arg1 = strtok((0), " \n");
  1302  000E48  0E00               	movlw	0
  1303  000E4A  6E1F               	movwf	strtok@s1,c
  1304  000E4C  0E00               	movlw	0
  1305  000E4E  6E20               	movwf	strtok@s1+1,c
  1306  000E50  0EF4               	movlw	low STR_3
  1307  000E52  6E21               	movwf	strtok@s2,c
  1308  000E54  0E5F               	movlw	high STR_3
  1309  000E56  6E22               	movwf	strtok@s2+1,c
  1310  000E58  ECE4  F00C         	call	_strtok	;wreg free
  1311  000E5C  C01F  F164         	movff	?_strtok,main@arg1
  1312  000E60  C020  F165         	movff	?_strtok+1,main@arg1+1
  1313                           
  1314                           ;main.c: 122: arg2 = strtok((0), " \n");
  1315  000E64  0E00               	movlw	0
  1316  000E66  6E1F               	movwf	strtok@s1,c
  1317  000E68  0E00               	movlw	0
  1318  000E6A  6E20               	movwf	strtok@s1+1,c
  1319  000E6C  0EF4               	movlw	low STR_3
  1320  000E6E  6E21               	movwf	strtok@s2,c
  1321  000E70  0E5F               	movlw	high STR_3
  1322  000E72  6E22               	movwf	strtok@s2+1,c
  1323  000E74  ECE4  F00C         	call	_strtok	;wreg free
  1324  000E78  C01F  F181         	movff	?_strtok,main@arg2
  1325  000E7C  C020  F182         	movff	?_strtok+1,main@arg2+1
  1326                           
  1327                           ;main.c: 124: if(strcmp(command,"idn") == 0)
  1328  000E80  C17F  F014         	movff	main@command,strcmp@s1
  1329  000E84  C180  F015         	movff	main@command+1,strcmp@s1+1
  1330  000E88  0EEC               	movlw	low STR_6
  1331  000E8A  6E16               	movwf	strcmp@s2,c
  1332  000E8C  0E5F               	movlw	high STR_6
  1333  000E8E  6E17               	movwf	strcmp@s2+1,c
  1334  000E90  EC13  F010         	call	_strcmp	;wreg free
  1335  000E94  5014               	movf	?_strcmp,w,c
  1336  000E96  1015               	iorwf	?_strcmp+1,w,c
  1337  000E98  A4D8               	btfss	status,2,c
  1338  000E9A  D006               	goto	l82
  1339                           
  1340                           ;main.c: 125: {
  1341                           ;main.c: 126: uart_send_string("Controller - V0.0.0\n");
  1342  000E9C  0E53               	movlw	low STR_7
  1343  000E9E  6E1C               	movwf	uart_send_string@message,c
  1344  000EA0  0E5F               	movlw	high STR_7
  1345  000EA2  6E1D               	movwf	uart_send_string@message+1,c
  1346  000EA4  EC37  F010         	call	_uart_send_string	;wreg free
  1347  000EA8                     l82:
  1348                           
  1349                           ;main.c: 127: }
  1350                           ;main.c: 129: if(strcmp(command,"en") == 0)
  1351  000EA8  C17F  F014         	movff	main@command,strcmp@s1
  1352  000EAC  C180  F015         	movff	main@command+1,strcmp@s1+1
  1353  000EB0  0EF7               	movlw	low STR_8
  1354  000EB2  6E16               	movwf	strcmp@s2,c
  1355  000EB4  0E5F               	movlw	high STR_8
  1356  000EB6  6E17               	movwf	strcmp@s2+1,c
  1357  000EB8  EC13  F010         	call	_strcmp	;wreg free
  1358  000EBC  5014               	movf	?_strcmp,w,c
  1359  000EBE  1015               	iorwf	?_strcmp+1,w,c
  1360  000EC0  A4D8               	btfss	status,2,c
  1361  000EC2  D03E               	goto	l85
  1362                           
  1363                           ;main.c: 130: {
  1364                           ;main.c: 131: if(strcmp(arg2,"1") == 0)
  1365  000EC4  C181  F014         	movff	main@arg2,strcmp@s1
  1366  000EC8  C182  F015         	movff	main@arg2+1,strcmp@s1+1
  1367  000ECC  0EFA               	movlw	low STR_9
  1368  000ECE  6E16               	movwf	strcmp@s2,c
  1369  000ED0  0E5F               	movlw	high STR_9
  1370  000ED2  6E17               	movwf	strcmp@s2+1,c
  1371  000ED4  EC13  F010         	call	_strcmp	;wreg free
  1372  000ED8  5014               	movf	?_strcmp,w,c
  1373  000EDA  1015               	iorwf	?_strcmp+1,w,c
  1374  000EDC  A4D8               	btfss	status,2,c
  1375  000EDE  D011               	goto	l84
  1376                           
  1377                           ;main.c: 132: {
  1378                           ;main.c: 133: L298_inputs[7]=1;
  1379  000EE0  0E00               	movlw	0
  1380  000EE2  0101               	movlb	1	; () banked
  1381  000EE4  6F78               	movwf	(main@L298_inputs+15)& (0+255),b
  1382  000EE6  0E01               	movlw	1
  1383  000EE8  6F77               	movwf	(main@L298_inputs+14)& (0+255),b
  1384                           
  1385                           ; BSR set to: 1
  1386                           ;main.c: 134: send_sr(L298_inputs);
  1387  000EEA  0E69               	movlw	low main@L298_inputs
  1388  000EEC  6E14               	movwf	send_sr@buffer,c
  1389  000EEE  0E01               	movlw	high main@L298_inputs
  1390  000EF0  6E15               	movwf	send_sr@buffer+1,c
  1391  000EF2  EC4E  F00F         	call	_send_sr	;wreg free
  1392                           
  1393                           ;main.c: 135: uart_send_string("M1 IN1 enable\n");
  1394  000EF6  0EAE               	movlw	low STR_10
  1395  000EF8  6E1C               	movwf	uart_send_string@message,c
  1396  000EFA  0E5F               	movlw	high STR_10
  1397  000EFC  6E1D               	movwf	uart_send_string@message+1,c
  1398  000EFE  EC37  F010         	call	_uart_send_string	;wreg free
  1399  000F02                     l84:
  1400                           
  1401                           ;main.c: 136: }
  1402                           ;main.c: 137: if(strcmp(arg2,"2") == 0)
  1403  000F02  C181  F014         	movff	main@arg2,strcmp@s1
  1404  000F06  C182  F015         	movff	main@arg2+1,strcmp@s1+1
  1405  000F0A  0EFC               	movlw	low STR_11
  1406  000F0C  6E16               	movwf	strcmp@s2,c
  1407  000F0E  0E5F               	movlw	high STR_11
  1408  000F10  6E17               	movwf	strcmp@s2+1,c
  1409  000F12  EC13  F010         	call	_strcmp	;wreg free
  1410  000F16  5014               	movf	?_strcmp,w,c
  1411  000F18  1015               	iorwf	?_strcmp+1,w,c
  1412  000F1A  A4D8               	btfss	status,2,c
  1413  000F1C  D011               	goto	l85
  1414                           
  1415                           ;main.c: 138: {
  1416                           ;main.c: 139: L298_inputs[6]=1;
  1417  000F1E  0E00               	movlw	0
  1418  000F20  0101               	movlb	1	; () banked
  1419  000F22  6F76               	movwf	(main@L298_inputs+13)& (0+255),b
  1420  000F24  0E01               	movlw	1
  1421  000F26  6F75               	movwf	(main@L298_inputs+12)& (0+255),b
  1422                           
  1423                           ; BSR set to: 1
  1424                           ;main.c: 140: send_sr(L298_inputs);
  1425  000F28  0E69               	movlw	low main@L298_inputs
  1426  000F2A  6E14               	movwf	send_sr@buffer,c
  1427  000F2C  0E01               	movlw	high main@L298_inputs
  1428  000F2E  6E15               	movwf	send_sr@buffer+1,c
  1429  000F30  EC4E  F00F         	call	_send_sr	;wreg free
  1430                           
  1431                           ;main.c: 141: uart_send_string("M1 IN2 enable\n");
  1432  000F34  0EBD               	movlw	low STR_12
  1433  000F36  6E1C               	movwf	uart_send_string@message,c
  1434  000F38  0E5F               	movlw	high STR_12
  1435  000F3A  6E1D               	movwf	uart_send_string@message+1,c
  1436  000F3C  EC37  F010         	call	_uart_send_string	;wreg free
  1437  000F40                     l85:
  1438                           
  1439                           ;main.c: 142: }
  1440                           ;main.c: 143: }
  1441                           ;main.c: 145: if(strcmp(command,"dis") == 0)
  1442  000F40  C17F  F014         	movff	main@command,strcmp@s1
  1443  000F44  C180  F015         	movff	main@command+1,strcmp@s1+1
  1444  000F48  0EF0               	movlw	low STR_13
  1445  000F4A  6E16               	movwf	strcmp@s2,c
  1446  000F4C  0E5F               	movlw	high STR_13
  1447  000F4E  6E17               	movwf	strcmp@s2+1,c
  1448  000F50  EC13  F010         	call	_strcmp	;wreg free
  1449  000F54  5014               	movf	?_strcmp,w,c
  1450  000F56  1015               	iorwf	?_strcmp+1,w,c
  1451  000F58  A4D8               	btfss	status,2,c
  1452  000F5A  D03E               	goto	l88
  1453                           
  1454                           ;main.c: 146: {
  1455                           ;main.c: 147: if(strcmp(arg2,"1") == 0)
  1456  000F5C  C181  F014         	movff	main@arg2,strcmp@s1
  1457  000F60  C182  F015         	movff	main@arg2+1,strcmp@s1+1
  1458  000F64  0EFA               	movlw	low STR_9
  1459  000F66  6E16               	movwf	strcmp@s2,c
  1460  000F68  0E5F               	movlw	high STR_9
  1461  000F6A  6E17               	movwf	strcmp@s2+1,c
  1462  000F6C  EC13  F010         	call	_strcmp	;wreg free
  1463  000F70  5014               	movf	?_strcmp,w,c
  1464  000F72  1015               	iorwf	?_strcmp+1,w,c
  1465  000F74  A4D8               	btfss	status,2,c
  1466  000F76  D011               	goto	l87
  1467                           
  1468                           ;main.c: 148: {
  1469                           ;main.c: 149: L298_inputs[7]=0;
  1470  000F78  0E00               	movlw	0
  1471  000F7A  0101               	movlb	1	; () banked
  1472  000F7C  6F78               	movwf	(main@L298_inputs+15)& (0+255),b
  1473  000F7E  0E00               	movlw	0
  1474  000F80  6F77               	movwf	(main@L298_inputs+14)& (0+255),b
  1475                           
  1476                           ; BSR set to: 1
  1477                           ;main.c: 150: send_sr(L298_inputs);
  1478  000F82  0E69               	movlw	low main@L298_inputs
  1479  000F84  6E14               	movwf	send_sr@buffer,c
  1480  000F86  0E01               	movlw	high main@L298_inputs
  1481  000F88  6E15               	movwf	send_sr@buffer+1,c
  1482  000F8A  EC4E  F00F         	call	_send_sr	;wreg free
  1483                           
  1484                           ;main.c: 151: uart_send_string("M1 IN1 disable\n");
  1485  000F8E  0E8E               	movlw	low STR_15
  1486  000F90  6E1C               	movwf	uart_send_string@message,c
  1487  000F92  0E5F               	movlw	high STR_15
  1488  000F94  6E1D               	movwf	uart_send_string@message+1,c
  1489  000F96  EC37  F010         	call	_uart_send_string	;wreg free
  1490  000F9A                     l87:
  1491                           
  1492                           ;main.c: 152: }
  1493                           ;main.c: 153: if(strcmp(arg2,"2") == 0)
  1494  000F9A  C181  F014         	movff	main@arg2,strcmp@s1
  1495  000F9E  C182  F015         	movff	main@arg2+1,strcmp@s1+1
  1496  000FA2  0EFC               	movlw	low STR_11
  1497  000FA4  6E16               	movwf	strcmp@s2,c
  1498  000FA6  0E5F               	movlw	high STR_11
  1499  000FA8  6E17               	movwf	strcmp@s2+1,c
  1500  000FAA  EC13  F010         	call	_strcmp	;wreg free
  1501  000FAE  5014               	movf	?_strcmp,w,c
  1502  000FB0  1015               	iorwf	?_strcmp+1,w,c
  1503  000FB2  A4D8               	btfss	status,2,c
  1504  000FB4  D011               	goto	l88
  1505                           
  1506                           ;main.c: 154: {
  1507                           ;main.c: 155: L298_inputs[6]=0;
  1508  000FB6  0E00               	movlw	0
  1509  000FB8  0101               	movlb	1	; () banked
  1510  000FBA  6F76               	movwf	(main@L298_inputs+13)& (0+255),b
  1511  000FBC  0E00               	movlw	0
  1512  000FBE  6F75               	movwf	(main@L298_inputs+12)& (0+255),b
  1513                           
  1514                           ; BSR set to: 1
  1515                           ;main.c: 156: send_sr(L298_inputs);
  1516  000FC0  0E69               	movlw	low main@L298_inputs
  1517  000FC2  6E14               	movwf	send_sr@buffer,c
  1518  000FC4  0E01               	movlw	high main@L298_inputs
  1519  000FC6  6E15               	movwf	send_sr@buffer+1,c
  1520  000FC8  EC4E  F00F         	call	_send_sr	;wreg free
  1521                           
  1522                           ;main.c: 157: uart_send_string("M1 IN2 disable\n");
  1523  000FCC  0E9E               	movlw	low STR_17
  1524  000FCE  6E1C               	movwf	uart_send_string@message,c
  1525  000FD0  0E5F               	movlw	high STR_17
  1526  000FD2  6E1D               	movwf	uart_send_string@message+1,c
  1527  000FD4  EC37  F010         	call	_uart_send_string	;wreg free
  1528  000FD8                     l88:
  1529                           
  1530                           ;main.c: 158: }
  1531                           ;main.c: 159: }
  1532                           ;main.c: 161: if(strcmp(command,"pwm") == 0)
  1533  000FD8  C17F  F014         	movff	main@command,strcmp@s1
  1534  000FDC  C180  F015         	movff	main@command+1,strcmp@s1+1
  1535  000FE0  0EE8               	movlw	low STR_18
  1536  000FE2  6E16               	movwf	strcmp@s2,c
  1537  000FE4  0E5F               	movlw	high STR_18
  1538  000FE6  6E17               	movwf	strcmp@s2+1,c
  1539  000FE8  EC13  F010         	call	_strcmp	;wreg free
  1540  000FEC  5014               	movf	?_strcmp,w,c
  1541  000FEE  1015               	iorwf	?_strcmp+1,w,c
  1542  000FF0  A4D8               	btfss	status,2,c
  1543  000FF2  D00E               	goto	l89
  1544                           
  1545                           ;main.c: 162: {
  1546                           ;main.c: 163: uart_send_string("pwm enabled\n");
  1547  000FF4  0ECC               	movlw	low STR_19
  1548  000FF6  6E1C               	movwf	uart_send_string@message,c
  1549  000FF8  0E5F               	movlw	high STR_19
  1550  000FFA  6E1D               	movwf	uart_send_string@message+1,c
  1551  000FFC  EC37  F010         	call	_uart_send_string	;wreg free
  1552                           
  1553                           ;main.c: 164: CCPR1L=atoi(arg2);
  1554  001000  C181  F028         	movff	main@arg2,atoi@s
  1555  001004  C182  F029         	movff	main@arg2+1,atoi@s+1
  1556  001008  EC7D  F00C         	call	_atoi	;wreg free
  1557  00100C  5028               	movf	?_atoi,w,c
  1558  00100E  6EBE               	movwf	4030,c	;volatile
  1559  001010                     l89:
  1560                           
  1561                           ;main.c: 165: }
  1562                           ;main.c: 167: if(strcmp(command,"imeas") == 0)
  1563  001010  C17F  F014         	movff	main@command,strcmp@s1
  1564  001014  C180  F015         	movff	main@command+1,strcmp@s1+1
  1565  001018  0EE2               	movlw	low STR_20
  1566  00101A  6E16               	movwf	strcmp@s2,c
  1567  00101C  0E5F               	movlw	high STR_20
  1568  00101E  6E17               	movwf	strcmp@s2+1,c
  1569  001020  EC13  F010         	call	_strcmp	;wreg free
  1570  001024  5014               	movf	?_strcmp,w,c
  1571  001026  1015               	iorwf	?_strcmp+1,w,c
  1572  001028  A4D8               	btfss	status,2,c
  1573  00102A  D6EC               	goto	l81
  1574                           
  1575                           ;main.c: 168: {
  1576                           ;main.c: 169: if(strcmp(arg2,"1") == 0)
  1577  00102C  C181  F014         	movff	main@arg2,strcmp@s1
  1578  001030  C182  F015         	movff	main@arg2+1,strcmp@s1+1
  1579  001034  0EFA               	movlw	low STR_9
  1580  001036  6E16               	movwf	strcmp@s2,c
  1581  001038  0E5F               	movlw	high STR_9
  1582  00103A  6E17               	movwf	strcmp@s2+1,c
  1583  00103C  EC13  F010         	call	_strcmp	;wreg free
  1584  001040  5014               	movf	?_strcmp,w,c
  1585  001042  1015               	iorwf	?_strcmp+1,w,c
  1586  001044  A4D8               	btfss	status,2,c
  1587  001046  D6DE               	goto	l81
  1588                           
  1589                           ;main.c: 170: {
  1590                           ;main.c: 171: char send_current[6];
  1591                           ;main.c: 172: sprintf(send_current, "%0.3f A\n", (float)motor_1_ia*0.00207779255);
  1592  001048  C193  F01C         	movff	_motor_1_ia,___awtoft@c
  1593  00104C  C194  F01D         	movff	_motor_1_ia+1,___awtoft@c+1
  1594  001050  ECFC  F010         	call	___awtoft	;wreg free
  1595  001054  C01C  F028         	movff	?___awtoft,___ftmul@f1
  1596  001058  C01D  F029         	movff	?___awtoft+1,___ftmul@f1+1
  1597  00105C  C01E  F02A         	movff	?___awtoft+2,___ftmul@f1+2
  1598  001060  0E2C               	movlw	44
  1599  001062  6E2B               	movwf	___ftmul@f2,c
  1600  001064  0E08               	movlw	8
  1601  001066  6E2C               	movwf	___ftmul@f2+1,c
  1602  001068  0E3B               	movlw	59
  1603  00106A  6E2D               	movwf	___ftmul@f2+2,c
  1604  00106C  EC03  F00C         	call	___ftmul	;wreg free
  1605  001070  C028  F166         	movff	?___ftmul,_main$1536
  1606  001074  C029  F167         	movff	?___ftmul+1,_main$1536+1
  1607  001078  C02A  F168         	movff	?___ftmul+2,_main$1536+2
  1608                           
  1609                           ;main.c: 170: {
  1610                           ;main.c: 171: char send_current[6];
  1611                           ;main.c: 172: sprintf(send_current, "%0.3f A\n", (float)motor_1_ia*0.00207779255);
  1612  00107C  0E79               	movlw	low main@send_current
  1613  00107E  0100               	movlb	0	; () banked
  1614  001080  6FDA               	movwf	sprintf@sp& (0+255),b
  1615  001082  0E01               	movlw	high main@send_current
  1616  001084  6FDB               	movwf	(sprintf@sp+1)& (0+255),b
  1617  001086  0ED9               	movlw	low STR_22
  1618  001088  6FDC               	movwf	sprintf@f& (0+255),b
  1619  00108A  0E5F               	movlw	high STR_22
  1620  00108C  6FDD               	movwf	(sprintf@f+1)& (0+255),b
  1621  00108E  C166  F0DE         	movff	_main$1536,?_sprintf+4
  1622  001092  C167  F0DF         	movff	_main$1536+1,?_sprintf+5
  1623  001096  C168  F0E0         	movff	_main$1536+2,?_sprintf+6
  1624  00109A  EC09  F000         	call	_sprintf	;wreg free
  1625                           
  1626                           ;main.c: 173: uart_send_string(send_current);
  1627  00109E  0E79               	movlw	low main@send_current
  1628  0010A0  6E1C               	movwf	uart_send_string@message,c
  1629  0010A2  0E01               	movlw	high main@send_current
  1630  0010A4  6E1D               	movwf	uart_send_string@message+1,c
  1631  0010A6  EC37  F010         	call	_uart_send_string	;wreg free
  1632  0010AA  D6AC               	goto	l81
  1633  0010AC                     __end_of_main:
  1634                           	opt stack 0
  1635                           tblptru	equ	0xFF8
  1636                           tblptrh	equ	0xFF7
  1637                           tblptrl	equ	0xFF6
  1638                           tablat	equ	0xFF5
  1639                           intcon	equ	0xFF2
  1640                           intcon2	equ	0xFF1
  1641                           postinc0	equ	0xFEE
  1642                           wreg	equ	0xFE8
  1643                           plusw1	equ	0xFE3
  1644                           plusw2	equ	0xFDB
  1645                           status	equ	0xFD8
  1646                           
  1647 ;; *************** function _uart_set_tx *****************
  1648 ;; Defined at:
  1649 ;;		line 22 in file "usart.c"
  1650 ;; Parameters:    Size  Location     Type
  1651 ;;		None
  1652 ;; Auto vars:     Size  Location     Type
  1653 ;;		None
  1654 ;; Return value:  Size  Location     Type
  1655 ;;                  1    wreg      void 
  1656 ;; Registers used:
  1657 ;;		None
  1658 ;; Tracked objects:
  1659 ;;		On entry : 0/0
  1660 ;;		On exit  : 0/0
  1661 ;;		Unchanged: 0/0
  1662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1663 ;;      Params:         0       0       0       0       0       0       0       0       0
  1664 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1665 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1666 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1667 ;;Total ram usage:        0 bytes
  1668 ;; Hardware stack levels used:    1
  1669 ;; Hardware stack levels required when called:    2
  1670 ;; This function calls:
  1671 ;;		Nothing
  1672 ;; This function is called by:
  1673 ;;		_main
  1674 ;; This function uses a non-reentrant model
  1675 ;;
  1676                           
  1677                           	psect	text1
  1678  0022E6                     __ptext1:
  1679                           	opt stack 0
  1680  0022E6                     _uart_set_tx:
  1681                           	opt stack 28
  1682                           
  1683                           ;usart.c: 25: TXSTAbits.TX9 = 0;
  1684                           
  1685                           ;incstack = 0
  1686  0022E6  9CAC               	bcf	4012,6,c	;volatile
  1687                           
  1688                           ;usart.c: 26: TXSTAbits.TXEN = 1;
  1689  0022E8  8AAC               	bsf	4012,5,c	;volatile
  1690                           
  1691                           ;usart.c: 27: TXSTAbits.SYNC = 0;
  1692  0022EA  98AC               	bcf	4012,4,c	;volatile
  1693                           
  1694                           ;usart.c: 28: TXSTAbits.SENDB = 0;
  1695  0022EC  96AC               	bcf	4012,3,c	;volatile
  1696                           
  1697                           ;usart.c: 29: TXSTAbits.BRGH = 1;
  1698  0022EE  84AC               	bsf	4012,2,c	;volatile
  1699  0022F0  0012               	return		;funcret
  1700  0022F2                     __end_of_uart_set_tx:
  1701                           	opt stack 0
  1702                           tblptru	equ	0xFF8
  1703                           tblptrh	equ	0xFF7
  1704                           tblptrl	equ	0xFF6
  1705                           tablat	equ	0xFF5
  1706                           intcon	equ	0xFF2
  1707                           intcon2	equ	0xFF1
  1708                           postinc0	equ	0xFEE
  1709                           wreg	equ	0xFE8
  1710                           plusw1	equ	0xFE3
  1711                           plusw2	equ	0xFDB
  1712                           status	equ	0xFD8
  1713                           
  1714 ;; *************** function _uart_set_rx *****************
  1715 ;; Defined at:
  1716 ;;		line 32 in file "usart.c"
  1717 ;; Parameters:    Size  Location     Type
  1718 ;;		None
  1719 ;; Auto vars:     Size  Location     Type
  1720 ;;		None
  1721 ;; Return value:  Size  Location     Type
  1722 ;;                  1    wreg      void 
  1723 ;; Registers used:
  1724 ;;		None
  1725 ;; Tracked objects:
  1726 ;;		On entry : 0/0
  1727 ;;		On exit  : 0/0
  1728 ;;		Unchanged: 0/0
  1729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1730 ;;      Params:         0       0       0       0       0       0       0       0       0
  1731 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1732 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1733 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1734 ;;Total ram usage:        0 bytes
  1735 ;; Hardware stack levels used:    1
  1736 ;; Hardware stack levels required when called:    2
  1737 ;; This function calls:
  1738 ;;		Nothing
  1739 ;; This function is called by:
  1740 ;;		_main
  1741 ;; This function uses a non-reentrant model
  1742 ;;
  1743                           
  1744                           	psect	text2
  1745  0022F2                     __ptext2:
  1746                           	opt stack 0
  1747  0022F2                     _uart_set_rx:
  1748                           	opt stack 28
  1749                           
  1750                           ;usart.c: 35: RCSTAbits.SPEN = 1;
  1751                           
  1752                           ;incstack = 0
  1753  0022F2  8EAB               	bsf	4011,7,c	;volatile
  1754                           
  1755                           ;usart.c: 36: RCSTAbits.RX9 = 0;
  1756  0022F4  9CAB               	bcf	4011,6,c	;volatile
  1757                           
  1758                           ;usart.c: 37: RCSTAbits.SREN = 0;
  1759  0022F6  9AAB               	bcf	4011,5,c	;volatile
  1760                           
  1761                           ;usart.c: 38: RCSTAbits.CREN = 1;
  1762  0022F8  88AB               	bsf	4011,4,c	;volatile
  1763                           
  1764                           ;usart.c: 39: RCSTAbits.ADDEN = 0;
  1765  0022FA  96AB               	bcf	4011,3,c	;volatile
  1766  0022FC  0012               	return		;funcret
  1767  0022FE                     __end_of_uart_set_rx:
  1768                           	opt stack 0
  1769                           tblptru	equ	0xFF8
  1770                           tblptrh	equ	0xFF7
  1771                           tblptrl	equ	0xFF6
  1772                           tablat	equ	0xFF5
  1773                           intcon	equ	0xFF2
  1774                           intcon2	equ	0xFF1
  1775                           postinc0	equ	0xFEE
  1776                           wreg	equ	0xFE8
  1777                           plusw1	equ	0xFE3
  1778                           plusw2	equ	0xFDB
  1779                           status	equ	0xFD8
  1780                           
  1781 ;; *************** function _uart_set_baud_rate *****************
  1782 ;; Defined at:
  1783 ;;		line 42 in file "usart.c"
  1784 ;; Parameters:    Size  Location     Type
  1785 ;;		None
  1786 ;; Auto vars:     Size  Location     Type
  1787 ;;		None
  1788 ;; Return value:  Size  Location     Type
  1789 ;;                  1    wreg      void 
  1790 ;; Registers used:
  1791 ;;		wreg, status,2
  1792 ;; Tracked objects:
  1793 ;;		On entry : 0/0
  1794 ;;		On exit  : 0/0
  1795 ;;		Unchanged: 0/0
  1796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1797 ;;      Params:         0       0       0       0       0       0       0       0       0
  1798 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1799 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1800 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1801 ;;Total ram usage:        0 bytes
  1802 ;; Hardware stack levels used:    1
  1803 ;; Hardware stack levels required when called:    2
  1804 ;; This function calls:
  1805 ;;		Nothing
  1806 ;; This function is called by:
  1807 ;;		_main
  1808 ;; This function uses a non-reentrant model
  1809 ;;
  1810                           
  1811                           	psect	text3
  1812  0022D6                     __ptext3:
  1813                           	opt stack 0
  1814  0022D6                     _uart_set_baud_rate:
  1815                           	opt stack 28
  1816                           
  1817                           ;usart.c: 44: SPBRG=8;
  1818                           
  1819                           ;incstack = 0
  1820  0022D6  0E08               	movlw	8
  1821  0022D8  6EAF               	movwf	4015,c	;volatile
  1822                           
  1823                           ;usart.c: 45: SPBRGH=2;
  1824  0022DA  0E02               	movlw	2
  1825  0022DC  6EB0               	movwf	4016,c	;volatile
  1826                           
  1827                           ;usart.c: 48: BAUDCONbits.RXDTP = 0;
  1828  0022DE  9AB8               	bcf	4024,5,c	;volatile
  1829                           
  1830                           ;usart.c: 49: BAUDCONbits.TXCKP = 0;
  1831  0022E0  98B8               	bcf	4024,4,c	;volatile
  1832                           
  1833                           ;usart.c: 50: BAUDCONbits.BRG16 = 1;
  1834  0022E2  86B8               	bsf	4024,3,c	;volatile
  1835  0022E4  0012               	return		;funcret
  1836  0022E6                     __end_of_uart_set_baud_rate:
  1837                           	opt stack 0
  1838                           tblptru	equ	0xFF8
  1839                           tblptrh	equ	0xFF7
  1840                           tblptrl	equ	0xFF6
  1841                           tablat	equ	0xFF5
  1842                           intcon	equ	0xFF2
  1843                           intcon2	equ	0xFF1
  1844                           postinc0	equ	0xFEE
  1845                           wreg	equ	0xFE8
  1846                           plusw1	equ	0xFE3
  1847                           plusw2	equ	0xFDB
  1848                           status	equ	0xFD8
  1849                           
  1850 ;; *************** function _uart_send_string *****************
  1851 ;; Defined at:
  1852 ;;		line 53 in file "usart.c"
  1853 ;; Parameters:    Size  Location     Type
  1854 ;;  message         2   27[COMRAM] PTR unsigned char 
  1855 ;;		 -> main@send_current(6), STR_19(13), STR_17(16), STR_15(16), 
  1856 ;;		 -> STR_12(15), STR_10(15), STR_7(21), STR_2(20), 
  1857 ;;		 -> STR_1(18), 
  1858 ;; Auto vars:     Size  Location     Type
  1859 ;;		None
  1860 ;; Return value:  Size  Location     Type
  1861 ;;                  1    wreg      void 
  1862 ;; Registers used:
  1863 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1864 ;; Tracked objects:
  1865 ;;		On entry : 0/0
  1866 ;;		On exit  : 0/0
  1867 ;;		Unchanged: 0/0
  1868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1869 ;;      Params:         2       0       0       0       0       0       0       0       0
  1870 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1871 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1872 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1873 ;;Total ram usage:        2 bytes
  1874 ;; Hardware stack levels used:    1
  1875 ;; Hardware stack levels required when called:    3
  1876 ;; This function calls:
  1877 ;;		_memset
  1878 ;;		_strcpy
  1879 ;; This function is called by:
  1880 ;;		_main
  1881 ;; This function uses a non-reentrant model
  1882 ;;
  1883                           
  1884                           	psect	text4
  1885  00206E                     __ptext4:
  1886                           	opt stack 0
  1887  00206E                     _uart_send_string:
  1888                           	opt stack 27
  1889                           
  1890                           ;usart.c: 55: strcpy(tx_buffer,message);
  1891                           
  1892                           ;incstack = 0
  1893  00206E  0E60               	movlw	low _tx_buffer
  1894  002070  6E14               	movwf	strcpy@to,c
  1895  002072  0E00               	movlw	high _tx_buffer
  1896  002074  6E15               	movwf	strcpy@to+1,c
  1897  002076  C01C  F016         	movff	uart_send_string@message,strcpy@from
  1898  00207A  C01D  F017         	movff	uart_send_string@message+1,strcpy@from+1
  1899  00207E  EC59  F010         	call	_strcpy	;wreg free
  1900                           
  1901                           ;usart.c: 56: tx_transmission_end = 0;
  1902  002082  0E00               	movlw	0
  1903  002084  6E4B               	movwf	_tx_transmission_end+1,c
  1904  002086  0E00               	movlw	0
  1905  002088  6E4A               	movwf	_tx_transmission_end,c
  1906                           
  1907                           ;usart.c: 57: PIE1bits.TXIE = 1;
  1908  00208A  889D               	bsf	3997,4,c	;volatile
  1909  00208C                     
  1910                           ;usart.c: 59: {
  1911  00208C  504A               	movf	_tx_transmission_end,w,c
  1912  00208E  104B               	iorwf	_tx_transmission_end+1,w,c
  1913  002090  B4D8               	btfsc	status,2,c
  1914  002092  D7FC               	goto	l147
  1915                           
  1916                           ;usart.c: 61: }
  1917                           ;usart.c: 62: memset(tx_buffer, 0, 100);
  1918  002094  0E60               	movlw	low _tx_buffer
  1919  002096  6E14               	movwf	memset@p1,c
  1920  002098  0E00               	movlw	high _tx_buffer
  1921  00209A  6E15               	movwf	memset@p1+1,c
  1922  00209C  0E00               	movlw	0
  1923  00209E  6E17               	movwf	memset@c+1,c
  1924  0020A0  0E00               	movlw	0
  1925  0020A2  6E16               	movwf	memset@c,c
  1926  0020A4  0E00               	movlw	0
  1927  0020A6  6E19               	movwf	memset@n+1,c
  1928  0020A8  0E64               	movlw	100
  1929  0020AA  6E18               	movwf	memset@n,c
  1930  0020AC  EC18  F011         	call	_memset	;wreg free
  1931  0020B0  0012               	return		;funcret
  1932  0020B2                     __end_of_uart_send_string:
  1933                           	opt stack 0
  1934                           tblptru	equ	0xFF8
  1935                           tblptrh	equ	0xFF7
  1936                           tblptrl	equ	0xFF6
  1937                           tablat	equ	0xFF5
  1938                           intcon	equ	0xFF2
  1939                           intcon2	equ	0xFF1
  1940                           postinc0	equ	0xFEE
  1941                           wreg	equ	0xFE8
  1942                           plusw1	equ	0xFE3
  1943                           plusw2	equ	0xFDB
  1944                           status	equ	0xFD8
  1945                           
  1946 ;; *************** function _uart_read_buffer *****************
  1947 ;; Defined at:
  1948 ;;		line 65 in file "usart.c"
  1949 ;; Parameters:    Size  Location     Type
  1950 ;;  message         2   27[COMRAM] PTR unsigned char 
  1951 ;;		 -> main@raw_command(100), 
  1952 ;; Auto vars:     Size  Location     Type
  1953 ;;		None
  1954 ;; Return value:  Size  Location     Type
  1955 ;;                  1    wreg      void 
  1956 ;; Registers used:
  1957 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1958 ;; Tracked objects:
  1959 ;;		On entry : 0/0
  1960 ;;		On exit  : 0/0
  1961 ;;		Unchanged: 0/0
  1962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1963 ;;      Params:         2       0       0       0       0       0       0       0       0
  1964 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1965 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1966 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1967 ;;Total ram usage:        2 bytes
  1968 ;; Hardware stack levels used:    1
  1969 ;; Hardware stack levels required when called:    3
  1970 ;; This function calls:
  1971 ;;		_memset
  1972 ;;		_strcpy
  1973 ;; This function is called by:
  1974 ;;		_main
  1975 ;; This function uses a non-reentrant model
  1976 ;;
  1977                           
  1978                           	psect	text5
  1979  0020F6                     __ptext5:
  1980                           	opt stack 0
  1981  0020F6                     _uart_read_buffer:
  1982                           	opt stack 27
  1983                           
  1984                           ;usart.c: 67: if(rx_buffer_full)
  1985                           
  1986                           ;incstack = 0
  1987  0020F6  5040               	movf	_rx_buffer_full,w,c
  1988  0020F8  1041               	iorwf	_rx_buffer_full+1,w,c
  1989  0020FA  B4D8               	btfsc	status,2,c
  1990  0020FC  0012               	return	
  1991                           
  1992                           ;usart.c: 68: {
  1993                           ;usart.c: 70: strcpy(message,rx_buffer);
  1994  0020FE  C01C  F014         	movff	uart_read_buffer@message,strcpy@to
  1995  002102  C01D  F015         	movff	uart_read_buffer@message+1,strcpy@to+1
  1996  002106  0E95               	movlw	low _rx_buffer
  1997  002108  6E16               	movwf	strcpy@from,c
  1998  00210A  0E01               	movlw	high _rx_buffer
  1999  00210C  6E17               	movwf	strcpy@from+1,c
  2000  00210E  EC59  F010         	call	_strcpy	;wreg free
  2001                           
  2002                           ;usart.c: 73: memset(rx_buffer, 0, 100);
  2003  002112  0E95               	movlw	low _rx_buffer
  2004  002114  6E14               	movwf	memset@p1,c
  2005  002116  0E01               	movlw	high _rx_buffer
  2006  002118  6E15               	movwf	memset@p1+1,c
  2007  00211A  0E00               	movlw	0
  2008  00211C  6E17               	movwf	memset@c+1,c
  2009  00211E  0E00               	movlw	0
  2010  002120  6E16               	movwf	memset@c,c
  2011  002122  0E00               	movlw	0
  2012  002124  6E19               	movwf	memset@n+1,c
  2013  002126  0E64               	movlw	100
  2014  002128  6E18               	movwf	memset@n,c
  2015  00212A  EC18  F011         	call	_memset	;wreg free
  2016                           
  2017                           ;usart.c: 76: rx_buffer_full = 0;
  2018  00212E  0E00               	movlw	0
  2019  002130  6E41               	movwf	_rx_buffer_full+1,c
  2020  002132  0E00               	movlw	0
  2021  002134  6E40               	movwf	_rx_buffer_full,c
  2022  002136  0012               	return	
  2023  002138                     __end_of_uart_read_buffer:
  2024                           	opt stack 0
  2025                           tblptru	equ	0xFF8
  2026                           tblptrh	equ	0xFF7
  2027                           tblptrl	equ	0xFF6
  2028                           tablat	equ	0xFF5
  2029                           intcon	equ	0xFF2
  2030                           intcon2	equ	0xFF1
  2031                           postinc0	equ	0xFEE
  2032                           wreg	equ	0xFE8
  2033                           plusw1	equ	0xFE3
  2034                           plusw2	equ	0xFDB
  2035                           status	equ	0xFD8
  2036                           
  2037 ;; *************** function _strcpy *****************
  2038 ;; Defined at:
  2039 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcpy.c"
  2040 ;; Parameters:    Size  Location     Type
  2041 ;;  to              2   19[COMRAM] PTR unsigned char 
  2042 ;;		 -> tx_buffer(100), main@raw_command(100), 
  2043 ;;  from            2   21[COMRAM] PTR const unsigned char 
  2044 ;;		 -> rx_buffer(100), main@send_current(6), STR_19(13), STR_17(16), 
  2045 ;;		 -> STR_15(16), STR_12(15), STR_10(15), STR_7(21), 
  2046 ;;		 -> STR_2(20), STR_1(18), 
  2047 ;; Auto vars:     Size  Location     Type
  2048 ;;  cp              2   23[COMRAM] PTR unsigned char 
  2049 ;;		 -> tx_buffer(100), main@raw_command(100), 
  2050 ;; Return value:  Size  Location     Type
  2051 ;;                  2   19[COMRAM] PTR unsigned char 
  2052 ;; Registers used:
  2053 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  2054 ;; Tracked objects:
  2055 ;;		On entry : 0/0
  2056 ;;		On exit  : 0/0
  2057 ;;		Unchanged: 0/0
  2058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2059 ;;      Params:         4       0       0       0       0       0       0       0       0
  2060 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2061 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2062 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2063 ;;Total ram usage:        6 bytes
  2064 ;; Hardware stack levels used:    1
  2065 ;; Hardware stack levels required when called:    2
  2066 ;; This function calls:
  2067 ;;		Nothing
  2068 ;; This function is called by:
  2069 ;;		_uart_send_string
  2070 ;;		_uart_read_buffer
  2071 ;; This function uses a non-reentrant model
  2072 ;;
  2073                           
  2074                           	psect	text6
  2075  0020B2                     __ptext6:
  2076                           	opt stack 0
  2077  0020B2                     _strcpy:
  2078                           	opt stack 27
  2079                           
  2080                           ;incstack = 0
  2081  0020B2  C014  F018         	movff	strcpy@to,strcpy@cp
  2082  0020B6  C015  F019         	movff	strcpy@to+1,strcpy@cp+1
  2083  0020BA  D004               	goto	l921
  2084  0020BC  4A18               	infsnz	strcpy@cp,f,c
  2085  0020BE  2A19               	incf	strcpy@cp+1,f,c
  2086  0020C0  4A16               	infsnz	strcpy@from,f,c
  2087  0020C2  2A17               	incf	strcpy@from+1,f,c
  2088  0020C4                     l921:
  2089  0020C4  C016  FFF6         	movff	strcpy@from,tblptrl
  2090  0020C8  C017  FFF7         	movff	strcpy@from+1,tblptrh
  2091  0020CC  6AF8               	clrf	tblptru,c
  2092  0020CE  C018  FFD9         	movff	strcpy@cp,fsr2l
  2093  0020D2  C019  FFDA         	movff	strcpy@cp+1,fsr2h
  2094  0020D6  0E07               	movlw	(high __ramtop+-1)
  2095  0020D8  64F7               	cpfsgt	tblptrh,c
  2096  0020DA  D003               	bra	u2387
  2097  0020DC  0008               	tblrd		*
  2098  0020DE  50F5               	movf	tablat,w,c
  2099  0020E0  D005               	bra	u2380
  2100  0020E2                     u2387:
  2101  0020E2  CFF6 FFE1          	movff	tblptrl,fsr1l
  2102  0020E6  CFF7 FFE2          	movff	tblptrh,fsr1h
  2103  0020EA  50E7               	movf	indf1,w,c
  2104  0020EC                     u2380:
  2105  0020EC  6EDF               	movwf	indf2,c
  2106  0020EE  50DF               	movf	indf2,w,c
  2107  0020F0  B4D8               	btfsc	status,2,c
  2108  0020F2  0012               	return	
  2109  0020F4  D7E3               	goto	l922
  2110  0020F6                     __end_of_strcpy:
  2111                           	opt stack 0
  2112                           tblptru	equ	0xFF8
  2113                           tblptrh	equ	0xFF7
  2114                           tblptrl	equ	0xFF6
  2115                           tablat	equ	0xFF5
  2116                           intcon	equ	0xFF2
  2117                           intcon2	equ	0xFF1
  2118                           postinc0	equ	0xFEE
  2119                           wreg	equ	0xFE8
  2120                           indf1	equ	0xFE7
  2121                           plusw1	equ	0xFE3
  2122                           fsr1h	equ	0xFE2
  2123                           fsr1l	equ	0xFE1
  2124                           indf2	equ	0xFDF
  2125                           plusw2	equ	0xFDB
  2126                           fsr2h	equ	0xFDA
  2127                           fsr2l	equ	0xFD9
  2128                           status	equ	0xFD8
  2129                           
  2130 ;; *************** function _memset *****************
  2131 ;; Defined at:
  2132 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
  2133 ;; Parameters:    Size  Location     Type
  2134 ;;  p1              2   19[COMRAM] PTR void 
  2135 ;;		 -> rx_buffer(100), tx_buffer(100), main@raw_command(100), 
  2136 ;;  c               2   21[COMRAM] int 
  2137 ;;  n               2   23[COMRAM] unsigned int 
  2138 ;; Auto vars:     Size  Location     Type
  2139 ;;  p               2   25[COMRAM] PTR unsigned char 
  2140 ;;		 -> rx_buffer(100), tx_buffer(100), main@raw_command(100), 
  2141 ;; Return value:  Size  Location     Type
  2142 ;;                  2   19[COMRAM] PTR void 
  2143 ;; Registers used:
  2144 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2145 ;; Tracked objects:
  2146 ;;		On entry : 0/0
  2147 ;;		On exit  : 0/0
  2148 ;;		Unchanged: 0/0
  2149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2150 ;;      Params:         6       0       0       0       0       0       0       0       0
  2151 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2152 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2153 ;;      Totals:         8       0       0       0       0       0       0       0       0
  2154 ;;Total ram usage:        8 bytes
  2155 ;; Hardware stack levels used:    1
  2156 ;; Hardware stack levels required when called:    2
  2157 ;; This function calls:
  2158 ;;		Nothing
  2159 ;; This function is called by:
  2160 ;;		_main
  2161 ;;		_uart_send_string
  2162 ;;		_uart_read_buffer
  2163 ;; This function uses a non-reentrant model
  2164 ;;
  2165                           
  2166                           	psect	text7
  2167  002230                     __ptext7:
  2168                           	opt stack 0
  2169  002230                     _memset:
  2170                           	opt stack 27
  2171                           
  2172                           ;incstack = 0
  2173  002230  C014  F01A         	movff	memset@p1,memset@p
  2174  002234  C015  F01B         	movff	memset@p1+1,memset@p+1
  2175  002238  D008               	goto	l783
  2176  00223A                     l2497:
  2177  00223A  C01A  FFD9         	movff	memset@p,fsr2l
  2178  00223E  C01B  FFDA         	movff	memset@p+1,fsr2h
  2179  002242  C016  FFDF         	movff	memset@c,indf2
  2180  002246  4A1A               	infsnz	memset@p,f,c
  2181  002248  2A1B               	incf	memset@p+1,f,c
  2182  00224A                     l783:
  2183  00224A  0618               	decf	memset@n,f,c
  2184  00224C  A0D8               	btfss	status,0,c
  2185  00224E  0619               	decf	memset@n+1,f,c
  2186  002250  2818               	incf	memset@n,w,c
  2187  002252  E1F3               	bnz	l2497
  2188  002254  2819               	incf	memset@n+1,w,c
  2189  002256  B4D8               	btfsc	status,2,c
  2190  002258  0012               	return	
  2191  00225A  D7EF               	goto	l784
  2192  00225C                     __end_of_memset:
  2193                           	opt stack 0
  2194                           tblptru	equ	0xFF8
  2195                           tblptrh	equ	0xFF7
  2196                           tblptrl	equ	0xFF6
  2197                           tablat	equ	0xFF5
  2198                           intcon	equ	0xFF2
  2199                           intcon2	equ	0xFF1
  2200                           postinc0	equ	0xFEE
  2201                           wreg	equ	0xFE8
  2202                           indf1	equ	0xFE7
  2203                           plusw1	equ	0xFE3
  2204                           fsr1h	equ	0xFE2
  2205                           fsr1l	equ	0xFE1
  2206                           indf2	equ	0xFDF
  2207                           plusw2	equ	0xFDB
  2208                           fsr2h	equ	0xFDA
  2209                           fsr2l	equ	0xFD9
  2210                           status	equ	0xFD8
  2211                           
  2212 ;; *************** function _strtok *****************
  2213 ;; Defined at:
  2214 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strtok.c"
  2215 ;; Parameters:    Size  Location     Type
  2216 ;;  s1              2   30[COMRAM] PTR unsigned char 
  2217 ;;		 -> NULL(0), main@raw_command(100), 
  2218 ;;  s2              2   32[COMRAM] PTR const unsigned char 
  2219 ;;		 -> STR_5(3), STR_4(3), STR_3(3), 
  2220 ;; Auto vars:     Size  Location     Type
  2221 ;;		None
  2222 ;; Return value:  Size  Location     Type
  2223 ;;                  2   30[COMRAM] PTR unsigned char 
  2224 ;; Registers used:
  2225 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2226 ;; Tracked objects:
  2227 ;;		On entry : 0/0
  2228 ;;		On exit  : 0/0
  2229 ;;		Unchanged: 0/0
  2230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2231 ;;      Params:         4       0       0       0       0       0       0       0       0
  2232 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2233 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2234 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2235 ;;Total ram usage:        4 bytes
  2236 ;; Hardware stack levels used:    1
  2237 ;; Hardware stack levels required when called:    4
  2238 ;; This function calls:
  2239 ;;		_strcspn
  2240 ;;		_strspn
  2241 ;; This function is called by:
  2242 ;;		_main
  2243 ;; This function uses a non-reentrant model
  2244 ;;
  2245                           
  2246                           	psect	text8
  2247  0019C8                     __ptext8:
  2248                           	opt stack 0
  2249  0019C8                     _strtok:
  2250                           	opt stack 26
  2251                           
  2252                           ;incstack = 0
  2253  0019C8  501F               	movf	strtok@s1,w,c
  2254  0019CA  1020               	iorwf	strtok@s1+1,w,c
  2255  0019CC  A4D8               	btfss	status,2,c
  2256  0019CE  D004               	goto	l933
  2257  0019D0  C03E  F01F         	movff	strtok@sp,strtok@s1
  2258  0019D4  C03F  F020         	movff	strtok@sp+1,strtok@s1+1
  2259  0019D8                     l933:
  2260  0019D8  501F               	movf	strtok@s1,w,c
  2261  0019DA  1020               	iorwf	strtok@s1+1,w,c
  2262  0019DC  A4D8               	btfss	status,2,c
  2263  0019DE  D005               	goto	l934
  2264  0019E0  0E00               	movlw	0
  2265  0019E2  6E1F               	movwf	?_strtok,c
  2266  0019E4  0E00               	movlw	0
  2267  0019E6  6E20               	movwf	?_strtok+1,c
  2268  0019E8  0012               	return	
  2269  0019EA                     l934:
  2270  0019EA  C01F  F018         	movff	strtok@s1,strspn@s1
  2271  0019EE  C020  F019         	movff	strtok@s1+1,strspn@s1+1
  2272  0019F2  C021  F01A         	movff	strtok@s2,strspn@s2
  2273  0019F6  C022  F01B         	movff	strtok@s2+1,strspn@s2+1
  2274  0019FA  EC79  F00F         	call	_strspn	;wreg free
  2275  0019FE  5018               	movf	?_strspn,w,c
  2276  001A00  261F               	addwf	strtok@s1,f,c
  2277  001A02  5019               	movf	?_strspn+1,w,c
  2278  001A04  2220               	addwfc	strtok@s1+1,f,c
  2279  001A06  C01F  FFD9         	movff	strtok@s1,fsr2l
  2280  001A0A  C020  FFDA         	movff	strtok@s1+1,fsr2h
  2281  001A0E  50DF               	movf	indf2,w,c
  2282  001A10  A4D8               	btfss	status,2,c
  2283  001A12  D009               	goto	l936
  2284  001A14  0E00               	movlw	0
  2285  001A16  6E3E               	movwf	strtok@sp,c
  2286  001A18  0E00               	movlw	0
  2287  001A1A  6E3F               	movwf	strtok@sp+1,c
  2288  001A1C  C03E  F01F         	movff	strtok@sp,?_strtok
  2289  001A20  C03F  F020         	movff	strtok@sp+1,?_strtok+1
  2290  001A24  0012               	return	
  2291  001A26                     l936:
  2292  001A26  C01F  F018         	movff	strtok@s1,strcspn@s1
  2293  001A2A  C020  F019         	movff	strtok@s1+1,strcspn@s1+1
  2294  001A2E  C021  F01A         	movff	strtok@s2,strcspn@s2
  2295  001A32  C022  F01B         	movff	strtok@s2+1,strcspn@s2+1
  2296  001A36  ECA1  F00F         	call	_strcspn	;wreg free
  2297  001A3A  5018               	movf	?_strcspn,w,c
  2298  001A3C  241F               	addwf	strtok@s1,w,c
  2299  001A3E  6E3E               	movwf	strtok@sp,c
  2300  001A40  5019               	movf	?_strcspn+1,w,c
  2301  001A42  2020               	addwfc	strtok@s1+1,w,c
  2302  001A44  6E3F               	movwf	strtok@sp+1,c
  2303  001A46  C03E  FFD9         	movff	strtok@sp,fsr2l
  2304  001A4A  C03F  FFDA         	movff	strtok@sp+1,fsr2h
  2305  001A4E  50DF               	movf	indf2,w,c
  2306  001A50  B4D8               	btfsc	status,2,c
  2307  001A52  D009               	goto	l937
  2308  001A54  C03E  FFD9         	movff	strtok@sp,fsr2l
  2309  001A58  C03F  FFDA         	movff	strtok@sp+1,fsr2h
  2310  001A5C  0E00               	movlw	0
  2311  001A5E  6EDF               	movwf	indf2,c
  2312  001A60  4A3E               	infsnz	strtok@sp,f,c
  2313  001A62  2A3F               	incf	strtok@sp+1,f,c
  2314  001A64  D004               	goto	l938
  2315  001A66                     l937:
  2316  001A66  0E00               	movlw	0
  2317  001A68  6E3E               	movwf	strtok@sp,c
  2318  001A6A  0E00               	movlw	0
  2319  001A6C  6E3F               	movwf	strtok@sp+1,c
  2320  001A6E                     l938:
  2321  001A6E  C01F  F01F         	movff	strtok@s1,?_strtok
  2322  001A72  C020  F020         	movff	strtok@s1+1,?_strtok+1
  2323  001A76  0012               	return	
  2324  001A78                     __end_of_strtok:
  2325                           	opt stack 0
  2326                           tblptru	equ	0xFF8
  2327                           tblptrh	equ	0xFF7
  2328                           tblptrl	equ	0xFF6
  2329                           tablat	equ	0xFF5
  2330                           intcon	equ	0xFF2
  2331                           intcon2	equ	0xFF1
  2332                           postinc0	equ	0xFEE
  2333                           wreg	equ	0xFE8
  2334                           indf1	equ	0xFE7
  2335                           plusw1	equ	0xFE3
  2336                           fsr1h	equ	0xFE2
  2337                           fsr1l	equ	0xFE1
  2338                           indf2	equ	0xFDF
  2339                           plusw2	equ	0xFDB
  2340                           fsr2h	equ	0xFDA
  2341                           fsr2l	equ	0xFD9
  2342                           status	equ	0xFD8
  2343                           
  2344 ;; *************** function _strspn *****************
  2345 ;; Defined at:
  2346 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strspn.c"
  2347 ;; Parameters:    Size  Location     Type
  2348 ;;  s1              2   23[COMRAM] PTR const unsigned char 
  2349 ;;		 -> NULL(0), main@raw_command(100), 
  2350 ;;  s2              2   25[COMRAM] PTR const unsigned char 
  2351 ;;		 -> STR_5(3), STR_4(3), STR_3(3), 
  2352 ;; Auto vars:     Size  Location     Type
  2353 ;;  i               2   28[COMRAM] unsigned int 
  2354 ;; Return value:  Size  Location     Type
  2355 ;;                  2   23[COMRAM] unsigned int 
  2356 ;; Registers used:
  2357 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2358 ;; Tracked objects:
  2359 ;;		On entry : 0/0
  2360 ;;		On exit  : 0/0
  2361 ;;		Unchanged: 0/0
  2362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2363 ;;      Params:         4       0       0       0       0       0       0       0       0
  2364 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2365 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2366 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2367 ;;Total ram usage:        7 bytes
  2368 ;; Hardware stack levels used:    1
  2369 ;; Hardware stack levels required when called:    3
  2370 ;; This function calls:
  2371 ;;		_strchr
  2372 ;; This function is called by:
  2373 ;;		_strtok
  2374 ;; This function uses a non-reentrant model
  2375 ;;
  2376                           
  2377                           	psect	text9
  2378  001EF2                     __ptext9:
  2379                           	opt stack 0
  2380  001EF2                     _strspn:
  2381                           	opt stack 26
  2382                           
  2383                           ;incstack = 0
  2384  001EF2  0E00               	movlw	0
  2385  001EF4  6E1E               	movwf	strspn@i+1,c
  2386  001EF6  0E00               	movlw	0
  2387  001EF8  6E1D               	movwf	strspn@i,c
  2388  001EFA  D004               	goto	l972
  2389  001EFC  4A18               	infsnz	strspn@s1,f,c
  2390  001EFE  2A19               	incf	strspn@s1+1,f,c
  2391  001F00  4A1D               	infsnz	strspn@i,f,c
  2392  001F02  2A1E               	incf	strspn@i+1,f,c
  2393  001F04                     l972:
  2394  001F04  C018  FFD9         	movff	strspn@s1,fsr2l
  2395  001F08  C019  FFDA         	movff	strspn@s1+1,fsr2h
  2396  001F0C  50DF               	movf	indf2,w,c
  2397  001F0E  B4D8               	btfsc	status,2,c
  2398  001F10  D013               	goto	u2860
  2399  001F12  C01A  F014         	movff	strspn@s2,strchr@ptr
  2400  001F16  C01B  F015         	movff	strspn@s2+1,strchr@ptr+1
  2401  001F1A  C018  FFD9         	movff	strspn@s1,fsr2l
  2402  001F1E  C019  FFDA         	movff	strspn@s1+1,fsr2h
  2403  001F22  50DF               	movf	indf2,w,c
  2404  001F24  6E1C               	movwf	??_strspn& (0+255),c
  2405  001F26  501C               	movf	??_strspn,w,c
  2406  001F28  6E16               	movwf	strchr@chr,c
  2407  001F2A  6A17               	clrf	strchr@chr+1,c
  2408  001F2C  ECDE  F010         	call	_strchr	;wreg free
  2409  001F30  5014               	movf	?_strchr,w,c
  2410  001F32  1015               	iorwf	?_strchr+1,w,c
  2411  001F34  A4D8               	btfss	status,2,c
  2412  001F36  D7E2               	goto	l973
  2413  001F38                     u2860:
  2414  001F38  C01D  F018         	movff	strspn@i,?_strspn
  2415  001F3C  C01E  F019         	movff	strspn@i+1,?_strspn+1
  2416  001F40  0012               	return		;funcret
  2417  001F42                     __end_of_strspn:
  2418                           	opt stack 0
  2419                           tblptru	equ	0xFF8
  2420                           tblptrh	equ	0xFF7
  2421                           tblptrl	equ	0xFF6
  2422                           tablat	equ	0xFF5
  2423                           intcon	equ	0xFF2
  2424                           intcon2	equ	0xFF1
  2425                           postinc0	equ	0xFEE
  2426                           wreg	equ	0xFE8
  2427                           indf1	equ	0xFE7
  2428                           plusw1	equ	0xFE3
  2429                           fsr1h	equ	0xFE2
  2430                           fsr1l	equ	0xFE1
  2431                           indf2	equ	0xFDF
  2432                           plusw2	equ	0xFDB
  2433                           fsr2h	equ	0xFDA
  2434                           fsr2l	equ	0xFD9
  2435                           status	equ	0xFD8
  2436                           
  2437 ;; *************** function _strcspn *****************
  2438 ;; Defined at:
  2439 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcspn.c"
  2440 ;; Parameters:    Size  Location     Type
  2441 ;;  s1              2   23[COMRAM] PTR const unsigned char 
  2442 ;;		 -> NULL(0), main@raw_command(100), 
  2443 ;;  s2              2   25[COMRAM] PTR const unsigned char 
  2444 ;;		 -> STR_5(3), STR_4(3), STR_3(3), 
  2445 ;; Auto vars:     Size  Location     Type
  2446 ;;  i               2   28[COMRAM] unsigned int 
  2447 ;; Return value:  Size  Location     Type
  2448 ;;                  2   23[COMRAM] unsigned int 
  2449 ;; Registers used:
  2450 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2451 ;; Tracked objects:
  2452 ;;		On entry : 0/0
  2453 ;;		On exit  : 0/0
  2454 ;;		Unchanged: 0/0
  2455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2456 ;;      Params:         4       0       0       0       0       0       0       0       0
  2457 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2458 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2459 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2460 ;;Total ram usage:        7 bytes
  2461 ;; Hardware stack levels used:    1
  2462 ;; Hardware stack levels required when called:    3
  2463 ;; This function calls:
  2464 ;;		_strchr
  2465 ;; This function is called by:
  2466 ;;		_strtok
  2467 ;; This function uses a non-reentrant model
  2468 ;;
  2469                           
  2470                           	psect	text10
  2471  001F42                     __ptext10:
  2472                           	opt stack 0
  2473  001F42                     _strcspn:
  2474                           	opt stack 26
  2475                           
  2476                           ;incstack = 0
  2477  001F42  0E00               	movlw	0
  2478  001F44  6E1E               	movwf	strcspn@i+1,c
  2479  001F46  0E00               	movlw	0
  2480  001F48  6E1D               	movwf	strcspn@i,c
  2481  001F4A  D004               	goto	l962
  2482  001F4C  4A18               	infsnz	strcspn@s1,f,c
  2483  001F4E  2A19               	incf	strcspn@s1+1,f,c
  2484  001F50  4A1D               	infsnz	strcspn@i,f,c
  2485  001F52  2A1E               	incf	strcspn@i+1,f,c
  2486  001F54                     l962:
  2487  001F54  C018  FFD9         	movff	strcspn@s1,fsr2l
  2488  001F58  C019  FFDA         	movff	strcspn@s1+1,fsr2h
  2489  001F5C  50DF               	movf	indf2,w,c
  2490  001F5E  B4D8               	btfsc	status,2,c
  2491  001F60  D013               	goto	u2880
  2492  001F62  C01A  F014         	movff	strcspn@s2,strchr@ptr
  2493  001F66  C01B  F015         	movff	strcspn@s2+1,strchr@ptr+1
  2494  001F6A  C018  FFD9         	movff	strcspn@s1,fsr2l
  2495  001F6E  C019  FFDA         	movff	strcspn@s1+1,fsr2h
  2496  001F72  50DF               	movf	indf2,w,c
  2497  001F74  6E1C               	movwf	??_strcspn& (0+255),c
  2498  001F76  501C               	movf	??_strcspn,w,c
  2499  001F78  6E16               	movwf	strchr@chr,c
  2500  001F7A  6A17               	clrf	strchr@chr+1,c
  2501  001F7C  ECDE  F010         	call	_strchr	;wreg free
  2502  001F80  5014               	movf	?_strchr,w,c
  2503  001F82  1015               	iorwf	?_strchr+1,w,c
  2504  001F84  B4D8               	btfsc	status,2,c
  2505  001F86  D7E2               	goto	l963
  2506  001F88                     u2880:
  2507  001F88  C01D  F018         	movff	strcspn@i,?_strcspn
  2508  001F8C  C01E  F019         	movff	strcspn@i+1,?_strcspn+1
  2509  001F90  0012               	return		;funcret
  2510  001F92                     __end_of_strcspn:
  2511                           	opt stack 0
  2512                           tblptru	equ	0xFF8
  2513                           tblptrh	equ	0xFF7
  2514                           tblptrl	equ	0xFF6
  2515                           tablat	equ	0xFF5
  2516                           intcon	equ	0xFF2
  2517                           intcon2	equ	0xFF1
  2518                           postinc0	equ	0xFEE
  2519                           wreg	equ	0xFE8
  2520                           indf1	equ	0xFE7
  2521                           plusw1	equ	0xFE3
  2522                           fsr1h	equ	0xFE2
  2523                           fsr1l	equ	0xFE1
  2524                           indf2	equ	0xFDF
  2525                           plusw2	equ	0xFDB
  2526                           fsr2h	equ	0xFDA
  2527                           fsr2l	equ	0xFD9
  2528                           status	equ	0xFD8
  2529                           
  2530 ;; *************** function _strchr *****************
  2531 ;; Defined at:
  2532 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strchr.c"
  2533 ;; Parameters:    Size  Location     Type
  2534 ;;  ptr             2   19[COMRAM] PTR const unsigned char 
  2535 ;;		 -> STR_5(3), STR_4(3), STR_3(3), 
  2536 ;;  chr             2   21[COMRAM] int 
  2537 ;; Auto vars:     Size  Location     Type
  2538 ;;		None
  2539 ;; Return value:  Size  Location     Type
  2540 ;;                  2   19[COMRAM] PTR unsigned char 
  2541 ;; Registers used:
  2542 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  2543 ;; Tracked objects:
  2544 ;;		On entry : 0/0
  2545 ;;		On exit  : 0/0
  2546 ;;		Unchanged: 0/0
  2547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2548 ;;      Params:         4       0       0       0       0       0       0       0       0
  2549 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2550 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2551 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2552 ;;Total ram usage:        4 bytes
  2553 ;; Hardware stack levels used:    1
  2554 ;; Hardware stack levels required when called:    2
  2555 ;; This function calls:
  2556 ;;		Nothing
  2557 ;; This function is called by:
  2558 ;;		_strcspn
  2559 ;;		_strspn
  2560 ;; This function uses a non-reentrant model
  2561 ;;
  2562                           
  2563                           	psect	text11
  2564  0021BC                     __ptext11:
  2565                           	opt stack 0
  2566  0021BC                     _strchr:
  2567                           	opt stack 26
  2568                           
  2569                           ;incstack = 0
  2570  0021BC  C014  FFF6         	movff	strchr@ptr,tblptrl
  2571  0021C0  C015  FFF7         	movff	strchr@ptr+1,tblptrh
  2572  0021C4                     	if	0	;tblptru may be non-zero
  2573  0021C4                     	endif
  2574  0021C4                     	if	0	;tblptru may be non-zero
  2575  0021C4                     	endif
  2576  0021C4  0008               	tblrd		*
  2577  0021C6  50F5               	movf	tablat,w,c
  2578  0021C8  1816               	xorwf	strchr@chr,w,c
  2579  0021CA  A4D8               	btfss	status,2,c
  2580  0021CC  D005               	goto	l981
  2581  0021CE  C014  F014         	movff	strchr@ptr,?_strchr
  2582  0021D2  C015  F015         	movff	strchr@ptr+1,?_strchr+1
  2583  0021D6  0012               	return	
  2584  0021D8                     l981:
  2585  0021D8  C014  FFF6         	movff	strchr@ptr,tblptrl
  2586  0021DC  C015  FFF7         	movff	strchr@ptr+1,tblptrh
  2587  0021E0  4A14               	infsnz	strchr@ptr,f,c
  2588  0021E2  2A15               	incf	strchr@ptr+1,f,c
  2589  0021E4                     	if	0	;tblptru may be non-zero
  2590  0021E4                     	endif
  2591  0021E4                     	if	0	;tblptru may be non-zero
  2592  0021E4                     	endif
  2593  0021E4  0008               	tblrd		*
  2594  0021E6  50F5               	movf	tablat,w,c
  2595  0021E8  0900               	iorlw	0
  2596  0021EA  A4D8               	btfss	status,2,c
  2597  0021EC  D7E7               	goto	_strchr
  2598  0021EE  0E00               	movlw	0
  2599  0021F0  6E14               	movwf	?_strchr,c
  2600  0021F2  0E00               	movlw	0
  2601  0021F4  6E15               	movwf	?_strchr+1,c
  2602  0021F6  0012               	return	
  2603  0021F8                     __end_of_strchr:
  2604                           	opt stack 0
  2605                           tblptru	equ	0xFF8
  2606                           tblptrh	equ	0xFF7
  2607                           tblptrl	equ	0xFF6
  2608                           tablat	equ	0xFF5
  2609                           intcon	equ	0xFF2
  2610                           intcon2	equ	0xFF1
  2611                           postinc0	equ	0xFEE
  2612                           wreg	equ	0xFE8
  2613                           indf1	equ	0xFE7
  2614                           plusw1	equ	0xFE3
  2615                           fsr1h	equ	0xFE2
  2616                           fsr1l	equ	0xFE1
  2617                           indf2	equ	0xFDF
  2618                           plusw2	equ	0xFDB
  2619                           fsr2h	equ	0xFDA
  2620                           fsr2l	equ	0xFD9
  2621                           status	equ	0xFD8
  2622                           
  2623 ;; *************** function _strcmp *****************
  2624 ;; Defined at:
  2625 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcmp.c"
  2626 ;; Parameters:    Size  Location     Type
  2627 ;;  s1              2   19[COMRAM] PTR const unsigned char 
  2628 ;;		 -> NULL(0), main@raw_command(100), 
  2629 ;;  s2              2   21[COMRAM] PTR const unsigned char 
  2630 ;;		 -> STR_21(2), STR_20(6), STR_18(4), STR_16(2), 
  2631 ;;		 -> STR_14(2), STR_13(4), STR_11(2), STR_9(2), 
  2632 ;;		 -> STR_8(3), STR_6(4), 
  2633 ;; Auto vars:     Size  Location     Type
  2634 ;;  r               1   24[COMRAM] char 
  2635 ;; Return value:  Size  Location     Type
  2636 ;;                  2   19[COMRAM] int 
  2637 ;; Registers used:
  2638 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  2639 ;; Tracked objects:
  2640 ;;		On entry : 0/0
  2641 ;;		On exit  : 0/0
  2642 ;;		Unchanged: 0/0
  2643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2644 ;;      Params:         4       0       0       0       0       0       0       0       0
  2645 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2646 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2647 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2648 ;;Total ram usage:        6 bytes
  2649 ;; Hardware stack levels used:    1
  2650 ;; Hardware stack levels required when called:    2
  2651 ;; This function calls:
  2652 ;;		Nothing
  2653 ;; This function is called by:
  2654 ;;		_main
  2655 ;; This function uses a non-reentrant model
  2656 ;;
  2657                           
  2658                           	psect	text12
  2659  002026                     __ptext12:
  2660                           	opt stack 0
  2661  002026                     _strcmp:
  2662                           	opt stack 28
  2663                           
  2664                           ;incstack = 0
  2665  002026  D004               	goto	l913
  2666  002028  4A14               	infsnz	strcmp@s1,f,c
  2667  00202A  2A15               	incf	strcmp@s1+1,f,c
  2668  00202C  4A16               	infsnz	strcmp@s2,f,c
  2669  00202E  2A17               	incf	strcmp@s2+1,f,c
  2670  002030                     l913:
  2671  002030  C014  FFD9         	movff	strcmp@s1,fsr2l
  2672  002034  C015  FFDA         	movff	strcmp@s1+1,fsr2h
  2673  002038  50DF               	movf	indf2,w,c
  2674  00203A  6E18               	movwf	??_strcmp& (0+255),c
  2675  00203C  C016  FFF6         	movff	strcmp@s2,tblptrl
  2676  002040  C017  FFF7         	movff	strcmp@s2+1,tblptrh
  2677  002044                     	if	0	;tblptru may be non-zero
  2678  002044                     	endif
  2679  002044                     	if	0	;tblptru may be non-zero
  2680  002044                     	endif
  2681  002044  0008               	tblrd		*
  2682  002046  50F5               	movf	tablat,w,c
  2683  002048  0800               	sublw	0
  2684  00204A  2418               	addwf	??_strcmp,w,c
  2685  00204C  6E19               	movwf	strcmp@r,c
  2686  00204E  5019               	movf	strcmp@r,w,c
  2687  002050  A4D8               	btfss	status,2,c
  2688  002052  D007               	goto	u3030
  2689  002054  C014  FFD9         	movff	strcmp@s1,fsr2l
  2690  002058  C015  FFDA         	movff	strcmp@s1+1,fsr2h
  2691  00205C  50DF               	movf	indf2,w,c
  2692  00205E  A4D8               	btfss	status,2,c
  2693  002060  D7E3               	goto	l914
  2694  002062                     u3030:
  2695  002062  5019               	movf	strcmp@r,w,c
  2696  002064  6E14               	movwf	?_strcmp,c
  2697  002066  6A15               	clrf	?_strcmp+1,c
  2698  002068  BE14               	btfsc	?_strcmp,7,c
  2699  00206A  0615               	decf	?_strcmp+1,f,c
  2700  00206C  0012               	return	
  2701  00206E                     __end_of_strcmp:
  2702                           	opt stack 0
  2703                           tblptru	equ	0xFF8
  2704                           tblptrh	equ	0xFF7
  2705                           tblptrl	equ	0xFF6
  2706                           tablat	equ	0xFF5
  2707                           intcon	equ	0xFF2
  2708                           intcon2	equ	0xFF1
  2709                           postinc0	equ	0xFEE
  2710                           wreg	equ	0xFE8
  2711                           indf1	equ	0xFE7
  2712                           plusw1	equ	0xFE3
  2713                           fsr1h	equ	0xFE2
  2714                           fsr1l	equ	0xFE1
  2715                           indf2	equ	0xFDF
  2716                           plusw2	equ	0xFDB
  2717                           fsr2h	equ	0xFDA
  2718                           fsr2l	equ	0xFD9
  2719                           status	equ	0xFD8
  2720                           
  2721 ;; *************** function _sprintf *****************
  2722 ;; Defined at:
  2723 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  2724 ;; Parameters:    Size  Location     Type
  2725 ;;  sp              2   22[BANK0 ] PTR unsigned char 
  2726 ;;		 -> main@send_current(6), 
  2727 ;;  f               2   24[BANK0 ] PTR const unsigned char 
  2728 ;;		 -> STR_22(9), 
  2729 ;; Auto vars:     Size  Location     Type
  2730 ;;  tmpval          4   44[BANK0 ] struct .
  2731 ;;  val             4   40[BANK0 ] unsigned long 
  2732 ;;  fval            3   54[BANK0 ] unsigned long 
  2733 ;;  cp              3    0        PTR const unsigned char 
  2734 ;;  prec            2   57[BANK0 ] int 
  2735 ;;  width           2   52[BANK0 ] int 
  2736 ;;  flag            2   50[BANK0 ] unsigned short 
  2737 ;;  exp             2   48[BANK0 ] int 
  2738 ;;  ap              2   38[BANK0 ] PTR void [1]
  2739 ;;		 -> ?_sprintf(2), 
  2740 ;;  len             2    0        unsigned int 
  2741 ;;  c               1   59[BANK0 ] char 
  2742 ;;  d               1    0        unsigned char 
  2743 ;; Return value:  Size  Location     Type
  2744 ;;                  2   22[BANK0 ] int 
  2745 ;; Registers used:
  2746 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2747 ;; Tracked objects:
  2748 ;;		On entry : 0/0
  2749 ;;		On exit  : 0/0
  2750 ;;		Unchanged: 0/0
  2751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2752 ;;      Params:         0       7       0       0       0       0       0       0       0
  2753 ;;      Locals:         0      25       0       0       0       0       0       0       0
  2754 ;;      Temps:          0       6       0       0       0       0       0       0       0
  2755 ;;      Totals:         0      38       0       0       0       0       0       0       0
  2756 ;;Total ram usage:       38 bytes
  2757 ;; Hardware stack levels used:    1
  2758 ;; Hardware stack levels required when called:    5
  2759 ;; This function calls:
  2760 ;;		___awdiv
  2761 ;;		___ftadd
  2762 ;;		___ftge
  2763 ;;		___ftmul
  2764 ;;		___ftneg
  2765 ;;		___ftsub
  2766 ;;		___fttol
  2767 ;;		___lldiv
  2768 ;;		___llmod
  2769 ;;		___lltoft
  2770 ;;		___wmul
  2771 ;;		__div_to_l_
  2772 ;;		__tdiv_to_l_
  2773 ;;		_fround
  2774 ;;		_isdigit
  2775 ;;		_scale
  2776 ;; This function is called by:
  2777 ;;		_main
  2778 ;; This function uses a non-reentrant model
  2779 ;;
  2780                           
  2781                           	psect	text13
  2782  000012                     __ptext13:
  2783                           	opt stack 0
  2784  000012                     _sprintf:
  2785                           	opt stack 25
  2786                           
  2787                           ;doprnt.c: 494: va_list ap;
  2788                           ;doprnt.c: 499: signed char c;
  2789                           ;doprnt.c: 501: int width;
  2790                           ;doprnt.c: 504: int prec;
  2791                           ;doprnt.c: 508: unsigned short flag;
  2792                           ;doprnt.c: 515: char d;
  2793                           ;doprnt.c: 516: double fval;
  2794                           ;doprnt.c: 517: int exp;
  2795                           ;doprnt.c: 523: union {
  2796                           ;doprnt.c: 524: unsigned long vd;
  2797                           ;doprnt.c: 525: double integ;
  2798                           ;doprnt.c: 526: } tmpval;
  2799                           ;doprnt.c: 528: unsigned long val;
  2800                           ;doprnt.c: 529: unsigned len;
  2801                           ;doprnt.c: 530: const char * cp;
  2802                           ;doprnt.c: 533: *ap = __va_start();
  2803                           
  2804                           ;incstack = 0
  2805  000012  0EDE               	movlw	low (?_sprintf+4)
  2806  000014  0100               	movlb	0	; () banked
  2807  000016  6FEA               	movwf	sprintf@ap& (0+255),b
  2808  000018  0E00               	movlw	high (?_sprintf+4)
  2809  00001A  6FEB               	movwf	(sprintf@ap+1)& (0+255),b
  2810                           
  2811                           ;doprnt.c: 536: while(c = *f++) {
  2812  00001C  EF9E  F004         	goto	l299
  2813  000020                     
  2814                           ; BSR set to: 0
  2815                           ;doprnt.c: 538: if(c != '%')
  2816                           
  2817                           ; BSR set to: 0
  2818  000020  0E25               	movlw	37
  2819  000022  19FF               	xorwf	sprintf@c& (0+255),w,b
  2820  000024  B4D8               	btfsc	status,2,c
  2821  000026  D008               	goto	l210
  2822                           
  2823                           ; BSR set to: 0
  2824                           ;doprnt.c: 540: {
  2825                           ;doprnt.c: 541: ((*sp++ = (c)));
  2826  000028  C0DA  FFD9         	movff	sprintf@sp,fsr2l
  2827  00002C  C0DB  FFDA         	movff	sprintf@sp+1,fsr2h
  2828  000030  C0FF  FFDF         	movff	sprintf@c,indf2
  2829  000034  EF9C  F004         	goto	l4113
  2830  000038                     l210:
  2831                           
  2832                           ; BSR set to: 0
  2833                           ;doprnt.c: 543: }
  2834                           ;doprnt.c: 546: width = 0;
  2835                           
  2836                           ; BSR set to: 0
  2837  000038  0E00               	movlw	0
  2838  00003A  6FF9               	movwf	(sprintf@width+1)& (0+255),b
  2839  00003C  0E00               	movlw	0
  2840  00003E  6FF8               	movwf	sprintf@width& (0+255),b
  2841                           
  2842                           ;doprnt.c: 548: flag = 0;
  2843  000040  0E00               	movlw	0
  2844  000042  6FF7               	movwf	(sprintf@flag+1)& (0+255),b
  2845  000044  0E00               	movlw	0
  2846  000046  6FF6               	movwf	sprintf@flag& (0+255),b
  2847                           
  2848                           ; BSR set to: 0
  2849                           ;doprnt.c: 551: switch(*f) {
  2850                           
  2851                           ;doprnt.c: 550: for(;;) {
  2852  000048  D004               	goto	l212
  2853  00004A                     
  2854                           ;doprnt.c: 580: flag |= 0x04;
  2855                           
  2856                           ; BSR set to: 0
  2857  00004A  0100               	movlb	0	; () banked
  2858  00004C  85F6               	bsf	sprintf@flag& (0+255),2,b
  2859                           
  2860                           ;doprnt.c: 581: f++;
  2861  00004E  4BDC               	infsnz	sprintf@f& (0+255),f,b
  2862  000050  2BDD               	incf	(sprintf@f+1)& (0+255),f,b
  2863  000052                     l212:
  2864                           
  2865                           ; BSR set to: 0
  2866  000052  C0DC  FFF6         	movff	sprintf@f,tblptrl
  2867  000056  C0DD  FFF7         	movff	sprintf@f+1,tblptrh
  2868  00005A                     	if	0	;tblptru may be non-zero
  2869  00005A                     	endif
  2870  00005A                     	if	0	;tblptru may be non-zero
  2871  00005A                     	endif
  2872  00005A  0008               	tblrd		*
  2873  00005C  50F5               	movf	tablat,w,c
  2874                           
  2875                           ; Switch size 1, requested type "space"
  2876                           ; Number of cases is 1, Range of values is 48 to 48
  2877                           ; switch strategies available:
  2878                           ; Name         Instructions Cycles
  2879                           ; simple_byte            4     3 (average)
  2880                           ;	Chosen strategy is simple_byte
  2881  00005E  0A30               	xorlw	48	; case 48
  2882  000060  B4D8               	btfsc	status,2,c
  2883  000062  D7F3               	goto	l213
  2884                           
  2885                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2886                           
  2887                           ;doprnt.c: 586: }
  2888                           
  2889                           ;doprnt.c: 585: break;
  2890  000064  C0DC  FFF6         	movff	sprintf@f,tblptrl
  2891  000068  C0DD  FFF7         	movff	sprintf@f+1,tblptrh
  2892  00006C                     	if	0	;tblptru may be non-zero
  2893  00006C                     	endif
  2894  00006C                     	if	0	;tblptru may be non-zero
  2895  00006C                     	endif
  2896  00006C  0008               	tblrd		*
  2897  00006E  50F5               	movf	tablat,w,c
  2898  000070  EC53  F011         	call	_isdigit
  2899  000074  A0D8               	btfss	status,0,c
  2900  000076  D034               	goto	u4470
  2901                           
  2902                           ;doprnt.c: 598: width = 0;
  2903  000078  0E00               	movlw	0
  2904  00007A  0100               	movlb	0	; () banked
  2905  00007C  6FF9               	movwf	(sprintf@width+1)& (0+255),b
  2906  00007E  0E00               	movlw	0
  2907  000080  6FF8               	movwf	sprintf@width& (0+255),b
  2908  000082                     
  2909                           ;doprnt.c: 600: width *= 10;
  2910                           
  2911                           ; BSR set to: 0
  2912  000082  C0F8  F022         	movff	sprintf@width,___wmul@multiplier
  2913  000086  C0F9  F023         	movff	sprintf@width+1,___wmul@multiplier+1
  2914  00008A  0E00               	movlw	0
  2915  00008C  6E25               	movwf	___wmul@multiplicand+1,c
  2916  00008E  0E0A               	movlw	10
  2917  000090  6E24               	movwf	___wmul@multiplicand,c
  2918  000092  EC2E  F011         	call	___wmul	;wreg free
  2919  000096  C022  F0F8         	movff	?___wmul,sprintf@width
  2920  00009A  C023  F0F9         	movff	?___wmul+1,sprintf@width+1
  2921                           
  2922                           ;doprnt.c: 601: width += *f++ - '0';
  2923  00009E  0ED0               	movlw	208
  2924  0000A0  0100               	movlb	0	; () banked
  2925  0000A2  6FE1               	movwf	??_sprintf& (0+255),b
  2926  0000A4  0EFF               	movlw	255
  2927  0000A6  6FE2               	movwf	(??_sprintf+1)& (0+255),b
  2928  0000A8  C0DC  FFF6         	movff	sprintf@f,tblptrl
  2929  0000AC  C0DD  FFF7         	movff	sprintf@f+1,tblptrh
  2930  0000B0                     	if	0	;tblptru may be non-zero
  2931  0000B0                     	endif
  2932  0000B0                     	if	0	;tblptru may be non-zero
  2933  0000B0                     	endif
  2934  0000B0  0008               	tblrd		*
  2935  0000B2  50F5               	movf	tablat,w,c
  2936  0000B4  6FE3               	movwf	(??_sprintf+2)& (0+255),b
  2937  0000B6  6BE4               	clrf	(??_sprintf+3)& (0+255),b
  2938  0000B8  51E1               	movf	??_sprintf& (0+255),w,b
  2939  0000BA  27E3               	addwf	(??_sprintf+2)& (0+255),f,b
  2940  0000BC  51E2               	movf	(??_sprintf+1)& (0+255),w,b
  2941  0000BE  23E4               	addwfc	(??_sprintf+3)& (0+255),f,b
  2942  0000C0  51E3               	movf	(??_sprintf+2)& (0+255),w,b
  2943  0000C2  27F8               	addwf	sprintf@width& (0+255),f,b
  2944  0000C4  51E4               	movf	(??_sprintf+3)& (0+255),w,b
  2945  0000C6  23F9               	addwfc	(sprintf@width+1)& (0+255),f,b
  2946                           
  2947                           ; BSR set to: 0
  2948  0000C8  4BDC               	infsnz	sprintf@f& (0+255),f,b
  2949  0000CA  2BDD               	incf	(sprintf@f+1)& (0+255),f,b
  2950                           
  2951                           ; BSR set to: 0
  2952                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2953  0000CC  C0DC  FFF6         	movff	sprintf@f,tblptrl
  2954  0000D0  C0DD  FFF7         	movff	sprintf@f+1,tblptrh
  2955  0000D4                     	if	0	;tblptru may be non-zero
  2956  0000D4                     	endif
  2957  0000D4                     	if	0	;tblptru may be non-zero
  2958  0000D4                     	endif
  2959  0000D4  0008               	tblrd		*
  2960  0000D6  50F5               	movf	tablat,w,c
  2961  0000D8  EC53  F011         	call	_isdigit
  2962  0000DC  B0D8               	btfsc	status,0,c
  2963  0000DE  D7D1               	goto	l218
  2964  0000E0                     u4470:
  2965                           
  2966                           ;doprnt.c: 608: }
  2967                           ;doprnt.c: 611: if(*f == '.') {
  2968  0000E0  C0DC  FFF6         	movff	sprintf@f,tblptrl
  2969  0000E4  C0DD  FFF7         	movff	sprintf@f+1,tblptrh
  2970  0000E8                     	if	0	;tblptru may be non-zero
  2971  0000E8                     	endif
  2972  0000E8                     	if	0	;tblptru may be non-zero
  2973  0000E8                     	endif
  2974  0000E8  0008               	tblrd		*
  2975  0000EA  50F5               	movf	tablat,w,c
  2976  0000EC  0A2E               	xorlw	46
  2977  0000EE  A4D8               	btfss	status,2,c
  2978  0000F0  D030               	goto	l220
  2979                           
  2980                           ;doprnt.c: 612: flag |= 0x4000;
  2981  0000F2  0100               	movlb	0	; () banked
  2982  0000F4  8DF7               	bsf	(sprintf@flag+1)& (0+255),6,b
  2983                           
  2984                           ;doprnt.c: 613: f++;
  2985  0000F6  4BDC               	infsnz	sprintf@f& (0+255),f,b
  2986  0000F8  2BDD               	incf	(sprintf@f+1)& (0+255),f,b
  2987                           
  2988                           ; BSR set to: 0
  2989                           ;doprnt.c: 620: {
  2990                           ;doprnt.c: 621: prec = 0;
  2991  0000FA  0E00               	movlw	0
  2992  0000FC  6FFE               	movwf	(sprintf@prec+1)& (0+255),b
  2993  0000FE  0E00               	movlw	0
  2994  000100  6FFD               	movwf	sprintf@prec& (0+255),b
  2995                           
  2996                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  2997  000102  D01C               	goto	l221
  2998  000104                     
  2999                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  3000                           
  3001                           ; BSR set to: 0
  3002  000104  C0FD  F022         	movff	sprintf@prec,___wmul@multiplier
  3003  000108  C0FE  F023         	movff	sprintf@prec+1,___wmul@multiplier+1
  3004  00010C  0E00               	movlw	0
  3005  00010E  6E25               	movwf	___wmul@multiplicand+1,c
  3006  000110  0E0A               	movlw	10
  3007  000112  6E24               	movwf	___wmul@multiplicand,c
  3008  000114  EC2E  F011         	call	___wmul	;wreg free
  3009  000118  C0DC  FFF6         	movff	sprintf@f,tblptrl
  3010  00011C  C0DD  FFF7         	movff	sprintf@f+1,tblptrh
  3011  000120                     	if	0	;tblptru may be non-zero
  3012  000120                     	endif
  3013  000120                     	if	0	;tblptru may be non-zero
  3014  000120                     	endif
  3015  000120  0008               	tblrd		*
  3016  000122  50F5               	movf	tablat,w,c
  3017  000124  2622               	addwf	?___wmul,f,c
  3018  000126  0E00               	movlw	0
  3019  000128  2223               	addwfc	?___wmul+1,f,c
  3020  00012A  0ED0               	movlw	208
  3021  00012C  2422               	addwf	?___wmul,w,c
  3022  00012E  0100               	movlb	0	; () banked
  3023  000130  6FFD               	movwf	sprintf@prec& (0+255),b
  3024  000132  0EFF               	movlw	255
  3025  000134  2023               	addwfc	?___wmul+1,w,c
  3026  000136  6FFE               	movwf	(sprintf@prec+1)& (0+255),b
  3027                           
  3028                           ; BSR set to: 0
  3029  000138  4BDC               	infsnz	sprintf@f& (0+255),f,b
  3030  00013A  2BDD               	incf	(sprintf@f+1)& (0+255),f,b
  3031  00013C                     l221:
  3032                           
  3033                           ; BSR set to: 0
  3034                           
  3035                           ; BSR set to: 0
  3036  00013C  C0DC  FFF6         	movff	sprintf@f,tblptrl
  3037  000140  C0DD  FFF7         	movff	sprintf@f+1,tblptrh
  3038  000144                     	if	0	;tblptru may be non-zero
  3039  000144                     	endif
  3040  000144                     	if	0	;tblptru may be non-zero
  3041  000144                     	endif
  3042  000144  0008               	tblrd		*
  3043  000146  50F5               	movf	tablat,w,c
  3044  000148  EC53  F011         	call	_isdigit
  3045  00014C  A0D8               	btfss	status,0,c
  3046  00014E  D00A               	goto	l225
  3047  000150  D7D9               	goto	l222
  3048  000152                     l220:
  3049                           
  3050                           ;doprnt.c: 626: prec = 0;
  3051  000152  0E00               	movlw	0
  3052  000154  0100               	movlb	0	; () banked
  3053  000156  6FFE               	movwf	(sprintf@prec+1)& (0+255),b
  3054  000158  0E00               	movlw	0
  3055  00015A  6FFD               	movwf	sprintf@prec& (0+255),b
  3056                           
  3057                           ; BSR set to: 0
  3058                           ;doprnt.c: 628: flag |= 0x1000;
  3059  00015C  89F7               	bsf	(sprintf@flag+1)& (0+255),4,b
  3060                           
  3061                           ; BSR set to: 0
  3062                           ;doprnt.c: 630: }
  3063                           ;doprnt.c: 635: switch(c = *f++) {
  3064  00015E  D002               	goto	l225
  3065  000160                     
  3066                           ; BSR set to: 0
  3067                           ;doprnt.c: 663: flag |= 0x400;
  3068                           
  3069                           ; BSR set to: 0
  3070  000160  85F7               	bsf	(sprintf@flag+1)& (0+255),2,b
  3071                           
  3072                           ;doprnt.c: 664: break;
  3073  000162  D012               	goto	l229
  3074  000164                     l225:
  3075                           
  3076                           ; BSR set to: 0
  3077  000164  C0DC  FFF6         	movff	sprintf@f,tblptrl
  3078  000168  C0DD  FFF7         	movff	sprintf@f+1,tblptrh
  3079  00016C  0100               	movlb	0	; () banked
  3080  00016E  4BDC               	infsnz	sprintf@f& (0+255),f,b
  3081  000170  2BDD               	incf	(sprintf@f+1)& (0+255),f,b
  3082  000172                     	if	0	;tblptru may be non-zero
  3083  000172                     	endif
  3084  000172                     	if	0	;tblptru may be non-zero
  3085  000172                     	endif
  3086  000172  0008               	tblrd		*
  3087  000174  CFF5 F0FF          	movff	tablat,sprintf@c
  3088  000178  51FF               	movf	sprintf@c& (0+255),w,b
  3089                           
  3090                           ; Switch size 1, requested type "space"
  3091                           ; Number of cases is 2, Range of values is 0 to 102
  3092                           ; switch strategies available:
  3093                           ; Name         Instructions Cycles
  3094                           ; simple_byte            7     4 (average)
  3095                           ;	Chosen strategy is simple_byte
  3096  00017A  0A00               	xorlw	0	; case 0
  3097  00017C  B4D8               	btfsc	status,2,c
  3098  00017E  D3EB               	goto	u4960
  3099  000180  0A66               	xorlw	102	; case 102
  3100  000182  B4D8               	btfsc	status,2,c
  3101  000184  D7ED               	goto	l228
  3102  000186  D3DA               	goto	l299
  3103  000188                     l229:
  3104                           
  3105                           ; BSR set to: 0
  3106                           ;doprnt.c: 825: if(flag & (0x700)) {
  3107                           
  3108                           ; BSR set to: 0
  3109  000188  0E07               	movlw	7
  3110  00018A  15F7               	andwf	(sprintf@flag+1)& (0+255),w,b
  3111  00018C  B4D8               	btfsc	status,2,c
  3112  00018E  D327               	goto	l231
  3113                           
  3114                           ; BSR set to: 0
  3115                           ;doprnt.c: 827: if(flag & 0x1000)
  3116  000190  A9F7               	btfss	(sprintf@flag+1)& (0+255),4,b
  3117  000192  D004               	goto	l232
  3118                           
  3119                           ; BSR set to: 0
  3120                           ;doprnt.c: 829: prec = 6;
  3121  000194  0E00               	movlw	0
  3122  000196  6FFE               	movwf	(sprintf@prec+1)& (0+255),b
  3123  000198  0E06               	movlw	6
  3124  00019A  6FFD               	movwf	sprintf@prec& (0+255),b
  3125  00019C                     l232:
  3126                           
  3127                           ; BSR set to: 0
  3128                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  3129                           
  3130                           ; BSR set to: 0
  3131  00019C  C0EA  FFD9         	movff	sprintf@ap,fsr2l
  3132  0001A0  C0EB  FFDA         	movff	sprintf@ap+1,fsr2h
  3133  0001A4  CFDE F0FA          	movff	postinc2,sprintf@fval
  3134  0001A8  CFDE F0FB          	movff	postinc2,sprintf@fval+1
  3135  0001AC  CFDD F0FC          	movff	postdec2,sprintf@fval+2
  3136                           
  3137                           ; BSR set to: 0
  3138  0001B0  0E03               	movlw	3
  3139  0001B2  27EA               	addwf	sprintf@ap& (0+255),f,b
  3140  0001B4  0E00               	movlw	0
  3141  0001B6  23EB               	addwfc	(sprintf@ap+1)& (0+255),f,b
  3142                           
  3143                           ; BSR set to: 0
  3144                           ;doprnt.c: 831: if(fval < 0.0) {
  3145  0001B8  AFFC               	btfss	(sprintf@fval+2)& (0+255),7,b
  3146  0001BA  D011               	goto	l233
  3147                           
  3148                           ; BSR set to: 0
  3149                           ;doprnt.c: 832: fval = -fval;
  3150  0001BC  C0FA  F014         	movff	sprintf@fval,___ftneg@f1
  3151  0001C0  C0FB  F015         	movff	sprintf@fval+1,___ftneg@f1+1
  3152  0001C4  C0FC  F016         	movff	sprintf@fval+2,___ftneg@f1+2
  3153  0001C8  EC41  F011         	call	___ftneg	;wreg free
  3154  0001CC  C014  F0FA         	movff	?___ftneg,sprintf@fval
  3155  0001D0  C015  F0FB         	movff	?___ftneg+1,sprintf@fval+1
  3156  0001D4  C016  F0FC         	movff	?___ftneg+2,sprintf@fval+2
  3157                           
  3158                           ;doprnt.c: 833: flag |= 0x03;
  3159  0001D8  0E03               	movlw	3
  3160  0001DA  0100               	movlb	0	; () banked
  3161  0001DC  13F6               	iorwf	sprintf@flag& (0+255),f,b
  3162  0001DE                     l233:
  3163                           
  3164                           ; BSR set to: 0
  3165                           ;doprnt.c: 834: }
  3166                           ;doprnt.c: 835: exp = 0;
  3167                           
  3168                           ; BSR set to: 0
  3169  0001DE  0E00               	movlw	0
  3170  0001E0  6FF5               	movwf	(sprintf@exp+1)& (0+255),b
  3171  0001E2  0E00               	movlw	0
  3172  0001E4  6FF4               	movwf	sprintf@exp& (0+255),b
  3173                           
  3174                           ; BSR set to: 0
  3175                           ;doprnt.c: 836: if( fval!=0) {
  3176  0001E6  51FA               	movf	sprintf@fval& (0+255),w,b
  3177  0001E8  11FB               	iorwf	(sprintf@fval+1)& (0+255),w,b
  3178  0001EA  11FC               	iorwf	(sprintf@fval+2)& (0+255),w,b
  3179  0001EC  B4D8               	btfsc	status,2,c
  3180  0001EE  D086               	goto	l238
  3181                           
  3182                           ; BSR set to: 0
  3183                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  3184  0001F0  0E82               	movlw	130
  3185  0001F2  6FE1               	movwf	??_sprintf& (0+255),b
  3186  0001F4  0EFF               	movlw	255
  3187  0001F6  6FE2               	movwf	(??_sprintf+1)& (0+255),b
  3188  0001F8  C0FA  F0E3         	movff	sprintf@fval,??_sprintf+2
  3189  0001FC  C0FB  F0E4         	movff	sprintf@fval+1,??_sprintf+3
  3190  000200  C0FC  F0E5         	movff	sprintf@fval+2,??_sprintf+4
  3191  000204  C0FD  F0E6         	movff	sprintf@fval+3,??_sprintf+5
  3192  000208  0E10               	movlw	16
  3193  00020A  D005               	goto	u4540
  3194  00020C                     u4545:
  3195  00020C  90D8               	bcf	status,0,c
  3196  00020E  33E6               	rrcf	(??_sprintf+5)& (0+255),f,b
  3197  000210  33E5               	rrcf	(??_sprintf+4)& (0+255),f,b
  3198  000212  33E4               	rrcf	(??_sprintf+3)& (0+255),f,b
  3199  000214  33E3               	rrcf	(??_sprintf+2)& (0+255),f,b
  3200  000216                     u4540:
  3201  000216  2EE8               	decfsz	wreg,f,c
  3202  000218  D7F9               	goto	u4545
  3203  00021A  51E3               	movf	(??_sprintf+2)& (0+255),w,b
  3204  00021C  25E1               	addwf	??_sprintf& (0+255),w,b
  3205  00021E  6FF4               	movwf	sprintf@exp& (0+255),b
  3206  000220  0E00               	movlw	0
  3207  000222  21E2               	addwfc	(??_sprintf+1)& (0+255),w,b
  3208  000224  6FF5               	movwf	(sprintf@exp+1)& (0+255),b
  3209                           
  3210                           ; BSR set to: 0
  3211                           ;doprnt.c: 838: exp--;
  3212  000226  07F4               	decf	sprintf@exp& (0+255),f,b
  3213  000228  A0D8               	btfss	status,0,c
  3214  00022A  07F5               	decf	(sprintf@exp+1)& (0+255),f,b
  3215                           
  3216                           ; BSR set to: 0
  3217                           ;doprnt.c: 839: exp *= 3;
  3218  00022C  C0F4  F022         	movff	sprintf@exp,___wmul@multiplier
  3219  000230  C0F5  F023         	movff	sprintf@exp+1,___wmul@multiplier+1
  3220  000234  0E00               	movlw	0
  3221  000236  6E25               	movwf	___wmul@multiplicand+1,c
  3222  000238  0E03               	movlw	3
  3223  00023A  6E24               	movwf	___wmul@multiplicand,c
  3224  00023C  EC2E  F011         	call	___wmul	;wreg free
  3225  000240  C022  F0F4         	movff	?___wmul,sprintf@exp
  3226  000244  C023  F0F5         	movff	?___wmul+1,sprintf@exp+1
  3227                           
  3228                           ;doprnt.c: 840: exp /= 10;
  3229  000248  C0F4  F01A         	movff	sprintf@exp,___awdiv@dividend
  3230  00024C  C0F5  F01B         	movff	sprintf@exp+1,___awdiv@dividend+1
  3231  000250  0E00               	movlw	0
  3232  000252  6E1D               	movwf	___awdiv@divisor+1,c
  3233  000254  0E0A               	movlw	10
  3234  000256  6E1C               	movwf	___awdiv@divisor,c
  3235  000258  EC32  F00E         	call	___awdiv	;wreg free
  3236  00025C  C01A  F0F4         	movff	?___awdiv,sprintf@exp
  3237  000260  C01B  F0F5         	movff	?___awdiv+1,sprintf@exp+1
  3238                           
  3239                           ;doprnt.c: 841: if(exp < 0)
  3240  000264  0100               	movlb	0	; () banked
  3241  000266  AFF5               	btfss	(sprintf@exp+1)& (0+255),7,b
  3242  000268  D003               	goto	l235
  3243                           
  3244                           ; BSR set to: 0
  3245                           ;doprnt.c: 842: exp--;
  3246  00026A  07F4               	decf	sprintf@exp& (0+255),f,b
  3247  00026C  A0D8               	btfss	status,0,c
  3248  00026E  07F5               	decf	(sprintf@exp+1)& (0+255),f,b
  3249  000270                     l235:
  3250                           
  3251                           ; BSR set to: 0
  3252                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  3253                           
  3254                           ; BSR set to: 0
  3255  000270  51F4               	movf	sprintf@exp& (0+255),w,b
  3256  000272  0800               	sublw	0
  3257  000274  ECB2  F004         	call	_scale
  3258  000278  C037  F0F0         	movff	?_scale,sprintf@tmpval
  3259  00027C  C038  F0F1         	movff	?_scale+1,sprintf@tmpval+1
  3260  000280  C039  F0F2         	movff	?_scale+2,sprintf@tmpval+2
  3261                           
  3262                           ;doprnt.c: 847: tmpval.integ *= fval;
  3263  000284  C0F0  F028         	movff	sprintf@tmpval,___ftmul@f1
  3264  000288  C0F1  F029         	movff	sprintf@tmpval+1,___ftmul@f1+1
  3265  00028C  C0F2  F02A         	movff	sprintf@tmpval+2,___ftmul@f1+2
  3266  000290  C0FA  F02B         	movff	sprintf@fval,___ftmul@f2
  3267  000294  C0FB  F02C         	movff	sprintf@fval+1,___ftmul@f2+1
  3268  000298  C0FC  F02D         	movff	sprintf@fval+2,___ftmul@f2+2
  3269  00029C  EC03  F00C         	call	___ftmul	;wreg free
  3270  0002A0  C028  F0F0         	movff	?___ftmul,sprintf@tmpval
  3271  0002A4  C029  F0F1         	movff	?___ftmul+1,sprintf@tmpval+1
  3272  0002A8  C02A  F0F2         	movff	?___ftmul+2,sprintf@tmpval+2
  3273                           
  3274                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  3275  0002AC  C0F0  F014         	movff	sprintf@tmpval,___ftge@ff1
  3276  0002B0  C0F1  F015         	movff	sprintf@tmpval+1,___ftge@ff1+1
  3277  0002B4  C0F2  F016         	movff	sprintf@tmpval+2,___ftge@ff1+2
  3278  0002B8  0E00               	movlw	0
  3279  0002BA  6E17               	movwf	___ftge@ff2,c
  3280  0002BC  0E80               	movlw	128
  3281  0002BE  6E18               	movwf	___ftge@ff2+1,c
  3282  0002C0  0E3F               	movlw	63
  3283  0002C2  6E19               	movwf	___ftge@ff2+2,c
  3284  0002C4  ECEA  F00D         	call	___ftge	;wreg free
  3285  0002C8  B0D8               	btfsc	status,0,c
  3286  0002CA  D005               	goto	l236
  3287                           
  3288                           ;doprnt.c: 849: exp--;
  3289  0002CC  0100               	movlb	0	; () banked
  3290  0002CE  07F4               	decf	sprintf@exp& (0+255),f,b
  3291  0002D0  A0D8               	btfss	status,0,c
  3292  0002D2  07F5               	decf	(sprintf@exp+1)& (0+255),f,b
  3293  0002D4  D013               	goto	l238
  3294  0002D6                     l236:
  3295                           
  3296                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  3297                           
  3298                           ; BSR set to: 0
  3299  0002D6  C0F0  F014         	movff	sprintf@tmpval,___ftge@ff1
  3300  0002DA  C0F1  F015         	movff	sprintf@tmpval+1,___ftge@ff1+1
  3301  0002DE  C0F2  F016         	movff	sprintf@tmpval+2,___ftge@ff1+2
  3302  0002E2  0E00               	movlw	0
  3303  0002E4  6E17               	movwf	___ftge@ff2,c
  3304  0002E6  0E20               	movlw	32
  3305  0002E8  6E18               	movwf	___ftge@ff2+1,c
  3306  0002EA  0E41               	movlw	65
  3307  0002EC  6E19               	movwf	___ftge@ff2+2,c
  3308  0002EE  ECEA  F00D         	call	___ftge	;wreg free
  3309  0002F2  A0D8               	btfss	status,0,c
  3310  0002F4  D003               	goto	l238
  3311                           
  3312                           ;doprnt.c: 851: exp++;
  3313  0002F6  0100               	movlb	0	; () banked
  3314  0002F8  4BF4               	infsnz	sprintf@exp& (0+255),f,b
  3315  0002FA  2BF5               	incf	(sprintf@exp+1)& (0+255),f,b
  3316  0002FC                     l238:
  3317                           
  3318                           ;doprnt.c: 852: }
  3319                           ;doprnt.c: 1112: if(prec <= 12)
  3320                           
  3321                           ; BSR set to: 0
  3322                           
  3323                           ; BSR set to: 0
  3324                           
  3325                           ; BSR set to: 0
  3326  0002FC  0100               	movlb	0	; () banked
  3327  0002FE  BFFE               	btfsc	(sprintf@prec+1)& (0+255),7,b
  3328  000300  D006               	goto	u4580
  3329  000302  51FE               	movf	(sprintf@prec+1)& (0+255),w,b
  3330  000304  E11B               	bnz	l3919
  3331  000306  0E0D               	movlw	13
  3332  000308  5DFD               	subwf	sprintf@prec& (0+255),w,b
  3333  00030A  B0D8               	btfsc	status,0,c
  3334  00030C  D017               	goto	l239
  3335  00030E                     u4580:
  3336                           
  3337                           ; BSR set to: 0
  3338                           ;doprnt.c: 1113: fval += fround(prec);
  3339  00030E  C0FA  F0CB         	movff	sprintf@fval,___ftadd@f1
  3340  000312  C0FB  F0CC         	movff	sprintf@fval+1,___ftadd@f1+1
  3341  000316  C0FC  F0CD         	movff	sprintf@fval+2,___ftadd@f1+2
  3342  00031A  51FD               	movf	sprintf@prec& (0+255),w,b
  3343  00031C  EC56  F008         	call	_fround
  3344  000320  C037  F0CE         	movff	?_fround,___ftadd@f2
  3345  000324  C038  F0CF         	movff	?_fround+1,___ftadd@f2+1
  3346  000328  C039  F0D0         	movff	?_fround+2,___ftadd@f2+2
  3347  00032C  EC83  F009         	call	___ftadd	;wreg free
  3348  000330  C0CB  F0FA         	movff	?___ftadd,sprintf@fval
  3349  000334  C0CC  F0FB         	movff	?___ftadd+1,sprintf@fval+1
  3350  000338  C0CD  F0FC         	movff	?___ftadd+2,sprintf@fval+2
  3351  00033C                     l239:
  3352  00033C                     l3919:
  3353                           
  3354                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  3355  00033C  0100               	movlb	0	; () banked
  3356  00033E  BFF5               	btfsc	(sprintf@exp+1)& (0+255),7,b
  3357  000340  D006               	goto	u4590
  3358  000342  51F5               	movf	(sprintf@exp+1)& (0+255),w,b
  3359  000344  E11F               	bnz	l3927
  3360  000346  0E0A               	movlw	10
  3361  000348  5DF4               	subwf	sprintf@exp& (0+255),w,b
  3362  00034A  B0D8               	btfsc	status,0,c
  3363  00034C  D01B               	goto	u4620
  3364  00034E                     u4590:
  3365                           
  3366                           ; BSR set to: 0
  3367  00034E  51FA               	movf	sprintf@fval& (0+255),w,b
  3368  000350  11FB               	iorwf	(sprintf@fval+1)& (0+255),w,b
  3369  000352  11FC               	iorwf	(sprintf@fval+2)& (0+255),w,b
  3370  000354  B4D8               	btfsc	status,2,c
  3371  000356  D055               	goto	l240
  3372                           
  3373                           ; BSR set to: 0
  3374  000358  C0FA  F0C4         	movff	sprintf@fval,___fttol@f1
  3375  00035C  C0FB  F0C5         	movff	sprintf@fval+1,___fttol@f1+1
  3376  000360  C0FC  F0C6         	movff	sprintf@fval+2,___fttol@f1+2
  3377  000364  EC87  F00B         	call	___fttol	;wreg free
  3378  000368  0100               	movlb	0	; () banked
  3379  00036A  51C4               	movf	?___fttol& (0+255),w,b
  3380  00036C  11C5               	iorwf	(?___fttol+1)& (0+255),w,b
  3381  00036E  11C6               	iorwf	(?___fttol+2)& (0+255),w,b
  3382  000370  11C7               	iorwf	(?___fttol+3)& (0+255),w,b
  3383  000372  B4D8               	btfsc	status,2,c
  3384                           
  3385                           ; BSR set to: 0
  3386  000374  BFF5               	btfsc	(sprintf@exp+1)& (0+255),7,b
  3387  000376  D045               	goto	l240
  3388  000378  51F5               	movf	(sprintf@exp+1)& (0+255),w,b
  3389  00037A  E104               	bnz	l3927
  3390  00037C  0E02               	movlw	2
  3391  00037E  5DF4               	subwf	sprintf@exp& (0+255),w,b
  3392  000380  A0D8               	btfss	status,0,c
  3393  000382  D03F               	goto	l240
  3394  000384                     u4620:
  3395  000384                     l3927:
  3396                           
  3397                           ; BSR set to: 0
  3398                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  3399  000384  C0F0  F014         	movff	sprintf@tmpval,___ftge@ff1
  3400  000388  C0F1  F015         	movff	sprintf@tmpval+1,___ftge@ff1+1
  3401  00038C  C0F2  F016         	movff	sprintf@tmpval+2,___ftge@ff1+2
  3402  000390  0E70               	movlw	112
  3403  000392  6E17               	movwf	___ftge@ff2,c
  3404  000394  0E89               	movlw	137
  3405  000396  6E18               	movwf	___ftge@ff2+1,c
  3406  000398  0E40               	movlw	64
  3407  00039A  6E19               	movwf	___ftge@ff2+2,c
  3408  00039C  ECEA  F00D         	call	___ftge	;wreg free
  3409  0003A0  B0D8               	btfsc	status,0,c
  3410  0003A2  D003               	goto	l243
  3411                           
  3412                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  3413  0003A4  0100               	movlb	0	; () banked
  3414  0003A6  0EF7               	movlw	247
  3415  0003A8  D002               	goto	L1
  3416  0003AA                     l243:
  3417                           
  3418                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  3419                           
  3420                           ; BSR set to: 0
  3421  0003AA  0100               	movlb	0	; () banked
  3422  0003AC  0EF8               	movlw	248
  3423  0003AE                     L1:
  3424  0003AE  27F4               	addwf	sprintf@exp& (0+255),f,b
  3425  0003B0  0EFF               	movlw	255
  3426  0003B2  23F5               	addwfc	(sprintf@exp+1)& (0+255),f,b
  3427                           
  3428                           ; BSR set to: 0
  3429                           ;doprnt.c: 1124: }
  3430                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  3431                           
  3432                           ; BSR set to: 0
  3433  0003B4  51F4               	movf	sprintf@exp& (0+255),w,b
  3434  0003B6  ECB2  F004         	call	_scale
  3435  0003BA  C037  F0F0         	movff	?_scale,sprintf@tmpval
  3436  0003BE  C038  F0F1         	movff	?_scale+1,sprintf@tmpval+1
  3437  0003C2  C039  F0F2         	movff	?_scale+2,sprintf@tmpval+2
  3438                           
  3439                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  3440  0003C6  C0FA  F014         	movff	sprintf@fval,__tdiv_to_l_@f1
  3441  0003CA  C0FB  F015         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  3442  0003CE  C0FC  F016         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  3443  0003D2  C0F0  F017         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  3444  0003D6  C0F1  F018         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  3445  0003DA  C0F2  F019         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  3446  0003DE  EC5A  F00A         	call	__tdiv_to_l_	;wreg free
  3447  0003E2  C014  F0EC         	movff	?__tdiv_to_l_,sprintf@val
  3448  0003E6  C015  F0ED         	movff	?__tdiv_to_l_+1,sprintf@val+1
  3449  0003EA  C016  F0EE         	movff	?__tdiv_to_l_+2,sprintf@val+2
  3450  0003EE  C017  F0EF         	movff	?__tdiv_to_l_+3,sprintf@val+3
  3451                           
  3452                           ;doprnt.c: 1129: fval = 0.0;
  3453  0003F2  0E00               	movlw	0
  3454  0003F4  0100               	movlb	0	; () banked
  3455  0003F6  6FFA               	movwf	sprintf@fval& (0+255),b
  3456  0003F8  0E00               	movlw	0
  3457  0003FA  6FFB               	movwf	(sprintf@fval+1)& (0+255),b
  3458  0003FC  0E00               	movlw	0
  3459  0003FE  6FFC               	movwf	(sprintf@fval+2)& (0+255),b
  3460                           
  3461                           ;doprnt.c: 1130: } else {
  3462  000400  D033               	goto	l249
  3463  000402                     l240:
  3464                           
  3465                           ; BSR set to: 0
  3466                           ;doprnt.c: 1131: val = (unsigned long)fval;
  3467                           
  3468                           ; BSR set to: 0
  3469  000402  C0FA  F0C4         	movff	sprintf@fval,___fttol@f1
  3470  000406  C0FB  F0C5         	movff	sprintf@fval+1,___fttol@f1+1
  3471  00040A  C0FC  F0C6         	movff	sprintf@fval+2,___fttol@f1+2
  3472  00040E  EC87  F00B         	call	___fttol	;wreg free
  3473  000412  C0C4  F0EC         	movff	?___fttol,sprintf@val
  3474  000416  C0C5  F0ED         	movff	?___fttol+1,sprintf@val+1
  3475  00041A  C0C6  F0EE         	movff	?___fttol+2,sprintf@val+2
  3476  00041E  C0C7  F0EF         	movff	?___fttol+3,sprintf@val+3
  3477                           
  3478                           ;doprnt.c: 1132: fval -= (double)val;
  3479  000422  C0FA  F0D4         	movff	sprintf@fval,___ftsub@f1
  3480  000426  C0FB  F0D5         	movff	sprintf@fval+1,___ftsub@f1+1
  3481  00042A  C0FC  F0D6         	movff	sprintf@fval+2,___ftsub@f1+2
  3482  00042E  C0EC  F01C         	movff	sprintf@val,___lltoft@c
  3483  000432  C0ED  F01D         	movff	sprintf@val+1,___lltoft@c+1
  3484  000436  C0EE  F01E         	movff	sprintf@val+2,___lltoft@c+2
  3485  00043A  C0EF  F01F         	movff	sprintf@val+3,___lltoft@c+3
  3486  00043E  EC20  F00F         	call	___lltoft	;wreg free
  3487  000442  C01C  F0D7         	movff	?___lltoft,___ftsub@f2
  3488  000446  C01D  F0D8         	movff	?___lltoft+1,___ftsub@f2+1
  3489  00044A  C01E  F0D9         	movff	?___lltoft+2,___ftsub@f2+2
  3490  00044E  EC9C  F010         	call	___ftsub	;wreg free
  3491  000452  C0D4  F0FA         	movff	?___ftsub,sprintf@fval
  3492  000456  C0D5  F0FB         	movff	?___ftsub+1,sprintf@fval+1
  3493  00045A  C0D6  F0FC         	movff	?___ftsub+2,sprintf@fval+2
  3494                           
  3495                           ;doprnt.c: 1133: exp = 0;
  3496  00045E  0E00               	movlw	0
  3497  000460  0100               	movlb	0	; () banked
  3498  000462  6FF5               	movwf	(sprintf@exp+1)& (0+255),b
  3499  000464  0E00               	movlw	0
  3500  000466  6FF4               	movwf	sprintf@exp& (0+255),b
  3501  000468                     l249:
  3502                           
  3503                           ; BSR set to: 0
  3504                           ;doprnt.c: 1134: }
  3505                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  3506                           
  3507                           ; BSR set to: 0
  3508  000468  0E01               	movlw	1
  3509  00046A  6FFF               	movwf	sprintf@c& (0+255),b
  3510  00046C                     l3947:
  3511                           
  3512                           ; BSR set to: 0
  3513  00046C  0E0A               	movlw	10
  3514  00046E  19FF               	xorwf	sprintf@c& (0+255),w,b
  3515  000470  B4D8               	btfsc	status,2,c
  3516  000472  D018               	goto	u4660
  3517                           
  3518                           ; BSR set to: 0
  3519                           ;doprnt.c: 1137: if(val < dpowers[c])
  3520                           
  3521                           ; BSR set to: 0
  3522                           
  3523                           ; BSR set to: 0
  3524  000474  51FF               	movf	sprintf@c& (0+255),w,b
  3525  000476  0D04               	mullw	4
  3526  000478  0EDD               	movlw	low _dpowers
  3527  00047A  24F3               	addwf	prodl,w,c
  3528  00047C  6EF6               	movwf	tblptrl,c
  3529  00047E  0E5E               	movlw	high _dpowers
  3530  000480  20F4               	addwfc	prodh,w,c
  3531  000482  6EF7               	movwf	tblptrh,c
  3532  000484                     	if	0	;There are less than 3 active tblptr bytes
  3533  000484                     	endif
  3534  000484  0009               	tblrd		*+
  3535  000486  50F5               	movf	tablat,w,c
  3536  000488  5DEC               	subwf	sprintf@val& (0+255),w,b
  3537  00048A  0009               	tblrd		*+
  3538  00048C  50F5               	movf	tablat,w,c
  3539  00048E  59ED               	subwfb	(sprintf@val+1)& (0+255),w,b
  3540  000490  0009               	tblrd		*+
  3541  000492  50F5               	movf	tablat,w,c
  3542  000494  59EE               	subwfb	(sprintf@val+2)& (0+255),w,b
  3543  000496  0009               	tblrd		*+
  3544  000498  50F5               	movf	tablat,w,c
  3545  00049A  59EF               	subwfb	(sprintf@val+3)& (0+255),w,b
  3546  00049C  A0D8               	btfss	status,0,c
  3547  00049E  D002               	goto	u4660
  3548                           
  3549                           ; BSR set to: 0
  3550                           
  3551                           ; BSR set to: 0
  3552                           
  3553                           ; BSR set to: 0
  3554                           ;doprnt.c: 1138: break;
  3555  0004A0  2BFF               	incf	sprintf@c& (0+255),f,b
  3556  0004A2  D7E4               	goto	l3947
  3557  0004A4                     u4660:
  3558                           
  3559                           ; BSR set to: 0
  3560                           ;doprnt.c: 1142: width -= prec + c + exp;
  3561                           
  3562                           ; BSR set to: 0
  3563  0004A4  C0FF  F0E1         	movff	sprintf@c,??_sprintf
  3564  0004A8  6BE2               	clrf	(??_sprintf+1)& (0+255),b
  3565  0004AA  BFE1               	btfsc	??_sprintf& (0+255),7,b
  3566  0004AC  07E2               	decf	(??_sprintf+1)& (0+255),f,b
  3567  0004AE  51FD               	movf	sprintf@prec& (0+255),w,b
  3568  0004B0  27E1               	addwf	??_sprintf& (0+255),f,b
  3569  0004B2  51FE               	movf	(sprintf@prec+1)& (0+255),w,b
  3570  0004B4  23E2               	addwfc	(??_sprintf+1)& (0+255),f,b
  3571  0004B6  51F4               	movf	sprintf@exp& (0+255),w,b
  3572  0004B8  27E1               	addwf	??_sprintf& (0+255),f,b
  3573  0004BA  51F5               	movf	(sprintf@exp+1)& (0+255),w,b
  3574  0004BC  23E2               	addwfc	(??_sprintf+1)& (0+255),f,b
  3575  0004BE  51E1               	movf	??_sprintf& (0+255),w,b
  3576  0004C0  5FF8               	subwf	sprintf@width& (0+255),f,b
  3577  0004C2  51E2               	movf	(??_sprintf+1)& (0+255),w,b
  3578  0004C4  5BF9               	subwfb	(sprintf@width+1)& (0+255),f,b
  3579                           
  3580                           ;doprnt.c: 1143: if(
  3581                           ;doprnt.c: 1147: prec)
  3582  0004C6  51FD               	movf	sprintf@prec& (0+255),w,b
  3583  0004C8  11FE               	iorwf	(sprintf@prec+1)& (0+255),w,b
  3584  0004CA  B4D8               	btfsc	status,2,c
  3585  0004CC  D003               	goto	l253
  3586                           
  3587                           ; BSR set to: 0
  3588                           ;doprnt.c: 1148: width--;
  3589  0004CE  07F8               	decf	sprintf@width& (0+255),f,b
  3590  0004D0  A0D8               	btfss	status,0,c
  3591  0004D2  07F9               	decf	(sprintf@width+1)& (0+255),f,b
  3592  0004D4                     l253:
  3593                           
  3594                           ; BSR set to: 0
  3595                           ;doprnt.c: 1149: if(flag & 0x03)
  3596                           
  3597                           ; BSR set to: 0
  3598  0004D4  0E03               	movlw	3
  3599  0004D6  15F6               	andwf	sprintf@flag& (0+255),w,b
  3600  0004D8  6FE1               	movwf	??_sprintf& (0+255),b
  3601  0004DA  0E00               	movlw	0
  3602  0004DC  15F7               	andwf	(sprintf@flag+1)& (0+255),w,b
  3603  0004DE  6FE2               	movwf	(??_sprintf+1)& (0+255),b
  3604  0004E0  51E1               	movf	??_sprintf& (0+255),w,b
  3605  0004E2  11E2               	iorwf	(??_sprintf+1)& (0+255),w,b
  3606  0004E4  B4D8               	btfsc	status,2,c
  3607  0004E6  D003               	goto	l254
  3608                           
  3609                           ; BSR set to: 0
  3610                           ;doprnt.c: 1150: width--;
  3611  0004E8  07F8               	decf	sprintf@width& (0+255),f,b
  3612  0004EA  A0D8               	btfss	status,0,c
  3613  0004EC  07F9               	decf	(sprintf@width+1)& (0+255),f,b
  3614  0004EE                     l254:
  3615                           
  3616                           ; BSR set to: 0
  3617                           ;doprnt.c: 1153: if(flag & 0x04) {
  3618                           
  3619                           ; BSR set to: 0
  3620  0004EE  A5F6               	btfss	sprintf@flag& (0+255),2,b
  3621  0004F0  D031               	goto	l261
  3622                           
  3623                           ; BSR set to: 0
  3624                           ;doprnt.c: 1157: if(flag & 0x03)
  3625  0004F2  0E03               	movlw	3
  3626  0004F4  15F6               	andwf	sprintf@flag& (0+255),w,b
  3627  0004F6  6FE1               	movwf	??_sprintf& (0+255),b
  3628  0004F8  0E00               	movlw	0
  3629  0004FA  15F7               	andwf	(sprintf@flag+1)& (0+255),w,b
  3630  0004FC  6FE2               	movwf	(??_sprintf+1)& (0+255),b
  3631  0004FE  51E1               	movf	??_sprintf& (0+255),w,b
  3632  000500  11E2               	iorwf	(??_sprintf+1)& (0+255),w,b
  3633  000502  B4D8               	btfsc	status,2,c
  3634  000504  D014               	goto	l257
  3635                           
  3636                           ; BSR set to: 0
  3637                           ;doprnt.c: 1159: ((*sp++ = ('-')));
  3638  000506  C0DA  FFD9         	movff	sprintf@sp,fsr2l
  3639  00050A  C0DB  FFDA         	movff	sprintf@sp+1,fsr2h
  3640  00050E  0E2D               	movlw	45
  3641  000510  6EDF               	movwf	indf2,c
  3642                           
  3643                           ; BSR set to: 0
  3644  000512  4BDA               	infsnz	sprintf@sp& (0+255),f,b
  3645  000514  2BDB               	incf	(sprintf@sp+1)& (0+255),f,b
  3646                           
  3647                           ; BSR set to: 0
  3648                           ;doprnt.c: 1168: while(width > 0) {
  3649  000516  D00B               	goto	l257
  3650  000518                     l3975:
  3651                           
  3652                           ; BSR set to: 0
  3653                           ;doprnt.c: 1169: ((*sp++ = ('0')));
  3654  000518  C0DA  FFD9         	movff	sprintf@sp,fsr2l
  3655  00051C  C0DB  FFDA         	movff	sprintf@sp+1,fsr2h
  3656  000520  0E30               	movlw	48
  3657  000522  6EDF               	movwf	indf2,c
  3658                           
  3659                           ; BSR set to: 0
  3660  000524  4BDA               	infsnz	sprintf@sp& (0+255),f,b
  3661  000526  2BDB               	incf	(sprintf@sp+1)& (0+255),f,b
  3662                           
  3663                           ; BSR set to: 0
  3664                           ;doprnt.c: 1170: width--;
  3665  000528  07F8               	decf	sprintf@width& (0+255),f,b
  3666  00052A  A0D8               	btfss	status,0,c
  3667  00052C  07F9               	decf	(sprintf@width+1)& (0+255),f,b
  3668  00052E                     l257:
  3669                           
  3670                           ; BSR set to: 0
  3671                           
  3672                           ; BSR set to: 0
  3673  00052E  BFF9               	btfsc	(sprintf@width+1)& (0+255),7,b
  3674  000530  D072               	goto	l265
  3675  000532  51F9               	movf	(sprintf@width+1)& (0+255),w,b
  3676  000534  E1F1               	bnz	l3975
  3677  000536  05F8               	decf	sprintf@width& (0+255),w,b
  3678  000538  A0D8               	btfss	status,0,c
  3679  00053A  D06D               	goto	l265
  3680  00053C  D7ED               	goto	l258
  3681  00053E                     l3983:
  3682                           
  3683                           ; BSR set to: 0
  3684                           ;doprnt.c: 1181: ((*sp++ = (' ')));
  3685  00053E  C0DA  FFD9         	movff	sprintf@sp,fsr2l
  3686  000542  C0DB  FFDA         	movff	sprintf@sp+1,fsr2h
  3687  000546  0E20               	movlw	32
  3688  000548  6EDF               	movwf	indf2,c
  3689                           
  3690                           ; BSR set to: 0
  3691  00054A  4BDA               	infsnz	sprintf@sp& (0+255),f,b
  3692  00054C  2BDB               	incf	(sprintf@sp+1)& (0+255),f,b
  3693                           
  3694                           ; BSR set to: 0
  3695                           ;doprnt.c: 1182: width--;
  3696  00054E  07F8               	decf	sprintf@width& (0+255),f,b
  3697  000550  A0D8               	btfss	status,0,c
  3698  000552  07F9               	decf	(sprintf@width+1)& (0+255),f,b
  3699  000554                     l261:
  3700                           
  3701                           ; BSR set to: 0
  3702                           
  3703                           ; BSR set to: 0
  3704  000554  BFF9               	btfsc	(sprintf@width+1)& (0+255),7,b
  3705  000556  D005               	goto	u4720
  3706  000558  51F9               	movf	(sprintf@width+1)& (0+255),w,b
  3707  00055A  E1F1               	bnz	l3983
  3708  00055C  05F8               	decf	sprintf@width& (0+255),w,b
  3709  00055E  B0D8               	btfsc	status,0,c
  3710  000560  D7EE               	goto	l262
  3711  000562                     u4720:
  3712                           
  3713                           ; BSR set to: 0
  3714                           ;doprnt.c: 1183: }
  3715                           ;doprnt.c: 1188: if(flag & 0x03)
  3716                           
  3717                           ; BSR set to: 0
  3718  000562  0E03               	movlw	3
  3719  000564  15F6               	andwf	sprintf@flag& (0+255),w,b
  3720  000566  6FE1               	movwf	??_sprintf& (0+255),b
  3721  000568  0E00               	movlw	0
  3722  00056A  15F7               	andwf	(sprintf@flag+1)& (0+255),w,b
  3723  00056C  6FE2               	movwf	(??_sprintf+1)& (0+255),b
  3724  00056E  51E1               	movf	??_sprintf& (0+255),w,b
  3725  000570  11E2               	iorwf	(??_sprintf+1)& (0+255),w,b
  3726  000572  B4D8               	btfsc	status,2,c
  3727  000574  D050               	goto	l265
  3728                           
  3729                           ; BSR set to: 0
  3730                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  3731  000576  C0DA  FFD9         	movff	sprintf@sp,fsr2l
  3732  00057A  C0DB  FFDA         	movff	sprintf@sp+1,fsr2h
  3733  00057E  0E2D               	movlw	45
  3734  000580  D047               	goto	L2
  3735  000582                     
  3736                           ; BSR set to: 0
  3737                           ;doprnt.c: 1200: {
  3738                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  3739                           
  3740                           ; BSR set to: 0
  3741  000582  C0EC  F014         	movff	sprintf@val,___lldiv@dividend
  3742  000586  C0ED  F015         	movff	sprintf@val+1,___lldiv@dividend+1
  3743  00058A  C0EE  F016         	movff	sprintf@val+2,___lldiv@dividend+2
  3744  00058E  C0EF  F017         	movff	sprintf@val+3,___lldiv@dividend+3
  3745  000592  51FF               	movf	sprintf@c& (0+255),w,b
  3746  000594  0D04               	mullw	4
  3747  000596  0EDD               	movlw	low _dpowers
  3748  000598  24F3               	addwf	prodl,w,c
  3749  00059A  6EF6               	movwf	tblptrl,c
  3750  00059C  0E5E               	movlw	high _dpowers
  3751  00059E  20F4               	addwfc	prodh,w,c
  3752  0005A0  6EF7               	movwf	tblptrh,c
  3753  0005A2                     	if	0	;There are less than 3 active tblptr bytes
  3754  0005A2                     	endif
  3755  0005A2  0009               	tblrd		*+
  3756  0005A4  CFF5 F018          	movff	tablat,___lldiv@divisor
  3757  0005A8  0009               	tblrd		*+
  3758  0005AA  CFF5 F019          	movff	tablat,___lldiv@divisor+1
  3759  0005AE  0009               	tblrd		*+
  3760  0005B0  CFF5 F01A          	movff	tablat,___lldiv@divisor+2
  3761  0005B4  000A               	tblrd		*-
  3762  0005B6  CFF5 F01B          	movff	tablat,___lldiv@divisor+3
  3763  0005BA  EC74  F00E         	call	___lldiv	;wreg free
  3764  0005BE  C014  F0F0         	movff	?___lldiv,sprintf@tmpval
  3765  0005C2  C015  F0F1         	movff	?___lldiv+1,sprintf@tmpval+1
  3766  0005C6  C016  F0F2         	movff	?___lldiv+2,sprintf@tmpval+2
  3767  0005CA  C017  F0F3         	movff	?___lldiv+3,sprintf@tmpval+3
  3768                           
  3769                           ;doprnt.c: 1202: tmpval.vd %= 10;
  3770  0005CE  C0F0  F014         	movff	sprintf@tmpval,___llmod@dividend
  3771  0005D2  C0F1  F015         	movff	sprintf@tmpval+1,___llmod@dividend+1
  3772  0005D6  C0F2  F016         	movff	sprintf@tmpval+2,___llmod@dividend+2
  3773  0005DA  C0F3  F017         	movff	sprintf@tmpval+3,___llmod@dividend+3
  3774  0005DE  0E0A               	movlw	10
  3775  0005E0  6E18               	movwf	___llmod@divisor,c
  3776  0005E2  0E00               	movlw	0
  3777  0005E4  6E19               	movwf	___llmod@divisor+1,c
  3778  0005E6  0E00               	movlw	0
  3779  0005E8  6E1A               	movwf	___llmod@divisor+2,c
  3780  0005EA  0E00               	movlw	0
  3781  0005EC  6E1B               	movwf	___llmod@divisor+3,c
  3782  0005EE  ECED  F00E         	call	___llmod	;wreg free
  3783  0005F2  C014  F0F0         	movff	?___llmod,sprintf@tmpval
  3784  0005F6  C015  F0F1         	movff	?___llmod+1,sprintf@tmpval+1
  3785  0005FA  C016  F0F2         	movff	?___llmod+2,sprintf@tmpval+2
  3786  0005FE  C017  F0F3         	movff	?___llmod+3,sprintf@tmpval+3
  3787                           
  3788                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  3789  000602  0100               	movlb	0	; () banked
  3790  000604  51F0               	movf	sprintf@tmpval& (0+255),w,b
  3791  000606  0F30               	addlw	48
  3792  000608  C0DA  FFD9         	movff	sprintf@sp,fsr2l
  3793  00060C  C0DB  FFDA         	movff	sprintf@sp+1,fsr2h
  3794  000610                     L2:
  3795  000610  6EDF               	movwf	indf2,c
  3796                           
  3797                           ; BSR set to: 0
  3798  000612  4BDA               	infsnz	sprintf@sp& (0+255),f,b
  3799  000614  2BDB               	incf	(sprintf@sp+1)& (0+255),f,b
  3800  000616                     l265:
  3801                           
  3802                           ; BSR set to: 0
  3803                           
  3804                           ; BSR set to: 0
  3805  000616  07FF               	decf	sprintf@c& (0+255),f,b
  3806  000618  29FF               	incf	sprintf@c& (0+255),w,b
  3807  00061A  B4D8               	btfsc	status,2,c
  3808  00061C  D00C               	goto	l268
  3809  00061E  D7B1               	goto	l266
  3810  000620                     l4007:
  3811                           
  3812                           ; BSR set to: 0
  3813                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  3814  000620  C0DA  FFD9         	movff	sprintf@sp,fsr2l
  3815  000624  C0DB  FFDA         	movff	sprintf@sp+1,fsr2h
  3816  000628  0E30               	movlw	48
  3817  00062A  6EDF               	movwf	indf2,c
  3818                           
  3819                           ; BSR set to: 0
  3820  00062C  4BDA               	infsnz	sprintf@sp& (0+255),f,b
  3821  00062E  2BDB               	incf	(sprintf@sp+1)& (0+255),f,b
  3822                           
  3823                           ; BSR set to: 0
  3824                           ;doprnt.c: 1209: exp--;
  3825  000630  07F4               	decf	sprintf@exp& (0+255),f,b
  3826  000632  A0D8               	btfss	status,0,c
  3827  000634  07F5               	decf	(sprintf@exp+1)& (0+255),f,b
  3828  000636                     l268:
  3829                           
  3830                           ; BSR set to: 0
  3831                           
  3832                           ; BSR set to: 0
  3833  000636  BFF5               	btfsc	(sprintf@exp+1)& (0+255),7,b
  3834  000638  D005               	goto	u4750
  3835  00063A  51F5               	movf	(sprintf@exp+1)& (0+255),w,b
  3836  00063C  E1F1               	bnz	l4007
  3837  00063E  05F4               	decf	sprintf@exp& (0+255),w,b
  3838  000640  B0D8               	btfsc	status,0,c
  3839  000642  D7EE               	goto	l269
  3840  000644                     u4750:
  3841                           
  3842                           ; BSR set to: 0
  3843                           ;doprnt.c: 1210: }
  3844                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  3845                           
  3846                           ; BSR set to: 0
  3847  000644  BFFE               	btfsc	(sprintf@prec+1)& (0+255),7,b
  3848  000646  D009               	goto	l271
  3849  000648  51FE               	movf	(sprintf@prec+1)& (0+255),w,b
  3850  00064A  E104               	bnz	u4760
  3851  00064C  0E09               	movlw	9
  3852  00064E  5DFD               	subwf	sprintf@prec& (0+255),w,b
  3853  000650  A0D8               	btfss	status,0,c
  3854  000652  D003               	goto	l271
  3855  000654                     u4760:
  3856                           
  3857                           ; BSR set to: 0
  3858                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  3859  000654  0E08               	movlw	8
  3860  000656  6FFF               	movwf	sprintf@c& (0+255),b
  3861  000658  D002               	goto	l272
  3862  00065A                     l271:
  3863                           
  3864                           ; BSR set to: 0
  3865                           ;doprnt.c: 1213: else
  3866                           ;doprnt.c: 1214: c = prec;
  3867  00065A  C0FD  F0FF         	movff	sprintf@prec,sprintf@c
  3868  00065E                     l272:
  3869                           
  3870                           ; BSR set to: 0
  3871                           ;doprnt.c: 1215: prec -= c;
  3872                           
  3873                           ; BSR set to: 0
  3874  00065E  51FF               	movf	sprintf@c& (0+255),w,b
  3875  000660  5FFD               	subwf	sprintf@prec& (0+255),f,b
  3876  000662  0E00               	movlw	0
  3877  000664  BFFF               	btfsc	sprintf@c& (0+255),7,b
  3878  000666  0EFF               	movlw	255
  3879  000668  5BFE               	subwfb	(sprintf@prec+1)& (0+255),f,b
  3880                           
  3881                           ; BSR set to: 0
  3882                           ;doprnt.c: 1219: if(c)
  3883  00066A  51FF               	movf	sprintf@c& (0+255),w,b
  3884  00066C  B4D8               	btfsc	status,2,c
  3885  00066E  D008               	goto	l273
  3886                           
  3887                           ; BSR set to: 0
  3888                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  3889  000670  C0DA  FFD9         	movff	sprintf@sp,fsr2l
  3890  000674  C0DB  FFDA         	movff	sprintf@sp+1,fsr2h
  3891  000678  0E2E               	movlw	46
  3892  00067A  6EDF               	movwf	indf2,c
  3893                           
  3894                           ; BSR set to: 0
  3895  00067C  4BDA               	infsnz	sprintf@sp& (0+255),f,b
  3896  00067E  2BDB               	incf	(sprintf@sp+1)& (0+255),f,b
  3897  000680                     l273:
  3898                           
  3899                           ; BSR set to: 0
  3900                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3901                           
  3902                           ; BSR set to: 0
  3903  000680  51FF               	movf	sprintf@c& (0+255),w,b
  3904  000682  ECB2  F004         	call	_scale
  3905  000686  C037  F0E7         	movff	?_scale,_sprintf$1540
  3906  00068A  C038  F0E8         	movff	?_scale+1,_sprintf$1540+1
  3907  00068E  C039  F0E9         	movff	?_scale+2,_sprintf$1540+2
  3908                           
  3909                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3910  000692  C0FA  F02B         	movff	sprintf@fval,___ftmul@f2
  3911  000696  C0FB  F02C         	movff	sprintf@fval+1,___ftmul@f2+1
  3912  00069A  C0FC  F02D         	movff	sprintf@fval+2,___ftmul@f2+2
  3913  00069E  C0E7  F028         	movff	_sprintf$1540,___ftmul@f1
  3914  0006A2  C0E8  F029         	movff	_sprintf$1540+1,___ftmul@f1+1
  3915  0006A6  C0E9  F02A         	movff	_sprintf$1540+2,___ftmul@f1+2
  3916  0006AA  EC03  F00C         	call	___ftmul	;wreg free
  3917  0006AE  C028  F0C4         	movff	?___ftmul,___fttol@f1
  3918  0006B2  C029  F0C5         	movff	?___ftmul+1,___fttol@f1+1
  3919  0006B6  C02A  F0C6         	movff	?___ftmul+2,___fttol@f1+2
  3920  0006BA  EC87  F00B         	call	___fttol	;wreg free
  3921  0006BE  C0C4  F0EC         	movff	?___fttol,sprintf@val
  3922  0006C2  C0C5  F0ED         	movff	?___fttol+1,sprintf@val+1
  3923  0006C6  C0C6  F0EE         	movff	?___fttol+2,sprintf@val+2
  3924  0006CA  C0C7  F0EF         	movff	?___fttol+3,sprintf@val+3
  3925                           
  3926                           ;doprnt.c: 1228: while(c--) {
  3927  0006CE  D071               	goto	l274
  3928  0006D0                     
  3929                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  3930  0006D0  C0EC  F014         	movff	sprintf@val,___lldiv@dividend
  3931  0006D4  C0ED  F015         	movff	sprintf@val+1,___lldiv@dividend+1
  3932  0006D8  C0EE  F016         	movff	sprintf@val+2,___lldiv@dividend+2
  3933  0006DC  C0EF  F017         	movff	sprintf@val+3,___lldiv@dividend+3
  3934  0006E0  0100               	movlb	0	; () banked
  3935  0006E2  51FF               	movf	sprintf@c& (0+255),w,b
  3936  0006E4  0D04               	mullw	4
  3937  0006E6  0EDD               	movlw	low _dpowers
  3938  0006E8  24F3               	addwf	prodl,w,c
  3939  0006EA  6EF6               	movwf	tblptrl,c
  3940  0006EC  0E5E               	movlw	high _dpowers
  3941  0006EE  20F4               	addwfc	prodh,w,c
  3942  0006F0  6EF7               	movwf	tblptrh,c
  3943  0006F2                     	if	0	;There are less than 3 active tblptr bytes
  3944  0006F2                     	endif
  3945  0006F2  0009               	tblrd		*+
  3946  0006F4  CFF5 F018          	movff	tablat,___lldiv@divisor
  3947  0006F8  0009               	tblrd		*+
  3948  0006FA  CFF5 F019          	movff	tablat,___lldiv@divisor+1
  3949  0006FE  0009               	tblrd		*+
  3950  000700  CFF5 F01A          	movff	tablat,___lldiv@divisor+2
  3951  000704  000A               	tblrd		*-
  3952  000706  CFF5 F01B          	movff	tablat,___lldiv@divisor+3
  3953  00070A  EC74  F00E         	call	___lldiv	;wreg free
  3954  00070E  C014  F0F0         	movff	?___lldiv,sprintf@tmpval
  3955  000712  C015  F0F1         	movff	?___lldiv+1,sprintf@tmpval+1
  3956  000716  C016  F0F2         	movff	?___lldiv+2,sprintf@tmpval+2
  3957  00071A  C017  F0F3         	movff	?___lldiv+3,sprintf@tmpval+3
  3958                           
  3959                           ;doprnt.c: 1230: tmpval.vd %= 10;
  3960  00071E  C0F0  F014         	movff	sprintf@tmpval,___llmod@dividend
  3961  000722  C0F1  F015         	movff	sprintf@tmpval+1,___llmod@dividend+1
  3962  000726  C0F2  F016         	movff	sprintf@tmpval+2,___llmod@dividend+2
  3963  00072A  C0F3  F017         	movff	sprintf@tmpval+3,___llmod@dividend+3
  3964  00072E  0E0A               	movlw	10
  3965  000730  6E18               	movwf	___llmod@divisor,c
  3966  000732  0E00               	movlw	0
  3967  000734  6E19               	movwf	___llmod@divisor+1,c
  3968  000736  0E00               	movlw	0
  3969  000738  6E1A               	movwf	___llmod@divisor+2,c
  3970  00073A  0E00               	movlw	0
  3971  00073C  6E1B               	movwf	___llmod@divisor+3,c
  3972  00073E  ECED  F00E         	call	___llmod	;wreg free
  3973  000742  C014  F0F0         	movff	?___llmod,sprintf@tmpval
  3974  000746  C015  F0F1         	movff	?___llmod+1,sprintf@tmpval+1
  3975  00074A  C016  F0F2         	movff	?___llmod+2,sprintf@tmpval+2
  3976  00074E  C017  F0F3         	movff	?___llmod+3,sprintf@tmpval+3
  3977                           
  3978                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  3979  000752  0100               	movlb	0	; () banked
  3980  000754  51F0               	movf	sprintf@tmpval& (0+255),w,b
  3981  000756  0F30               	addlw	48
  3982  000758  C0DA  FFD9         	movff	sprintf@sp,fsr2l
  3983  00075C  C0DB  FFDA         	movff	sprintf@sp+1,fsr2h
  3984  000760  6EDF               	movwf	indf2,c
  3985                           
  3986                           ; BSR set to: 0
  3987  000762  4BDA               	infsnz	sprintf@sp& (0+255),f,b
  3988  000764  2BDB               	incf	(sprintf@sp+1)& (0+255),f,b
  3989                           
  3990                           ; BSR set to: 0
  3991                           ;doprnt.c: 1232: val %= dpowers[c];
  3992  000766  C0EC  F014         	movff	sprintf@val,___llmod@dividend
  3993  00076A  C0ED  F015         	movff	sprintf@val+1,___llmod@dividend+1
  3994  00076E  C0EE  F016         	movff	sprintf@val+2,___llmod@dividend+2
  3995  000772  C0EF  F017         	movff	sprintf@val+3,___llmod@dividend+3
  3996  000776  51FF               	movf	sprintf@c& (0+255),w,b
  3997  000778  0D04               	mullw	4
  3998  00077A  0EDD               	movlw	low _dpowers
  3999  00077C  24F3               	addwf	prodl,w,c
  4000  00077E  6EF6               	movwf	tblptrl,c
  4001  000780  0E5E               	movlw	high _dpowers
  4002  000782  20F4               	addwfc	prodh,w,c
  4003  000784  6EF7               	movwf	tblptrh,c
  4004  000786                     	if	0	;There are less than 3 active tblptr bytes
  4005  000786                     	endif
  4006  000786  0009               	tblrd		*+
  4007  000788  CFF5 F018          	movff	tablat,___llmod@divisor
  4008  00078C  0009               	tblrd		*+
  4009  00078E  CFF5 F019          	movff	tablat,___llmod@divisor+1
  4010  000792  0009               	tblrd		*+
  4011  000794  CFF5 F01A          	movff	tablat,___llmod@divisor+2
  4012  000798  000A               	tblrd		*-
  4013  00079A  CFF5 F01B          	movff	tablat,___llmod@divisor+3
  4014  00079E  ECED  F00E         	call	___llmod	;wreg free
  4015  0007A2  C014  F0EC         	movff	?___llmod,sprintf@val
  4016  0007A6  C015  F0ED         	movff	?___llmod+1,sprintf@val+1
  4017  0007AA  C016  F0EE         	movff	?___llmod+2,sprintf@val+2
  4018  0007AE  C017  F0EF         	movff	?___llmod+3,sprintf@val+3
  4019  0007B2                     l274:
  4020  0007B2  0100               	movlb	0	; () banked
  4021  0007B4  07FF               	decf	sprintf@c& (0+255),f,b
  4022  0007B6  29FF               	incf	sprintf@c& (0+255),w,b
  4023  0007B8  B4D8               	btfsc	status,2,c
  4024  0007BA  D00C               	goto	l277
  4025  0007BC  D789               	goto	l275
  4026  0007BE                     
  4027                           ; BSR set to: 0
  4028                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  4029                           
  4030                           ; BSR set to: 0
  4031  0007BE  C0DA  FFD9         	movff	sprintf@sp,fsr2l
  4032  0007C2  C0DB  FFDA         	movff	sprintf@sp+1,fsr2h
  4033  0007C6  0E30               	movlw	48
  4034  0007C8  6EDF               	movwf	indf2,c
  4035                           
  4036                           ; BSR set to: 0
  4037  0007CA  4BDA               	infsnz	sprintf@sp& (0+255),f,b
  4038  0007CC  2BDB               	incf	(sprintf@sp+1)& (0+255),f,b
  4039                           
  4040                           ; BSR set to: 0
  4041                           ;doprnt.c: 1237: prec--;
  4042  0007CE  07FD               	decf	sprintf@prec& (0+255),f,b
  4043  0007D0  A0D8               	btfss	status,0,c
  4044  0007D2  07FE               	decf	(sprintf@prec+1)& (0+255),f,b
  4045  0007D4                     l277:
  4046                           
  4047                           ; BSR set to: 0
  4048                           
  4049                           ; BSR set to: 0
  4050  0007D4  51FD               	movf	sprintf@prec& (0+255),w,b
  4051  0007D6  11FE               	iorwf	(sprintf@prec+1)& (0+255),w,b
  4052  0007D8  B4D8               	btfsc	status,2,c
  4053  0007DA  D0B0               	goto	l299
  4054  0007DC  D7F0               	goto	l278
  4055  0007DE                     l231:
  4056                           
  4057                           ; BSR set to: 0
  4058                           ;doprnt.c: 1246: }
  4059                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  4060                           
  4061                           ; BSR set to: 0
  4062  0007DE  51FD               	movf	sprintf@prec& (0+255),w,b
  4063  0007E0  11FE               	iorwf	(sprintf@prec+1)& (0+255),w,b
  4064  0007E2  A4D8               	btfss	status,2,c
  4065  0007E4  D008               	goto	l280
  4066                           
  4067                           ; BSR set to: 0
  4068  0007E6  51EC               	movf	sprintf@val& (0+255),w,b
  4069  0007E8  11ED               	iorwf	(sprintf@val+1)& (0+255),w,b
  4070  0007EA  11EE               	iorwf	(sprintf@val+2)& (0+255),w,b
  4071  0007EC  11EF               	iorwf	(sprintf@val+3)& (0+255),w,b
  4072  0007EE  A4D8               	btfss	status,2,c
  4073  0007F0  D002               	goto	l280
  4074                           
  4075                           ; BSR set to: 0
  4076                           ;doprnt.c: 1291: prec++;
  4077  0007F2  4BFD               	infsnz	sprintf@prec& (0+255),f,b
  4078  0007F4  2BFE               	incf	(sprintf@prec+1)& (0+255),f,b
  4079  0007F6                     l280:
  4080                           
  4081                           ; BSR set to: 0
  4082                           ;doprnt.c: 1339: if(c < prec)
  4083                           
  4084                           ; BSR set to: 0
  4085  0007F6  0E80               	movlw	128
  4086  0007F8  BFFF               	btfsc	sprintf@c& (0+255),7,b
  4087  0007FA  0E7F               	movlw	127
  4088  0007FC  6FE1               	movwf	??_sprintf& (0+255),b
  4089  0007FE  51FD               	movf	sprintf@prec& (0+255),w,b
  4090  000800  5DFF               	subwf	sprintf@c& (0+255),w,b
  4091  000802  51FE               	movf	(sprintf@prec+1)& (0+255),w,b
  4092  000804  0A80               	xorlw	128
  4093  000806  59E1               	subwfb	??_sprintf& (0+255),w,b
  4094  000808  B0D8               	btfsc	status,0,c
  4095  00080A  D003               	goto	l281
  4096                           
  4097                           ; BSR set to: 0
  4098                           ;doprnt.c: 1340: c = prec;
  4099  00080C  C0FD  F0FF         	movff	sprintf@prec,sprintf@c
  4100  000810  D010               	goto	l283
  4101  000812                     l281:
  4102                           
  4103                           ; BSR set to: 0
  4104                           ;doprnt.c: 1341: else if(prec < c)
  4105                           
  4106                           ; BSR set to: 0
  4107  000812  51FE               	movf	(sprintf@prec+1)& (0+255),w,b
  4108  000814  0A80               	xorlw	128
  4109  000816  6FE1               	movwf	??_sprintf& (0+255),b
  4110  000818  51FF               	movf	sprintf@c& (0+255),w,b
  4111  00081A  5DFD               	subwf	sprintf@prec& (0+255),w,b
  4112  00081C  0E80               	movlw	128
  4113  00081E  BFFF               	btfsc	sprintf@c& (0+255),7,b
  4114  000820  0E7F               	movlw	127
  4115  000822  59E1               	subwfb	??_sprintf& (0+255),w,b
  4116  000824  B0D8               	btfsc	status,0,c
  4117  000826  D005               	goto	l283
  4118                           
  4119                           ; BSR set to: 0
  4120                           ;doprnt.c: 1342: prec = c;
  4121  000828  51FF               	movf	sprintf@c& (0+255),w,b
  4122  00082A  6FFD               	movwf	sprintf@prec& (0+255),b
  4123  00082C  6BFE               	clrf	(sprintf@prec+1)& (0+255),b
  4124  00082E  BFFD               	btfsc	sprintf@prec& (0+255),7,b
  4125  000830  07FE               	decf	(sprintf@prec+1)& (0+255),f,b
  4126  000832                     l283:
  4127                           
  4128                           ; BSR set to: 0
  4129                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4130                           
  4131                           ; BSR set to: 0
  4132                           
  4133                           ; BSR set to: 0
  4134  000832  51F8               	movf	sprintf@width& (0+255),w,b
  4135  000834  11F9               	iorwf	(sprintf@width+1)& (0+255),w,b
  4136  000836  B4D8               	btfsc	status,2,c
  4137  000838  D00D               	goto	l284
  4138                           
  4139                           ; BSR set to: 0
  4140  00083A  0E03               	movlw	3
  4141  00083C  15F6               	andwf	sprintf@flag& (0+255),w,b
  4142  00083E  6FE1               	movwf	??_sprintf& (0+255),b
  4143  000840  0E00               	movlw	0
  4144  000842  15F7               	andwf	(sprintf@flag+1)& (0+255),w,b
  4145  000844  6FE2               	movwf	(??_sprintf+1)& (0+255),b
  4146  000846  51E1               	movf	??_sprintf& (0+255),w,b
  4147  000848  11E2               	iorwf	(??_sprintf+1)& (0+255),w,b
  4148  00084A  B4D8               	btfsc	status,2,c
  4149  00084C  D003               	goto	l284
  4150                           
  4151                           ; BSR set to: 0
  4152                           ;doprnt.c: 1346: width--;
  4153  00084E  07F8               	decf	sprintf@width& (0+255),f,b
  4154  000850  A0D8               	btfss	status,0,c
  4155  000852  07F9               	decf	(sprintf@width+1)& (0+255),f,b
  4156  000854                     l284:
  4157                           
  4158                           ; BSR set to: 0
  4159                           ;doprnt.c: 1348: if(flag & 0x4000) {
  4160                           
  4161                           ; BSR set to: 0
  4162  000854  ADF7               	btfss	(sprintf@flag+1)& (0+255),6,b
  4163  000856  D013               	goto	l287
  4164                           
  4165                           ; BSR set to: 0
  4166                           ;doprnt.c: 1349: if(width > prec)
  4167  000858  51F8               	movf	sprintf@width& (0+255),w,b
  4168  00085A  5DFD               	subwf	sprintf@prec& (0+255),w,b
  4169  00085C  51FE               	movf	(sprintf@prec+1)& (0+255),w,b
  4170  00085E  0A80               	xorlw	128
  4171  000860  6FE1               	movwf	??_sprintf& (0+255),b
  4172  000862  51F9               	movf	(sprintf@width+1)& (0+255),w,b
  4173  000864  0A80               	xorlw	128
  4174  000866  59E1               	subwfb	??_sprintf& (0+255),w,b
  4175  000868  B0D8               	btfsc	status,0,c
  4176  00086A  D005               	goto	l286
  4177                           
  4178                           ; BSR set to: 0
  4179                           ;doprnt.c: 1350: width -= prec;
  4180  00086C  51FD               	movf	sprintf@prec& (0+255),w,b
  4181  00086E  5FF8               	subwf	sprintf@width& (0+255),f,b
  4182  000870  51FE               	movf	(sprintf@prec+1)& (0+255),w,b
  4183  000872  5BF9               	subwfb	(sprintf@width+1)& (0+255),f,b
  4184  000874  D004               	goto	l287
  4185  000876                     l286:
  4186                           
  4187                           ; BSR set to: 0
  4188                           ;doprnt.c: 1351: else
  4189                           ;doprnt.c: 1352: width = 0;
  4190                           
  4191                           ; BSR set to: 0
  4192  000876  0E00               	movlw	0
  4193  000878  6FF9               	movwf	(sprintf@width+1)& (0+255),b
  4194  00087A  0E00               	movlw	0
  4195  00087C  6FF8               	movwf	sprintf@width& (0+255),b
  4196  00087E                     l287:
  4197                           
  4198                           ; BSR set to: 0
  4199                           ;doprnt.c: 1353: }
  4200                           ;doprnt.c: 1381: if(width > c)
  4201                           
  4202                           ; BSR set to: 0
  4203                           
  4204                           ; BSR set to: 0
  4205  00087E  0E80               	movlw	128
  4206  000880  BFFF               	btfsc	sprintf@c& (0+255),7,b
  4207  000882  0E7F               	movlw	127
  4208  000884  6FE1               	movwf	??_sprintf& (0+255),b
  4209  000886  51F8               	movf	sprintf@width& (0+255),w,b
  4210  000888  5DFF               	subwf	sprintf@c& (0+255),w,b
  4211  00088A  51F9               	movf	(sprintf@width+1)& (0+255),w,b
  4212  00088C  0A80               	xorlw	128
  4213  00088E  59E1               	subwfb	??_sprintf& (0+255),w,b
  4214  000890  B0D8               	btfsc	status,0,c
  4215  000892  D007               	goto	l288
  4216                           
  4217                           ; BSR set to: 0
  4218                           ;doprnt.c: 1382: width -= c;
  4219  000894  51FF               	movf	sprintf@c& (0+255),w,b
  4220  000896  5FF8               	subwf	sprintf@width& (0+255),f,b
  4221  000898  0E00               	movlw	0
  4222  00089A  BFFF               	btfsc	sprintf@c& (0+255),7,b
  4223  00089C  0EFF               	movlw	255
  4224  00089E  5BF9               	subwfb	(sprintf@width+1)& (0+255),f,b
  4225  0008A0  D004               	goto	l289
  4226  0008A2                     l288:
  4227                           
  4228                           ; BSR set to: 0
  4229                           ;doprnt.c: 1383: else
  4230                           ;doprnt.c: 1384: width = 0;
  4231                           
  4232                           ; BSR set to: 0
  4233  0008A2  0E00               	movlw	0
  4234  0008A4  6FF9               	movwf	(sprintf@width+1)& (0+255),b
  4235  0008A6  0E00               	movlw	0
  4236  0008A8  6FF8               	movwf	sprintf@width& (0+255),b
  4237  0008AA                     l289:
  4238                           
  4239                           ; BSR set to: 0
  4240                           ;doprnt.c: 1387: if(flag & 0x04) {
  4241                           
  4242                           ; BSR set to: 0
  4243  0008AA  A5F6               	btfss	sprintf@flag& (0+255),2,b
  4244  0008AC  D022               	goto	l290
  4245                           
  4246                           ; BSR set to: 0
  4247                           ;doprnt.c: 1392: if(flag & 0x03)
  4248  0008AE  0E03               	movlw	3
  4249  0008B0  15F6               	andwf	sprintf@flag& (0+255),w,b
  4250  0008B2  6FE1               	movwf	??_sprintf& (0+255),b
  4251  0008B4  0E00               	movlw	0
  4252  0008B6  15F7               	andwf	(sprintf@flag+1)& (0+255),w,b
  4253  0008B8  6FE2               	movwf	(??_sprintf+1)& (0+255),b
  4254  0008BA  51E1               	movf	??_sprintf& (0+255),w,b
  4255  0008BC  11E2               	iorwf	(??_sprintf+1)& (0+255),w,b
  4256  0008BE  B4D8               	btfsc	status,2,c
  4257  0008C0  D008               	goto	l291
  4258                           
  4259                           ; BSR set to: 0
  4260                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  4261  0008C2  C0DA  FFD9         	movff	sprintf@sp,fsr2l
  4262  0008C6  C0DB  FFDA         	movff	sprintf@sp+1,fsr2h
  4263  0008CA  0E2D               	movlw	45
  4264  0008CC  6EDF               	movwf	indf2,c
  4265                           
  4266                           ; BSR set to: 0
  4267  0008CE  4BDA               	infsnz	sprintf@sp& (0+255),f,b
  4268  0008D0  2BDB               	incf	(sprintf@sp+1)& (0+255),f,b
  4269  0008D2                     l291:
  4270                           
  4271                           ; BSR set to: 0
  4272                           ;doprnt.c: 1415: if(width)
  4273                           
  4274                           ; BSR set to: 0
  4275  0008D2  51F8               	movf	sprintf@width& (0+255),w,b
  4276  0008D4  11F9               	iorwf	(sprintf@width+1)& (0+255),w,b
  4277  0008D6  B4D8               	btfsc	status,2,c
  4278  0008D8  D031               	goto	l299
  4279                           
  4280                           ; BSR set to: 0
  4281                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  4282                           
  4283                           ; BSR set to: 0
  4284                           
  4285                           ;doprnt.c: 1416: do
  4286  0008DA  C0DA  FFD9         	movff	sprintf@sp,fsr2l
  4287  0008DE  C0DB  FFDA         	movff	sprintf@sp+1,fsr2h
  4288  0008E2  0E30               	movlw	48
  4289  0008E4  6EDF               	movwf	indf2,c
  4290                           
  4291                           ; BSR set to: 0
  4292  0008E6  4BDA               	infsnz	sprintf@sp& (0+255),f,b
  4293  0008E8  2BDB               	incf	(sprintf@sp+1)& (0+255),f,b
  4294                           
  4295                           ; BSR set to: 0
  4296                           ;doprnt.c: 1418: while(--width);
  4297  0008EA  07F8               	decf	sprintf@width& (0+255),f,b
  4298  0008EC  A0D8               	btfss	status,0,c
  4299  0008EE  07F9               	decf	(sprintf@width+1)& (0+255),f,b
  4300  0008F0  D7F0               	goto	l291
  4301  0008F2                     l290:
  4302                           
  4303                           ; BSR set to: 0
  4304                           ;doprnt.c: 1422: {
  4305                           ;doprnt.c: 1424: if(width
  4306                           ;doprnt.c: 1428: )
  4307                           
  4308                           ; BSR set to: 0
  4309  0008F2  51F8               	movf	sprintf@width& (0+255),w,b
  4310  0008F4  11F9               	iorwf	(sprintf@width+1)& (0+255),w,b
  4311  0008F6  B4D8               	btfsc	status,2,c
  4312  0008F8  D00F               	goto	u4940
  4313  0008FA                     u4930:
  4314                           
  4315                           ; BSR set to: 0
  4316                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  4317                           
  4318                           ; BSR set to: 0
  4319                           
  4320                           ;doprnt.c: 1429: do
  4321  0008FA  C0DA  FFD9         	movff	sprintf@sp,fsr2l
  4322  0008FE  C0DB  FFDA         	movff	sprintf@sp+1,fsr2h
  4323  000902  0E20               	movlw	32
  4324  000904  6EDF               	movwf	indf2,c
  4325                           
  4326                           ; BSR set to: 0
  4327  000906  4BDA               	infsnz	sprintf@sp& (0+255),f,b
  4328  000908  2BDB               	incf	(sprintf@sp+1)& (0+255),f,b
  4329                           
  4330                           ; BSR set to: 0
  4331                           ;doprnt.c: 1431: while(--width);
  4332  00090A  07F8               	decf	sprintf@width& (0+255),f,b
  4333  00090C  A0D8               	btfss	status,0,c
  4334  00090E  07F9               	decf	(sprintf@width+1)& (0+255),f,b
  4335  000910  51F8               	movf	sprintf@width& (0+255),w,b
  4336  000912  11F9               	iorwf	(sprintf@width+1)& (0+255),w,b
  4337  000914  A4D8               	btfss	status,2,c
  4338  000916  D7F1               	goto	u4930
  4339  000918                     u4940:
  4340                           
  4341                           ; BSR set to: 0
  4342                           ;doprnt.c: 1438: if(flag & 0x03)
  4343                           
  4344                           ; BSR set to: 0
  4345                           
  4346                           ; BSR set to: 0
  4347  000918  0E03               	movlw	3
  4348  00091A  15F6               	andwf	sprintf@flag& (0+255),w,b
  4349  00091C  6FE1               	movwf	??_sprintf& (0+255),b
  4350  00091E  0E00               	movlw	0
  4351  000920  15F7               	andwf	(sprintf@flag+1)& (0+255),w,b
  4352  000922  6FE2               	movwf	(??_sprintf+1)& (0+255),b
  4353  000924  51E1               	movf	??_sprintf& (0+255),w,b
  4354  000926  11E2               	iorwf	(??_sprintf+1)& (0+255),w,b
  4355  000928  B4D8               	btfsc	status,2,c
  4356  00092A  D008               	goto	l299
  4357                           
  4358                           ; BSR set to: 0
  4359                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  4360  00092C  C0DA  FFD9         	movff	sprintf@sp,fsr2l
  4361  000930  C0DB  FFDA         	movff	sprintf@sp+1,fsr2h
  4362  000934  0E2D               	movlw	45
  4363  000936  6EDF               	movwf	indf2,c
  4364  000938                     l4113:
  4365                           
  4366                           ; BSR set to: 0
  4367  000938  4BDA               	infsnz	sprintf@sp& (0+255),f,b
  4368  00093A  2BDB               	incf	(sprintf@sp+1)& (0+255),f,b
  4369  00093C                     l299:
  4370                           
  4371                           ; BSR set to: 0
  4372                           
  4373                           ; BSR set to: 0
  4374                           
  4375                           ; BSR set to: 0
  4376                           
  4377                           ; BSR set to: 0
  4378  00093C  C0DC  FFF6         	movff	sprintf@f,tblptrl
  4379  000940  C0DD  FFF7         	movff	sprintf@f+1,tblptrh
  4380  000944  4BDC               	infsnz	sprintf@f& (0+255),f,b
  4381  000946  2BDD               	incf	(sprintf@f+1)& (0+255),f,b
  4382  000948                     	if	0	;tblptru may be non-zero
  4383  000948                     	endif
  4384  000948                     	if	0	;tblptru may be non-zero
  4385  000948                     	endif
  4386  000948  0008               	tblrd		*
  4387  00094A  CFF5 F0FF          	movff	tablat,sprintf@c
  4388  00094E  51FF               	movf	sprintf@c& (0+255),w,b
  4389  000950  A4D8               	btfss	status,2,c
  4390  000952  EF10  F000         	goto	l209
  4391  000956                     u4960:
  4392                           
  4393                           ; BSR set to: 0
  4394                           ;doprnt.c: 1538: *sp = 0;
  4395                           
  4396                           ; BSR set to: 0
  4397                           
  4398                           ;doprnt.c: 1469: }
  4399                           ;doprnt.c: 1533: }
  4400                           ;doprnt.c: 1535: alldone:
  4401                           
  4402                           ; BSR set to: 0
  4403  000956  C0DA  FFD9         	movff	sprintf@sp,fsr2l
  4404  00095A  C0DB  FFDA         	movff	sprintf@sp+1,fsr2h
  4405  00095E  0E00               	movlw	0
  4406  000960  6EDF               	movwf	indf2,c
  4407  000962  0012               	return	
  4408  000964                     __end_of_sprintf:
  4409                           	opt stack 0
  4410                           tblptru	equ	0xFF8
  4411                           tblptrh	equ	0xFF7
  4412                           tblptrl	equ	0xFF6
  4413                           tablat	equ	0xFF5
  4414                           prodh	equ	0xFF4
  4415                           prodl	equ	0xFF3
  4416                           intcon	equ	0xFF2
  4417                           intcon2	equ	0xFF1
  4418                           postinc0	equ	0xFEE
  4419                           wreg	equ	0xFE8
  4420                           indf1	equ	0xFE7
  4421                           plusw1	equ	0xFE3
  4422                           fsr1h	equ	0xFE2
  4423                           fsr1l	equ	0xFE1
  4424                           indf2	equ	0xFDF
  4425                           postinc2	equ	0xFDE
  4426                           postdec2	equ	0xFDD
  4427                           plusw2	equ	0xFDB
  4428                           fsr2h	equ	0xFDA
  4429                           fsr2l	equ	0xFD9
  4430                           status	equ	0xFD8
  4431                           
  4432 ;; *************** function _scale *****************
  4433 ;; Defined at:
  4434 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  4435 ;; Parameters:    Size  Location     Type
  4436 ;;  scl             1    wreg     char 
  4437 ;; Auto vars:     Size  Location     Type
  4438 ;;  scl             1   60[COMRAM] char 
  4439 ;; Return value:  Size  Location     Type
  4440 ;;                  3   54[COMRAM] char 
  4441 ;; Registers used:
  4442 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4443 ;; Tracked objects:
  4444 ;;		On entry : 0/0
  4445 ;;		On exit  : 0/0
  4446 ;;		Unchanged: 0/0
  4447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4448 ;;      Params:         3       0       0       0       0       0       0       0       0
  4449 ;;      Locals:         4       0       0       0       0       0       0       0       0
  4450 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4451 ;;      Totals:         7       0       0       0       0       0       0       0       0
  4452 ;;Total ram usage:        7 bytes
  4453 ;; Hardware stack levels used:    1
  4454 ;; Hardware stack levels required when called:    4
  4455 ;; This function calls:
  4456 ;;		___awdiv
  4457 ;;		___awmod
  4458 ;;		___ftmul
  4459 ;;		___wmul
  4460 ;; This function is called by:
  4461 ;;		_sprintf
  4462 ;; This function uses a non-reentrant model
  4463 ;;
  4464                           
  4465                           	psect	text14
  4466  000964                     __ptext14:
  4467                           	opt stack 0
  4468  000964                     _scale:
  4469                           	opt stack 25
  4470                           
  4471                           ; BSR set to: 0
  4472                           ;incstack = 0
  4473                           ;scale@scl stored from wreg
  4474  000964  6E3D               	movwf	scale@scl,c
  4475                           
  4476                           ;doprnt.c: 428: if(scl < 0) {
  4477  000966  AE3D               	btfss	scale@scl,7,c
  4478  000968  D101               	goto	l198
  4479                           
  4480                           ;doprnt.c: 429: scl = -scl;
  4481  00096A  6C3D               	negf	scale@scl,c
  4482                           
  4483                           ;doprnt.c: 430: if(scl>=110)
  4484  00096C  503D               	movf	scale@scl,w,c
  4485  00096E  0A80               	xorlw	128
  4486  000970  0F12               	addlw	-238
  4487  000972  A0D8               	btfss	status,0,c
  4488  000974  D091               	goto	l199
  4489                           
  4490                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4491  000976  0E00               	movlw	0
  4492  000978  6E25               	movwf	___wmul@multiplicand+1,c
  4493  00097A  0E03               	movlw	3
  4494  00097C  6E24               	movwf	___wmul@multiplicand,c
  4495  00097E  0E00               	movlw	0
  4496  000980  6E1D               	movwf	___awdiv@divisor+1,c
  4497  000982  0E0A               	movlw	10
  4498  000984  6E1C               	movwf	___awdiv@divisor,c
  4499  000986  0E00               	movlw	0
  4500  000988  6E17               	movwf	___awmod@divisor+1,c
  4501  00098A  0E64               	movlw	100
  4502  00098C  6E16               	movwf	___awmod@divisor,c
  4503  00098E  503D               	movf	scale@scl,w,c
  4504  000990  6E14               	movwf	___awmod@dividend,c
  4505  000992  6A15               	clrf	___awmod@dividend+1,c
  4506  000994  BE14               	btfsc	___awmod@dividend,7,c
  4507  000996  0615               	decf	___awmod@dividend+1,f,c
  4508  000998  ECB5  F00E         	call	___awmod	;wreg free
  4509  00099C  C014  F01A         	movff	?___awmod,___awdiv@dividend
  4510  0009A0  C015  F01B         	movff	?___awmod+1,___awdiv@dividend+1
  4511  0009A4  EC32  F00E         	call	___awdiv	;wreg free
  4512  0009A8  0E09               	movlw	9
  4513  0009AA  241A               	addwf	?___awdiv,w,c
  4514  0009AC  6E22               	movwf	___wmul@multiplier,c
  4515  0009AE  0E00               	movlw	0
  4516  0009B0  201B               	addwfc	?___awdiv+1,w,c
  4517  0009B2  6E23               	movwf	___wmul@multiplier+1,c
  4518  0009B4  EC2E  F011         	call	___wmul	;wreg free
  4519  0009B8  0E2C               	movlw	low __npowers_
  4520  0009BA  2422               	addwf	?___wmul,w,c
  4521  0009BC  6EF6               	movwf	tblptrl,c
  4522  0009BE  0E5F               	movlw	high __npowers_
  4523  0009C0  2023               	addwfc	?___wmul+1,w,c
  4524  0009C2  6EF7               	movwf	tblptrh,c
  4525  0009C4                     	if	0	;There are less than 3 active tblptr bytes
  4526  0009C4                     	endif
  4527  0009C4  0009               	tblrd		*+
  4528  0009C6  CFF5 F02B          	movff	tablat,___ftmul@f2
  4529  0009CA  0009               	tblrd		*+
  4530  0009CC  CFF5 F02C          	movff	tablat,___ftmul@f2+1
  4531  0009D0  000A               	tblrd		*-
  4532  0009D2  CFF5 F02D          	movff	tablat,___ftmul@f2+2
  4533  0009D6  0E00               	movlw	0
  4534  0009D8  6E1D               	movwf	___awdiv@divisor+1,c
  4535  0009DA  0E64               	movlw	100
  4536  0009DC  6E1C               	movwf	___awdiv@divisor,c
  4537  0009DE  503D               	movf	scale@scl,w,c
  4538  0009E0  6E1A               	movwf	___awdiv@dividend,c
  4539  0009E2  6A1B               	clrf	___awdiv@dividend+1,c
  4540  0009E4  BE1A               	btfsc	___awdiv@dividend,7,c
  4541  0009E6  061B               	decf	___awdiv@dividend+1,f,c
  4542  0009E8  EC32  F00E         	call	___awdiv	;wreg free
  4543  0009EC  0E12               	movlw	18
  4544  0009EE  241A               	addwf	?___awdiv,w,c
  4545  0009F0  6E22               	movwf	___wmul@multiplier,c
  4546  0009F2  0E00               	movlw	0
  4547  0009F4  201B               	addwfc	?___awdiv+1,w,c
  4548  0009F6  6E23               	movwf	___wmul@multiplier+1,c
  4549  0009F8  0E00               	movlw	0
  4550  0009FA  6E25               	movwf	___wmul@multiplicand+1,c
  4551  0009FC  0E03               	movlw	3
  4552  0009FE  6E24               	movwf	___wmul@multiplicand,c
  4553  000A00  EC2E  F011         	call	___wmul	;wreg free
  4554  000A04  0E2C               	movlw	low __npowers_
  4555  000A06  2422               	addwf	?___wmul,w,c
  4556  000A08  6EF6               	movwf	tblptrl,c
  4557  000A0A  0E5F               	movlw	high __npowers_
  4558  000A0C  2023               	addwfc	?___wmul+1,w,c
  4559  000A0E  6EF7               	movwf	tblptrh,c
  4560  000A10                     	if	0	;There are less than 3 active tblptr bytes
  4561  000A10                     	endif
  4562  000A10  0009               	tblrd		*+
  4563  000A12  CFF5 F028          	movff	tablat,___ftmul@f1
  4564  000A16  0009               	tblrd		*+
  4565  000A18  CFF5 F029          	movff	tablat,___ftmul@f1+1
  4566  000A1C  000A               	tblrd		*-
  4567  000A1E  CFF5 F02A          	movff	tablat,___ftmul@f1+2
  4568  000A22  EC03  F00C         	call	___ftmul	;wreg free
  4569  000A26  C028  F03A         	movff	?___ftmul,_scale$1539
  4570  000A2A  C029  F03B         	movff	?___ftmul+1,_scale$1539+1
  4571  000A2E  C02A  F03C         	movff	?___ftmul+2,_scale$1539+2
  4572                           
  4573                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4574  000A32  C03A  F028         	movff	_scale$1539,___ftmul@f1
  4575  000A36  C03B  F029         	movff	_scale$1539+1,___ftmul@f1+1
  4576  000A3A  C03C  F02A         	movff	_scale$1539+2,___ftmul@f1+2
  4577  000A3E  0E00               	movlw	0
  4578  000A40  6E25               	movwf	___wmul@multiplicand+1,c
  4579  000A42  0E03               	movlw	3
  4580  000A44  6E24               	movwf	___wmul@multiplicand,c
  4581  000A46  0E00               	movlw	0
  4582  000A48  6E17               	movwf	___awmod@divisor+1,c
  4583  000A4A  0E0A               	movlw	10
  4584  000A4C  6E16               	movwf	___awmod@divisor,c
  4585  000A4E  503D               	movf	scale@scl,w,c
  4586  000A50  6E14               	movwf	___awmod@dividend,c
  4587  000A52  6A15               	clrf	___awmod@dividend+1,c
  4588  000A54  BE14               	btfsc	___awmod@dividend,7,c
  4589  000A56  0615               	decf	___awmod@dividend+1,f,c
  4590  000A58  ECB5  F00E         	call	___awmod	;wreg free
  4591  000A5C  C014  F022         	movff	?___awmod,___wmul@multiplier
  4592  000A60  C015  F023         	movff	?___awmod+1,___wmul@multiplier+1
  4593  000A64  EC2E  F011         	call	___wmul	;wreg free
  4594  000A68  0E2C               	movlw	low __npowers_
  4595  000A6A  2422               	addwf	?___wmul,w,c
  4596  000A6C  6EF6               	movwf	tblptrl,c
  4597  000A6E  0E5F               	movlw	high __npowers_
  4598  000A70  2023               	addwfc	?___wmul+1,w,c
  4599  000A72  6EF7               	movwf	tblptrh,c
  4600  000A74                     	if	0	;There are less than 3 active tblptr bytes
  4601  000A74                     	endif
  4602  000A74  0009               	tblrd		*+
  4603  000A76  CFF5 F02B          	movff	tablat,___ftmul@f2
  4604  000A7A  0009               	tblrd		*+
  4605  000A7C  CFF5 F02C          	movff	tablat,___ftmul@f2+1
  4606  000A80  000A               	tblrd		*-
  4607  000A82  CFF5 F02D          	movff	tablat,___ftmul@f2+2
  4608  000A86  EC03  F00C         	call	___ftmul	;wreg free
  4609  000A8A  C028  F037         	movff	?___ftmul,?_scale
  4610  000A8E  C029  F038         	movff	?___ftmul+1,?_scale+1
  4611  000A92  C02A  F039         	movff	?___ftmul+2,?_scale+2
  4612  000A96  0012               	return	
  4613  000A98                     l199:
  4614                           
  4615                           ;doprnt.c: 432: else if(scl > 10)
  4616  000A98  503D               	movf	scale@scl,w,c
  4617  000A9A  0A80               	xorlw	128
  4618  000A9C  0F75               	addlw	-139
  4619  000A9E  A0D8               	btfss	status,0,c
  4620  000AA0  D053               	goto	l202
  4621                           
  4622                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  4623  000AA2  0E00               	movlw	0
  4624  000AA4  6E1D               	movwf	___awdiv@divisor+1,c
  4625  000AA6  0E0A               	movlw	10
  4626  000AA8  6E1C               	movwf	___awdiv@divisor,c
  4627  000AAA  503D               	movf	scale@scl,w,c
  4628  000AAC  6E1A               	movwf	___awdiv@dividend,c
  4629  000AAE  6A1B               	clrf	___awdiv@dividend+1,c
  4630  000AB0  BE1A               	btfsc	___awdiv@dividend,7,c
  4631  000AB2  061B               	decf	___awdiv@dividend+1,f,c
  4632  000AB4  EC32  F00E         	call	___awdiv	;wreg free
  4633  000AB8  0E09               	movlw	9
  4634  000ABA  241A               	addwf	?___awdiv,w,c
  4635  000ABC  6E22               	movwf	___wmul@multiplier,c
  4636  000ABE  0E00               	movlw	0
  4637  000AC0  201B               	addwfc	?___awdiv+1,w,c
  4638  000AC2  6E23               	movwf	___wmul@multiplier+1,c
  4639  000AC4  0E00               	movlw	0
  4640  000AC6  6E25               	movwf	___wmul@multiplicand+1,c
  4641  000AC8  0E03               	movlw	3
  4642  000ACA  6E24               	movwf	___wmul@multiplicand,c
  4643  000ACC  EC2E  F011         	call	___wmul	;wreg free
  4644  000AD0  0E2C               	movlw	low __npowers_
  4645  000AD2  2422               	addwf	?___wmul,w,c
  4646  000AD4  6EF6               	movwf	tblptrl,c
  4647  000AD6  0E5F               	movlw	high __npowers_
  4648  000AD8  2023               	addwfc	?___wmul+1,w,c
  4649  000ADA  6EF7               	movwf	tblptrh,c
  4650  000ADC                     	if	0	;There are less than 3 active tblptr bytes
  4651  000ADC                     	endif
  4652  000ADC  0009               	tblrd		*+
  4653  000ADE  CFF5 F028          	movff	tablat,___ftmul@f1
  4654  000AE2  0009               	tblrd		*+
  4655  000AE4  CFF5 F029          	movff	tablat,___ftmul@f1+1
  4656  000AE8  000A               	tblrd		*-
  4657  000AEA  CFF5 F02A          	movff	tablat,___ftmul@f1+2
  4658  000AEE  0E00               	movlw	0
  4659  000AF0  6E25               	movwf	___wmul@multiplicand+1,c
  4660  000AF2  0E03               	movlw	3
  4661  000AF4  6E24               	movwf	___wmul@multiplicand,c
  4662  000AF6  0E00               	movlw	0
  4663  000AF8  6E17               	movwf	___awmod@divisor+1,c
  4664  000AFA  0E0A               	movlw	10
  4665  000AFC  6E16               	movwf	___awmod@divisor,c
  4666  000AFE  503D               	movf	scale@scl,w,c
  4667  000B00  6E14               	movwf	___awmod@dividend,c
  4668  000B02  6A15               	clrf	___awmod@dividend+1,c
  4669  000B04  BE14               	btfsc	___awmod@dividend,7,c
  4670  000B06  0615               	decf	___awmod@dividend+1,f,c
  4671  000B08  ECB5  F00E         	call	___awmod	;wreg free
  4672  000B0C  C014  F022         	movff	?___awmod,___wmul@multiplier
  4673  000B10  C015  F023         	movff	?___awmod+1,___wmul@multiplier+1
  4674  000B14  EC2E  F011         	call	___wmul	;wreg free
  4675  000B18  0E2C               	movlw	low __npowers_
  4676  000B1A  2422               	addwf	?___wmul,w,c
  4677  000B1C  6EF6               	movwf	tblptrl,c
  4678  000B1E  0E5F               	movlw	high __npowers_
  4679  000B20  2023               	addwfc	?___wmul+1,w,c
  4680  000B22  6EF7               	movwf	tblptrh,c
  4681  000B24                     	if	0	;There are less than 3 active tblptr bytes
  4682  000B24                     	endif
  4683  000B24  0009               	tblrd		*+
  4684  000B26  CFF5 F02B          	movff	tablat,___ftmul@f2
  4685  000B2A  0009               	tblrd		*+
  4686  000B2C  CFF5 F02C          	movff	tablat,___ftmul@f2+1
  4687  000B30  000A               	tblrd		*-
  4688  000B32  CFF5 F02D          	movff	tablat,___ftmul@f2+2
  4689  000B36  EC03  F00C         	call	___ftmul	;wreg free
  4690  000B3A  C028  F037         	movff	?___ftmul,?_scale
  4691  000B3E  C029  F038         	movff	?___ftmul+1,?_scale+1
  4692  000B42  C02A  F039         	movff	?___ftmul+2,?_scale+2
  4693  000B46  0012               	return	
  4694  000B48                     l202:
  4695                           
  4696                           ;doprnt.c: 434: return _npowers_[scl];
  4697  000B48  503D               	movf	scale@scl,w,c
  4698  000B4A  0D03               	mullw	3
  4699  000B4C  0E2C               	movlw	low __npowers_
  4700  000B4E  24F3               	addwf	prodl,w,c
  4701  000B50  6EF6               	movwf	tblptrl,c
  4702  000B52  0E5F               	movlw	high __npowers_
  4703  000B54  20F4               	addwfc	prodh,w,c
  4704  000B56  6EF7               	movwf	tblptrh,c
  4705  000B58                     	if	0	;There are less than 3 active tblptr bytes
  4706  000B58                     	endif
  4707  000B58  0009               	tblrd		*+
  4708  000B5A  CFF5 F037          	movff	tablat,?_scale
  4709  000B5E  0009               	tblrd		*+
  4710  000B60  CFF5 F038          	movff	tablat,?_scale+1
  4711  000B64  000A               	tblrd		*-
  4712  000B66  CFF5 F039          	movff	tablat,?_scale+2
  4713  000B6A  0012               	return	
  4714  000B6C                     l198:
  4715                           
  4716                           ;doprnt.c: 435: }
  4717                           ;doprnt.c: 436: if(scl>=110)
  4718  000B6C  503D               	movf	scale@scl,w,c
  4719  000B6E  0A80               	xorlw	128
  4720  000B70  0F12               	addlw	-238
  4721  000B72  A0D8               	btfss	status,0,c
  4722  000B74  D091               	goto	l203
  4723                           
  4724                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4725  000B76  0E00               	movlw	0
  4726  000B78  6E25               	movwf	___wmul@multiplicand+1,c
  4727  000B7A  0E03               	movlw	3
  4728  000B7C  6E24               	movwf	___wmul@multiplicand,c
  4729  000B7E  0E00               	movlw	0
  4730  000B80  6E1D               	movwf	___awdiv@divisor+1,c
  4731  000B82  0E0A               	movlw	10
  4732  000B84  6E1C               	movwf	___awdiv@divisor,c
  4733  000B86  0E00               	movlw	0
  4734  000B88  6E17               	movwf	___awmod@divisor+1,c
  4735  000B8A  0E64               	movlw	100
  4736  000B8C  6E16               	movwf	___awmod@divisor,c
  4737  000B8E  503D               	movf	scale@scl,w,c
  4738  000B90  6E14               	movwf	___awmod@dividend,c
  4739  000B92  6A15               	clrf	___awmod@dividend+1,c
  4740  000B94  BE14               	btfsc	___awmod@dividend,7,c
  4741  000B96  0615               	decf	___awmod@dividend+1,f,c
  4742  000B98  ECB5  F00E         	call	___awmod	;wreg free
  4743  000B9C  C014  F01A         	movff	?___awmod,___awdiv@dividend
  4744  000BA0  C015  F01B         	movff	?___awmod+1,___awdiv@dividend+1
  4745  000BA4  EC32  F00E         	call	___awdiv	;wreg free
  4746  000BA8  0E09               	movlw	9
  4747  000BAA  241A               	addwf	?___awdiv,w,c
  4748  000BAC  6E22               	movwf	___wmul@multiplier,c
  4749  000BAE  0E00               	movlw	0
  4750  000BB0  201B               	addwfc	?___awdiv+1,w,c
  4751  000BB2  6E23               	movwf	___wmul@multiplier+1,c
  4752  000BB4  EC2E  F011         	call	___wmul	;wreg free
  4753  000BB8  0E05               	movlw	low __powers_
  4754  000BBA  2422               	addwf	?___wmul,w,c
  4755  000BBC  6EF6               	movwf	tblptrl,c
  4756  000BBE  0E5F               	movlw	high __powers_
  4757  000BC0  2023               	addwfc	?___wmul+1,w,c
  4758  000BC2  6EF7               	movwf	tblptrh,c
  4759  000BC4                     	if	0	;There are less than 3 active tblptr bytes
  4760  000BC4                     	endif
  4761  000BC4  0009               	tblrd		*+
  4762  000BC6  CFF5 F02B          	movff	tablat,___ftmul@f2
  4763  000BCA  0009               	tblrd		*+
  4764  000BCC  CFF5 F02C          	movff	tablat,___ftmul@f2+1
  4765  000BD0  000A               	tblrd		*-
  4766  000BD2  CFF5 F02D          	movff	tablat,___ftmul@f2+2
  4767  000BD6  0E00               	movlw	0
  4768  000BD8  6E1D               	movwf	___awdiv@divisor+1,c
  4769  000BDA  0E64               	movlw	100
  4770  000BDC  6E1C               	movwf	___awdiv@divisor,c
  4771  000BDE  503D               	movf	scale@scl,w,c
  4772  000BE0  6E1A               	movwf	___awdiv@dividend,c
  4773  000BE2  6A1B               	clrf	___awdiv@dividend+1,c
  4774  000BE4  BE1A               	btfsc	___awdiv@dividend,7,c
  4775  000BE6  061B               	decf	___awdiv@dividend+1,f,c
  4776  000BE8  EC32  F00E         	call	___awdiv	;wreg free
  4777  000BEC  0E12               	movlw	18
  4778  000BEE  241A               	addwf	?___awdiv,w,c
  4779  000BF0  6E22               	movwf	___wmul@multiplier,c
  4780  000BF2  0E00               	movlw	0
  4781  000BF4  201B               	addwfc	?___awdiv+1,w,c
  4782  000BF6  6E23               	movwf	___wmul@multiplier+1,c
  4783  000BF8  0E00               	movlw	0
  4784  000BFA  6E25               	movwf	___wmul@multiplicand+1,c
  4785  000BFC  0E03               	movlw	3
  4786  000BFE  6E24               	movwf	___wmul@multiplicand,c
  4787  000C00  EC2E  F011         	call	___wmul	;wreg free
  4788  000C04  0E05               	movlw	low __powers_
  4789  000C06  2422               	addwf	?___wmul,w,c
  4790  000C08  6EF6               	movwf	tblptrl,c
  4791  000C0A  0E5F               	movlw	high __powers_
  4792  000C0C  2023               	addwfc	?___wmul+1,w,c
  4793  000C0E  6EF7               	movwf	tblptrh,c
  4794  000C10                     	if	0	;There are less than 3 active tblptr bytes
  4795  000C10                     	endif
  4796  000C10  0009               	tblrd		*+
  4797  000C12  CFF5 F028          	movff	tablat,___ftmul@f1
  4798  000C16  0009               	tblrd		*+
  4799  000C18  CFF5 F029          	movff	tablat,___ftmul@f1+1
  4800  000C1C  000A               	tblrd		*-
  4801  000C1E  CFF5 F02A          	movff	tablat,___ftmul@f1+2
  4802  000C22  EC03  F00C         	call	___ftmul	;wreg free
  4803  000C26  C028  F03A         	movff	?___ftmul,_scale$1539
  4804  000C2A  C029  F03B         	movff	?___ftmul+1,_scale$1539+1
  4805  000C2E  C02A  F03C         	movff	?___ftmul+2,_scale$1539+2
  4806                           
  4807                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4808  000C32  C03A  F028         	movff	_scale$1539,___ftmul@f1
  4809  000C36  C03B  F029         	movff	_scale$1539+1,___ftmul@f1+1
  4810  000C3A  C03C  F02A         	movff	_scale$1539+2,___ftmul@f1+2
  4811  000C3E  0E00               	movlw	0
  4812  000C40  6E25               	movwf	___wmul@multiplicand+1,c
  4813  000C42  0E03               	movlw	3
  4814  000C44  6E24               	movwf	___wmul@multiplicand,c
  4815  000C46  0E00               	movlw	0
  4816  000C48  6E17               	movwf	___awmod@divisor+1,c
  4817  000C4A  0E0A               	movlw	10
  4818  000C4C  6E16               	movwf	___awmod@divisor,c
  4819  000C4E  503D               	movf	scale@scl,w,c
  4820  000C50  6E14               	movwf	___awmod@dividend,c
  4821  000C52  6A15               	clrf	___awmod@dividend+1,c
  4822  000C54  BE14               	btfsc	___awmod@dividend,7,c
  4823  000C56  0615               	decf	___awmod@dividend+1,f,c
  4824  000C58  ECB5  F00E         	call	___awmod	;wreg free
  4825  000C5C  C014  F022         	movff	?___awmod,___wmul@multiplier
  4826  000C60  C015  F023         	movff	?___awmod+1,___wmul@multiplier+1
  4827  000C64  EC2E  F011         	call	___wmul	;wreg free
  4828  000C68  0E05               	movlw	low __powers_
  4829  000C6A  2422               	addwf	?___wmul,w,c
  4830  000C6C  6EF6               	movwf	tblptrl,c
  4831  000C6E  0E5F               	movlw	high __powers_
  4832  000C70  2023               	addwfc	?___wmul+1,w,c
  4833  000C72  6EF7               	movwf	tblptrh,c
  4834  000C74                     	if	0	;There are less than 3 active tblptr bytes
  4835  000C74                     	endif
  4836  000C74  0009               	tblrd		*+
  4837  000C76  CFF5 F02B          	movff	tablat,___ftmul@f2
  4838  000C7A  0009               	tblrd		*+
  4839  000C7C  CFF5 F02C          	movff	tablat,___ftmul@f2+1
  4840  000C80  000A               	tblrd		*-
  4841  000C82  CFF5 F02D          	movff	tablat,___ftmul@f2+2
  4842  000C86  EC03  F00C         	call	___ftmul	;wreg free
  4843  000C8A  C028  F037         	movff	?___ftmul,?_scale
  4844  000C8E  C029  F038         	movff	?___ftmul+1,?_scale+1
  4845  000C92  C02A  F039         	movff	?___ftmul+2,?_scale+2
  4846  000C96  0012               	return	
  4847  000C98                     l203:
  4848                           
  4849                           ;doprnt.c: 438: else if(scl > 10)
  4850  000C98  503D               	movf	scale@scl,w,c
  4851  000C9A  0A80               	xorlw	128
  4852  000C9C  0F75               	addlw	-139
  4853  000C9E  A0D8               	btfss	status,0,c
  4854  000CA0  D053               	goto	l205
  4855                           
  4856                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  4857  000CA2  0E00               	movlw	0
  4858  000CA4  6E1D               	movwf	___awdiv@divisor+1,c
  4859  000CA6  0E0A               	movlw	10
  4860  000CA8  6E1C               	movwf	___awdiv@divisor,c
  4861  000CAA  503D               	movf	scale@scl,w,c
  4862  000CAC  6E1A               	movwf	___awdiv@dividend,c
  4863  000CAE  6A1B               	clrf	___awdiv@dividend+1,c
  4864  000CB0  BE1A               	btfsc	___awdiv@dividend,7,c
  4865  000CB2  061B               	decf	___awdiv@dividend+1,f,c
  4866  000CB4  EC32  F00E         	call	___awdiv	;wreg free
  4867  000CB8  0E09               	movlw	9
  4868  000CBA  241A               	addwf	?___awdiv,w,c
  4869  000CBC  6E22               	movwf	___wmul@multiplier,c
  4870  000CBE  0E00               	movlw	0
  4871  000CC0  201B               	addwfc	?___awdiv+1,w,c
  4872  000CC2  6E23               	movwf	___wmul@multiplier+1,c
  4873  000CC4  0E00               	movlw	0
  4874  000CC6  6E25               	movwf	___wmul@multiplicand+1,c
  4875  000CC8  0E03               	movlw	3
  4876  000CCA  6E24               	movwf	___wmul@multiplicand,c
  4877  000CCC  EC2E  F011         	call	___wmul	;wreg free
  4878  000CD0  0E05               	movlw	low __powers_
  4879  000CD2  2422               	addwf	?___wmul,w,c
  4880  000CD4  6EF6               	movwf	tblptrl,c
  4881  000CD6  0E5F               	movlw	high __powers_
  4882  000CD8  2023               	addwfc	?___wmul+1,w,c
  4883  000CDA  6EF7               	movwf	tblptrh,c
  4884  000CDC                     	if	0	;There are less than 3 active tblptr bytes
  4885  000CDC                     	endif
  4886  000CDC  0009               	tblrd		*+
  4887  000CDE  CFF5 F028          	movff	tablat,___ftmul@f1
  4888  000CE2  0009               	tblrd		*+
  4889  000CE4  CFF5 F029          	movff	tablat,___ftmul@f1+1
  4890  000CE8  000A               	tblrd		*-
  4891  000CEA  CFF5 F02A          	movff	tablat,___ftmul@f1+2
  4892  000CEE  0E00               	movlw	0
  4893  000CF0  6E25               	movwf	___wmul@multiplicand+1,c
  4894  000CF2  0E03               	movlw	3
  4895  000CF4  6E24               	movwf	___wmul@multiplicand,c
  4896  000CF6  0E00               	movlw	0
  4897  000CF8  6E17               	movwf	___awmod@divisor+1,c
  4898  000CFA  0E0A               	movlw	10
  4899  000CFC  6E16               	movwf	___awmod@divisor,c
  4900  000CFE  503D               	movf	scale@scl,w,c
  4901  000D00  6E14               	movwf	___awmod@dividend,c
  4902  000D02  6A15               	clrf	___awmod@dividend+1,c
  4903  000D04  BE14               	btfsc	___awmod@dividend,7,c
  4904  000D06  0615               	decf	___awmod@dividend+1,f,c
  4905  000D08  ECB5  F00E         	call	___awmod	;wreg free
  4906  000D0C  C014  F022         	movff	?___awmod,___wmul@multiplier
  4907  000D10  C015  F023         	movff	?___awmod+1,___wmul@multiplier+1
  4908  000D14  EC2E  F011         	call	___wmul	;wreg free
  4909  000D18  0E05               	movlw	low __powers_
  4910  000D1A  2422               	addwf	?___wmul,w,c
  4911  000D1C  6EF6               	movwf	tblptrl,c
  4912  000D1E  0E5F               	movlw	high __powers_
  4913  000D20  2023               	addwfc	?___wmul+1,w,c
  4914  000D22  6EF7               	movwf	tblptrh,c
  4915  000D24                     	if	0	;There are less than 3 active tblptr bytes
  4916  000D24                     	endif
  4917  000D24  0009               	tblrd		*+
  4918  000D26  CFF5 F02B          	movff	tablat,___ftmul@f2
  4919  000D2A  0009               	tblrd		*+
  4920  000D2C  CFF5 F02C          	movff	tablat,___ftmul@f2+1
  4921  000D30  000A               	tblrd		*-
  4922  000D32  CFF5 F02D          	movff	tablat,___ftmul@f2+2
  4923  000D36  EC03  F00C         	call	___ftmul	;wreg free
  4924  000D3A  C028  F037         	movff	?___ftmul,?_scale
  4925  000D3E  C029  F038         	movff	?___ftmul+1,?_scale+1
  4926  000D42  C02A  F039         	movff	?___ftmul+2,?_scale+2
  4927  000D46  0012               	return	
  4928  000D48                     l205:
  4929                           
  4930                           ;doprnt.c: 440: return _powers_[scl];
  4931  000D48  503D               	movf	scale@scl,w,c
  4932  000D4A  0D03               	mullw	3
  4933  000D4C  0E05               	movlw	low __powers_
  4934  000D4E  24F3               	addwf	prodl,w,c
  4935  000D50  6EF6               	movwf	tblptrl,c
  4936  000D52  0E5F               	movlw	high __powers_
  4937  000D54  20F4               	addwfc	prodh,w,c
  4938  000D56  6EF7               	movwf	tblptrh,c
  4939  000D58                     	if	0	;There are less than 3 active tblptr bytes
  4940  000D58                     	endif
  4941  000D58  0009               	tblrd		*+
  4942  000D5A  CFF5 F037          	movff	tablat,?_scale
  4943  000D5E  0009               	tblrd		*+
  4944  000D60  CFF5 F038          	movff	tablat,?_scale+1
  4945  000D64  000A               	tblrd		*-
  4946  000D66  CFF5 F039          	movff	tablat,?_scale+2
  4947  000D6A  0012               	return	
  4948  000D6C                     __end_of_scale:
  4949                           	opt stack 0
  4950                           tblptru	equ	0xFF8
  4951                           tblptrh	equ	0xFF7
  4952                           tblptrl	equ	0xFF6
  4953                           tablat	equ	0xFF5
  4954                           prodh	equ	0xFF4
  4955                           prodl	equ	0xFF3
  4956                           intcon	equ	0xFF2
  4957                           intcon2	equ	0xFF1
  4958                           postinc0	equ	0xFEE
  4959                           wreg	equ	0xFE8
  4960                           indf1	equ	0xFE7
  4961                           plusw1	equ	0xFE3
  4962                           fsr1h	equ	0xFE2
  4963                           fsr1l	equ	0xFE1
  4964                           indf2	equ	0xFDF
  4965                           postinc2	equ	0xFDE
  4966                           postdec2	equ	0xFDD
  4967                           plusw2	equ	0xFDB
  4968                           fsr2h	equ	0xFDA
  4969                           fsr2l	equ	0xFD9
  4970                           status	equ	0xFD8
  4971                           
  4972 ;; *************** function _fround *****************
  4973 ;; Defined at:
  4974 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  4975 ;; Parameters:    Size  Location     Type
  4976 ;;  prec            1    wreg     unsigned char 
  4977 ;; Auto vars:     Size  Location     Type
  4978 ;;  prec            1    6[BANK0 ] unsigned char 
  4979 ;; Return value:  Size  Location     Type
  4980 ;;                  3   54[COMRAM] unsigned char 
  4981 ;; Registers used:
  4982 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4983 ;; Tracked objects:
  4984 ;;		On entry : 0/0
  4985 ;;		On exit  : 0/0
  4986 ;;		Unchanged: 0/0
  4987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4988 ;;      Params:         3       0       0       0       0       0       0       0       0
  4989 ;;      Locals:         0       7       0       0       0       0       0       0       0
  4990 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4991 ;;      Totals:         3       7       0       0       0       0       0       0       0
  4992 ;;Total ram usage:       10 bytes
  4993 ;; Hardware stack levels used:    1
  4994 ;; Hardware stack levels required when called:    4
  4995 ;; This function calls:
  4996 ;;		___awdiv
  4997 ;;		___awmod
  4998 ;;		___ftmul
  4999 ;;		___wmul
  5000 ;; This function is called by:
  5001 ;;		_sprintf
  5002 ;; This function uses a non-reentrant model
  5003 ;;
  5004                           
  5005                           	psect	text15
  5006  0010AC                     __ptext15:
  5007                           	opt stack 0
  5008  0010AC                     _fround:
  5009                           	opt stack 25
  5010                           
  5011                           ;incstack = 0
  5012                           ;fround@prec stored from wreg
  5013  0010AC  0100               	movlb	0	; () banked
  5014  0010AE  6FCA               	movwf	fround@prec& (0+255),b
  5015                           
  5016                           ;doprnt.c: 413: if(prec>=110)
  5017  0010B0  0E6D               	movlw	109
  5018  0010B2  0100               	movlb	0	; () banked
  5019  0010B4  65CA               	cpfsgt	fround@prec& (0+255),b
  5020  0010B6  D09F               	goto	l192
  5021                           
  5022                           ; BSR set to: 0
  5023                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5024  0010B8  0E00               	movlw	0
  5025  0010BA  6E25               	movwf	___wmul@multiplicand+1,c
  5026  0010BC  0E03               	movlw	3
  5027  0010BE  6E24               	movwf	___wmul@multiplicand,c
  5028  0010C0  0E00               	movlw	0
  5029  0010C2  6E1D               	movwf	___awdiv@divisor+1,c
  5030  0010C4  0E0A               	movlw	10
  5031  0010C6  6E1C               	movwf	___awdiv@divisor,c
  5032  0010C8  0E00               	movlw	0
  5033  0010CA  6E17               	movwf	___awmod@divisor+1,c
  5034  0010CC  0E64               	movlw	100
  5035  0010CE  6E16               	movwf	___awmod@divisor,c
  5036  0010D0  C0CA  F014         	movff	fround@prec,___awmod@dividend
  5037  0010D4  6A15               	clrf	___awmod@dividend+1,c
  5038  0010D6  ECB5  F00E         	call	___awmod	;wreg free
  5039  0010DA  C014  F01A         	movff	?___awmod,___awdiv@dividend
  5040  0010DE  C015  F01B         	movff	?___awmod+1,___awdiv@dividend+1
  5041  0010E2  EC32  F00E         	call	___awdiv	;wreg free
  5042  0010E6  0E09               	movlw	9
  5043  0010E8  241A               	addwf	?___awdiv,w,c
  5044  0010EA  6E22               	movwf	___wmul@multiplier,c
  5045  0010EC  0E00               	movlw	0
  5046  0010EE  201B               	addwfc	?___awdiv+1,w,c
  5047  0010F0  6E23               	movwf	___wmul@multiplier+1,c
  5048  0010F2  EC2E  F011         	call	___wmul	;wreg free
  5049  0010F6  0E2C               	movlw	low __npowers_
  5050  0010F8  2422               	addwf	?___wmul,w,c
  5051  0010FA  6EF6               	movwf	tblptrl,c
  5052  0010FC  0E5F               	movlw	high __npowers_
  5053  0010FE  2023               	addwfc	?___wmul+1,w,c
  5054  001100  6EF7               	movwf	tblptrh,c
  5055  001102                     	if	0	;There are less than 3 active tblptr bytes
  5056  001102                     	endif
  5057  001102  0009               	tblrd		*+
  5058  001104  CFF5 F02B          	movff	tablat,___ftmul@f2
  5059  001108  0009               	tblrd		*+
  5060  00110A  CFF5 F02C          	movff	tablat,___ftmul@f2+1
  5061  00110E  000A               	tblrd		*-
  5062  001110  CFF5 F02D          	movff	tablat,___ftmul@f2+2
  5063  001114  0E00               	movlw	0
  5064  001116  6E1D               	movwf	___awdiv@divisor+1,c
  5065  001118  0E64               	movlw	100
  5066  00111A  6E1C               	movwf	___awdiv@divisor,c
  5067  00111C  C0CA  F01A         	movff	fround@prec,___awdiv@dividend
  5068  001120  6A1B               	clrf	___awdiv@dividend+1,c
  5069  001122  EC32  F00E         	call	___awdiv	;wreg free
  5070  001126  0E12               	movlw	18
  5071  001128  241A               	addwf	?___awdiv,w,c
  5072  00112A  6E22               	movwf	___wmul@multiplier,c
  5073  00112C  0E00               	movlw	0
  5074  00112E  201B               	addwfc	?___awdiv+1,w,c
  5075  001130  6E23               	movwf	___wmul@multiplier+1,c
  5076  001132  0E00               	movlw	0
  5077  001134  6E25               	movwf	___wmul@multiplicand+1,c
  5078  001136  0E03               	movlw	3
  5079  001138  6E24               	movwf	___wmul@multiplicand,c
  5080  00113A  EC2E  F011         	call	___wmul	;wreg free
  5081  00113E  0E2C               	movlw	low __npowers_
  5082  001140  2422               	addwf	?___wmul,w,c
  5083  001142  6EF6               	movwf	tblptrl,c
  5084  001144  0E5F               	movlw	high __npowers_
  5085  001146  2023               	addwfc	?___wmul+1,w,c
  5086  001148  6EF7               	movwf	tblptrh,c
  5087  00114A                     	if	0	;There are less than 3 active tblptr bytes
  5088  00114A                     	endif
  5089  00114A  0009               	tblrd		*+
  5090  00114C  CFF5 F028          	movff	tablat,___ftmul@f1
  5091  001150  0009               	tblrd		*+
  5092  001152  CFF5 F029          	movff	tablat,___ftmul@f1+1
  5093  001156  000A               	tblrd		*-
  5094  001158  CFF5 F02A          	movff	tablat,___ftmul@f1+2
  5095  00115C  EC03  F00C         	call	___ftmul	;wreg free
  5096  001160  C028  F0C7         	movff	?___ftmul,_fround$1537
  5097  001164  C029  F0C8         	movff	?___ftmul+1,_fround$1537+1
  5098  001168  C02A  F0C9         	movff	?___ftmul+2,_fround$1537+2
  5099                           
  5100                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5101  00116C  0E00               	movlw	0
  5102  00116E  6E25               	movwf	___wmul@multiplicand+1,c
  5103  001170  0E03               	movlw	3
  5104  001172  6E24               	movwf	___wmul@multiplicand,c
  5105  001174  0E00               	movlw	0
  5106  001176  6E17               	movwf	___awmod@divisor+1,c
  5107  001178  0E0A               	movlw	10
  5108  00117A  6E16               	movwf	___awmod@divisor,c
  5109  00117C  C0CA  F014         	movff	fround@prec,___awmod@dividend
  5110  001180  6A15               	clrf	___awmod@dividend+1,c
  5111  001182  ECB5  F00E         	call	___awmod	;wreg free
  5112  001186  C014  F022         	movff	?___awmod,___wmul@multiplier
  5113  00118A  C015  F023         	movff	?___awmod+1,___wmul@multiplier+1
  5114  00118E  EC2E  F011         	call	___wmul	;wreg free
  5115  001192  0E2C               	movlw	low __npowers_
  5116  001194  2422               	addwf	?___wmul,w,c
  5117  001196  6EF6               	movwf	tblptrl,c
  5118  001198  0E5F               	movlw	high __npowers_
  5119  00119A  2023               	addwfc	?___wmul+1,w,c
  5120  00119C  6EF7               	movwf	tblptrh,c
  5121  00119E                     	if	0	;There are less than 3 active tblptr bytes
  5122  00119E                     	endif
  5123  00119E  0009               	tblrd		*+
  5124  0011A0  CFF5 F02B          	movff	tablat,___ftmul@f2
  5125  0011A4  0009               	tblrd		*+
  5126  0011A6  CFF5 F02C          	movff	tablat,___ftmul@f2+1
  5127  0011AA  000A               	tblrd		*-
  5128  0011AC  CFF5 F02D          	movff	tablat,___ftmul@f2+2
  5129  0011B0  C0C7  F028         	movff	_fround$1537,___ftmul@f1
  5130  0011B4  C0C8  F029         	movff	_fround$1537+1,___ftmul@f1+1
  5131  0011B8  C0C9  F02A         	movff	_fround$1537+2,___ftmul@f1+2
  5132  0011BC  EC03  F00C         	call	___ftmul	;wreg free
  5133  0011C0  C028  F0C4         	movff	?___ftmul,_fround$1538
  5134  0011C4  C029  F0C5         	movff	?___ftmul+1,_fround$1538+1
  5135  0011C8  C02A  F0C6         	movff	?___ftmul+2,_fround$1538+2
  5136                           
  5137                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5138  0011CC  C0C4  F028         	movff	_fround$1538,___ftmul@f1
  5139  0011D0  C0C5  F029         	movff	_fround$1538+1,___ftmul@f1+1
  5140  0011D4  C0C6  F02A         	movff	_fround$1538+2,___ftmul@f1+2
  5141  0011D8  0E00               	movlw	0
  5142  0011DA  6E2B               	movwf	___ftmul@f2,c
  5143  0011DC  0E00               	movlw	0
  5144  0011DE  6E2C               	movwf	___ftmul@f2+1,c
  5145  0011E0  0E3F               	movlw	63
  5146  0011E2  6E2D               	movwf	___ftmul@f2+2,c
  5147  0011E4  EC03  F00C         	call	___ftmul	;wreg free
  5148  0011E8  C028  F037         	movff	?___ftmul,?_fround
  5149  0011EC  C029  F038         	movff	?___ftmul+1,?_fround+1
  5150  0011F0  C02A  F039         	movff	?___ftmul+2,?_fround+2
  5151  0011F4  0012               	return	
  5152  0011F6                     l192:
  5153                           
  5154                           ;doprnt.c: 415: else if(prec > 10)
  5155  0011F6  0E0A               	movlw	10
  5156  0011F8  0100               	movlb	0	; () banked
  5157  0011FA  65CA               	cpfsgt	fround@prec& (0+255),b
  5158  0011FC  D063               	goto	l195
  5159                           
  5160                           ; BSR set to: 0
  5161                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5162  0011FE  0E00               	movlw	0
  5163  001200  6E25               	movwf	___wmul@multiplicand+1,c
  5164  001202  0E03               	movlw	3
  5165  001204  6E24               	movwf	___wmul@multiplicand,c
  5166  001206  0E00               	movlw	0
  5167  001208  6E17               	movwf	___awmod@divisor+1,c
  5168  00120A  0E0A               	movlw	10
  5169  00120C  6E16               	movwf	___awmod@divisor,c
  5170  00120E  C0CA  F014         	movff	fround@prec,___awmod@dividend
  5171  001212  6A15               	clrf	___awmod@dividend+1,c
  5172  001214  ECB5  F00E         	call	___awmod	;wreg free
  5173  001218  C014  F022         	movff	?___awmod,___wmul@multiplier
  5174  00121C  C015  F023         	movff	?___awmod+1,___wmul@multiplier+1
  5175  001220  EC2E  F011         	call	___wmul	;wreg free
  5176  001224  0E2C               	movlw	low __npowers_
  5177  001226  2422               	addwf	?___wmul,w,c
  5178  001228  6EF6               	movwf	tblptrl,c
  5179  00122A  0E5F               	movlw	high __npowers_
  5180  00122C  2023               	addwfc	?___wmul+1,w,c
  5181  00122E  6EF7               	movwf	tblptrh,c
  5182  001230                     	if	0	;There are less than 3 active tblptr bytes
  5183  001230                     	endif
  5184  001230  0009               	tblrd		*+
  5185  001232  CFF5 F02B          	movff	tablat,___ftmul@f2
  5186  001236  0009               	tblrd		*+
  5187  001238  CFF5 F02C          	movff	tablat,___ftmul@f2+1
  5188  00123C  000A               	tblrd		*-
  5189  00123E  CFF5 F02D          	movff	tablat,___ftmul@f2+2
  5190  001242  0E00               	movlw	0
  5191  001244  6E1D               	movwf	___awdiv@divisor+1,c
  5192  001246  0E0A               	movlw	10
  5193  001248  6E1C               	movwf	___awdiv@divisor,c
  5194  00124A  C0CA  F01A         	movff	fround@prec,___awdiv@dividend
  5195  00124E  6A1B               	clrf	___awdiv@dividend+1,c
  5196  001250  EC32  F00E         	call	___awdiv	;wreg free
  5197  001254  0E09               	movlw	9
  5198  001256  241A               	addwf	?___awdiv,w,c
  5199  001258  6E22               	movwf	___wmul@multiplier,c
  5200  00125A  0E00               	movlw	0
  5201  00125C  201B               	addwfc	?___awdiv+1,w,c
  5202  00125E  6E23               	movwf	___wmul@multiplier+1,c
  5203  001260  0E00               	movlw	0
  5204  001262  6E25               	movwf	___wmul@multiplicand+1,c
  5205  001264  0E03               	movlw	3
  5206  001266  6E24               	movwf	___wmul@multiplicand,c
  5207  001268  EC2E  F011         	call	___wmul	;wreg free
  5208  00126C  0E2C               	movlw	low __npowers_
  5209  00126E  2422               	addwf	?___wmul,w,c
  5210  001270  6EF6               	movwf	tblptrl,c
  5211  001272  0E5F               	movlw	high __npowers_
  5212  001274  2023               	addwfc	?___wmul+1,w,c
  5213  001276  6EF7               	movwf	tblptrh,c
  5214  001278                     	if	0	;There are less than 3 active tblptr bytes
  5215  001278                     	endif
  5216  001278  0009               	tblrd		*+
  5217  00127A  CFF5 F028          	movff	tablat,___ftmul@f1
  5218  00127E  0009               	tblrd		*+
  5219  001280  CFF5 F029          	movff	tablat,___ftmul@f1+1
  5220  001284  000A               	tblrd		*-
  5221  001286  CFF5 F02A          	movff	tablat,___ftmul@f1+2
  5222  00128A  EC03  F00C         	call	___ftmul	;wreg free
  5223  00128E  C028  F0C7         	movff	?___ftmul,_fround$1537
  5224  001292  C029  F0C8         	movff	?___ftmul+1,_fround$1537+1
  5225  001296  C02A  F0C9         	movff	?___ftmul+2,_fround$1537+2
  5226                           
  5227                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5228  00129A  C0C7  F028         	movff	_fround$1537,___ftmul@f1
  5229  00129E  C0C8  F029         	movff	_fround$1537+1,___ftmul@f1+1
  5230  0012A2  C0C9  F02A         	movff	_fround$1537+2,___ftmul@f1+2
  5231  0012A6  0E00               	movlw	0
  5232  0012A8  6E2B               	movwf	___ftmul@f2,c
  5233  0012AA  0E00               	movlw	0
  5234  0012AC  6E2C               	movwf	___ftmul@f2+1,c
  5235  0012AE  0E3F               	movlw	63
  5236  0012B0  6E2D               	movwf	___ftmul@f2+2,c
  5237  0012B2  EC03  F00C         	call	___ftmul	;wreg free
  5238  0012B6  C028  F037         	movff	?___ftmul,?_fround
  5239  0012BA  C029  F038         	movff	?___ftmul+1,?_fround+1
  5240  0012BE  C02A  F039         	movff	?___ftmul+2,?_fround+2
  5241  0012C2  0012               	return	
  5242  0012C4                     l195:
  5243                           
  5244                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  5245  0012C4  0100               	movlb	0	; () banked
  5246  0012C6  51CA               	movf	fround@prec& (0+255),w,b
  5247  0012C8  0D03               	mullw	3
  5248  0012CA  0E2C               	movlw	low __npowers_
  5249  0012CC  24F3               	addwf	prodl,w,c
  5250  0012CE  6EF6               	movwf	tblptrl,c
  5251  0012D0  0E5F               	movlw	high __npowers_
  5252  0012D2  20F4               	addwfc	prodh,w,c
  5253  0012D4  6EF7               	movwf	tblptrh,c
  5254  0012D6                     	if	0	;There are less than 3 active tblptr bytes
  5255  0012D6                     	endif
  5256  0012D6  0009               	tblrd		*+
  5257  0012D8  CFF5 F028          	movff	tablat,___ftmul@f1
  5258  0012DC  0009               	tblrd		*+
  5259  0012DE  CFF5 F029          	movff	tablat,___ftmul@f1+1
  5260  0012E2  000A               	tblrd		*-
  5261  0012E4  CFF5 F02A          	movff	tablat,___ftmul@f1+2
  5262  0012E8  0E00               	movlw	0
  5263  0012EA  6E2B               	movwf	___ftmul@f2,c
  5264  0012EC  0E00               	movlw	0
  5265  0012EE  6E2C               	movwf	___ftmul@f2+1,c
  5266  0012F0  0E3F               	movlw	63
  5267  0012F2  6E2D               	movwf	___ftmul@f2+2,c
  5268  0012F4  EC03  F00C         	call	___ftmul	;wreg free
  5269  0012F8  C028  F037         	movff	?___ftmul,?_fround
  5270  0012FC  C029  F038         	movff	?___ftmul+1,?_fround+1
  5271  001300  C02A  F039         	movff	?___ftmul+2,?_fround+2
  5272  001304  0012               	return	
  5273  001306                     __end_of_fround:
  5274                           	opt stack 0
  5275                           tblptru	equ	0xFF8
  5276                           tblptrh	equ	0xFF7
  5277                           tblptrl	equ	0xFF6
  5278                           tablat	equ	0xFF5
  5279                           prodh	equ	0xFF4
  5280                           prodl	equ	0xFF3
  5281                           intcon	equ	0xFF2
  5282                           intcon2	equ	0xFF1
  5283                           postinc0	equ	0xFEE
  5284                           wreg	equ	0xFE8
  5285                           indf1	equ	0xFE7
  5286                           plusw1	equ	0xFE3
  5287                           fsr1h	equ	0xFE2
  5288                           fsr1l	equ	0xFE1
  5289                           indf2	equ	0xFDF
  5290                           postinc2	equ	0xFDE
  5291                           postdec2	equ	0xFDD
  5292                           plusw2	equ	0xFDB
  5293                           fsr2h	equ	0xFDA
  5294                           fsr2l	equ	0xFD9
  5295                           status	equ	0xFD8
  5296                           
  5297 ;; *************** function ___ftmul *****************
  5298 ;; Defined at:
  5299 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  5300 ;; Parameters:    Size  Location     Type
  5301 ;;  f1              3   39[COMRAM] float 
  5302 ;;  f2              3   42[COMRAM] float 
  5303 ;; Auto vars:     Size  Location     Type
  5304 ;;  f3_as_produc    3   49[COMRAM] unsigned um
  5305 ;;  sign            1   53[COMRAM] unsigned char 
  5306 ;;  cntr            1   52[COMRAM] unsigned char 
  5307 ;;  exp             1   48[COMRAM] unsigned char 
  5308 ;; Return value:  Size  Location     Type
  5309 ;;                  3   39[COMRAM] float 
  5310 ;; Registers used:
  5311 ;;		wreg, status,2, status,0, cstack
  5312 ;; Tracked objects:
  5313 ;;		On entry : 0/0
  5314 ;;		On exit  : 0/0
  5315 ;;		Unchanged: 0/0
  5316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5317 ;;      Params:         6       0       0       0       0       0       0       0       0
  5318 ;;      Locals:         6       0       0       0       0       0       0       0       0
  5319 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5320 ;;      Totals:        15       0       0       0       0       0       0       0       0
  5321 ;;Total ram usage:       15 bytes
  5322 ;; Hardware stack levels used:    1
  5323 ;; Hardware stack levels required when called:    3
  5324 ;; This function calls:
  5325 ;;		___ftpack
  5326 ;; This function is called by:
  5327 ;;		_main
  5328 ;;		_fround
  5329 ;;		_scale
  5330 ;;		_sprintf
  5331 ;; This function uses a non-reentrant model
  5332 ;;
  5333                           
  5334                           	psect	text16
  5335  001806                     __ptext16:
  5336                           	opt stack 0
  5337  001806                     ___ftmul:
  5338                           	opt stack 25
  5339                           
  5340                           ;incstack = 0
  5341  001806  C02A  F02E         	movff	___ftmul@f1+2,??___ftmul
  5342  00180A  6A2F               	clrf	(??___ftmul+1)& (0+255),c
  5343  00180C  6A30               	clrf	(??___ftmul+2)& (0+255),c
  5344  00180E  3429               	rlcf	___ftmul@f1+1,w,c
  5345  001810  362E               	rlcf	??___ftmul& (0+255),f,c
  5346  001812  E301               	bnc	u4041
  5347  001814  802F               	bsf	(??___ftmul+1)& (0+255),0,c
  5348  001816                     u4041:
  5349  001816  502E               	movf	??___ftmul,w,c
  5350  001818  6E31               	movwf	___ftmul@exp,c
  5351  00181A  5031               	movf	___ftmul@exp,w,c
  5352  00181C  A4D8               	btfss	status,2,c
  5353  00181E  D007               	goto	l644
  5354  001820  0E00               	movlw	0
  5355  001822  6E28               	movwf	?___ftmul,c
  5356  001824  0E00               	movlw	0
  5357  001826  6E29               	movwf	?___ftmul+1,c
  5358  001828  0E00               	movlw	0
  5359  00182A  6E2A               	movwf	?___ftmul+2,c
  5360  00182C  0012               	return	
  5361  00182E                     l644:
  5362  00182E  C02D  F02E         	movff	___ftmul@f2+2,??___ftmul
  5363  001832  6A2F               	clrf	(??___ftmul+1)& (0+255),c
  5364  001834  6A30               	clrf	(??___ftmul+2)& (0+255),c
  5365  001836  342C               	rlcf	___ftmul@f2+1,w,c
  5366  001838  362E               	rlcf	??___ftmul& (0+255),f,c
  5367  00183A  E301               	bnc	u4061
  5368  00183C  802F               	bsf	(??___ftmul+1)& (0+255),0,c
  5369  00183E                     u4061:
  5370  00183E  502E               	movf	??___ftmul,w,c
  5371  001840  6E36               	movwf	___ftmul@sign,c
  5372  001842  5036               	movf	___ftmul@sign,w,c
  5373  001844  A4D8               	btfss	status,2,c
  5374  001846  D007               	goto	l646
  5375  001848  0E00               	movlw	0
  5376  00184A  6E28               	movwf	?___ftmul,c
  5377  00184C  0E00               	movlw	0
  5378  00184E  6E29               	movwf	?___ftmul+1,c
  5379  001850  0E00               	movlw	0
  5380  001852  6E2A               	movwf	?___ftmul+2,c
  5381  001854  0012               	return	
  5382  001856                     l646:
  5383  001856  5036               	movf	___ftmul@sign,w,c
  5384  001858  0F7B               	addlw	123
  5385  00185A  2631               	addwf	___ftmul@exp,f,c
  5386  00185C  C02A  F036         	movff	___ftmul@f1+2,___ftmul@sign
  5387  001860  502D               	movf	___ftmul@f2+2,w,c
  5388  001862  1A36               	xorwf	___ftmul@sign,f,c
  5389  001864  0E80               	movlw	128
  5390  001866  1636               	andwf	___ftmul@sign,f,c
  5391  001868  8E29               	bsf	___ftmul@f1+1,7,c
  5392  00186A  8E2C               	bsf	___ftmul@f2+1,7,c
  5393  00186C  0EFF               	movlw	255
  5394  00186E  162B               	andwf	___ftmul@f2,f,c
  5395  001870  0EFF               	movlw	255
  5396  001872  162C               	andwf	___ftmul@f2+1,f,c
  5397  001874  0E00               	movlw	0
  5398  001876  162D               	andwf	___ftmul@f2+2,f,c
  5399  001878  0E00               	movlw	0
  5400  00187A  6E32               	movwf	___ftmul@f3_as_product,c
  5401  00187C  0E00               	movlw	0
  5402  00187E  6E33               	movwf	___ftmul@f3_as_product+1,c
  5403  001880  0E00               	movlw	0
  5404  001882  6E34               	movwf	___ftmul@f3_as_product+2,c
  5405  001884  0E07               	movlw	7
  5406  001886  6E35               	movwf	___ftmul@cntr,c
  5407  001888  A028               	btfss	___ftmul@f1,0,c
  5408  00188A  D006               	goto	l648
  5409  00188C  502B               	movf	___ftmul@f2,w,c
  5410  00188E  2632               	addwf	___ftmul@f3_as_product,f,c
  5411  001890  502C               	movf	___ftmul@f2+1,w,c
  5412  001892  2233               	addwfc	___ftmul@f3_as_product+1,f,c
  5413  001894  502D               	movf	___ftmul@f2+2,w,c
  5414  001896  2234               	addwfc	___ftmul@f3_as_product+2,f,c
  5415  001898                     l648:
  5416  001898  90D8               	bcf	status,0,c
  5417  00189A  322A               	rrcf	___ftmul@f1+2,f,c
  5418  00189C  3229               	rrcf	___ftmul@f1+1,f,c
  5419  00189E  3228               	rrcf	___ftmul@f1,f,c
  5420  0018A0  90D8               	bcf	status,0,c
  5421  0018A2  362B               	rlcf	___ftmul@f2,f,c
  5422  0018A4  362C               	rlcf	___ftmul@f2+1,f,c
  5423  0018A6  362D               	rlcf	___ftmul@f2+2,f,c
  5424  0018A8  2E35               	decfsz	___ftmul@cntr,f,c
  5425  0018AA  D7EE               	goto	l647
  5426  0018AC  0E09               	movlw	9
  5427  0018AE  6E35               	movwf	___ftmul@cntr,c
  5428  0018B0  A028               	btfss	___ftmul@f1,0,c
  5429  0018B2  D006               	goto	l651
  5430  0018B4  502B               	movf	___ftmul@f2,w,c
  5431  0018B6  2632               	addwf	___ftmul@f3_as_product,f,c
  5432  0018B8  502C               	movf	___ftmul@f2+1,w,c
  5433  0018BA  2233               	addwfc	___ftmul@f3_as_product+1,f,c
  5434  0018BC  502D               	movf	___ftmul@f2+2,w,c
  5435  0018BE  2234               	addwfc	___ftmul@f3_as_product+2,f,c
  5436  0018C0                     l651:
  5437  0018C0  90D8               	bcf	status,0,c
  5438  0018C2  322A               	rrcf	___ftmul@f1+2,f,c
  5439  0018C4  3229               	rrcf	___ftmul@f1+1,f,c
  5440  0018C6  3228               	rrcf	___ftmul@f1,f,c
  5441  0018C8  90D8               	bcf	status,0,c
  5442  0018CA  3234               	rrcf	___ftmul@f3_as_product+2,f,c
  5443  0018CC  3233               	rrcf	___ftmul@f3_as_product+1,f,c
  5444  0018CE  3232               	rrcf	___ftmul@f3_as_product,f,c
  5445  0018D0  2E35               	decfsz	___ftmul@cntr,f,c
  5446  0018D2  D7EE               	goto	l650
  5447  0018D4  C032  F014         	movff	___ftmul@f3_as_product,___ftpack@arg
  5448  0018D8  C033  F015         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  5449  0018DC  C034  F016         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  5450  0018E0  C031  F017         	movff	___ftmul@exp,___ftpack@exp
  5451  0018E4  C036  F018         	movff	___ftmul@sign,___ftpack@sign
  5452  0018E8  EC3C  F00D         	call	___ftpack	;wreg free
  5453  0018EC  C014  F028         	movff	?___ftpack,?___ftmul
  5454  0018F0  C015  F029         	movff	?___ftpack+1,?___ftmul+1
  5455  0018F4  C016  F02A         	movff	?___ftpack+2,?___ftmul+2
  5456  0018F8  0012               	return	
  5457  0018FA                     __end_of___ftmul:
  5458                           	opt stack 0
  5459                           tblptru	equ	0xFF8
  5460                           tblptrh	equ	0xFF7
  5461                           tblptrl	equ	0xFF6
  5462                           tablat	equ	0xFF5
  5463                           prodh	equ	0xFF4
  5464                           prodl	equ	0xFF3
  5465                           intcon	equ	0xFF2
  5466                           intcon2	equ	0xFF1
  5467                           postinc0	equ	0xFEE
  5468                           wreg	equ	0xFE8
  5469                           indf1	equ	0xFE7
  5470                           plusw1	equ	0xFE3
  5471                           fsr1h	equ	0xFE2
  5472                           fsr1l	equ	0xFE1
  5473                           indf2	equ	0xFDF
  5474                           postinc2	equ	0xFDE
  5475                           postdec2	equ	0xFDD
  5476                           plusw2	equ	0xFDB
  5477                           fsr2h	equ	0xFDA
  5478                           fsr2l	equ	0xFD9
  5479                           status	equ	0xFD8
  5480                           
  5481 ;; *************** function ___awmod *****************
  5482 ;; Defined at:
  5483 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  5484 ;; Parameters:    Size  Location     Type
  5485 ;;  dividend        2   19[COMRAM] int 
  5486 ;;  divisor         2   21[COMRAM] int 
  5487 ;; Auto vars:     Size  Location     Type
  5488 ;;  sign            1   24[COMRAM] unsigned char 
  5489 ;;  counter         1   23[COMRAM] unsigned char 
  5490 ;; Return value:  Size  Location     Type
  5491 ;;                  2   19[COMRAM] int 
  5492 ;; Registers used:
  5493 ;;		wreg, status,2, status,0
  5494 ;; Tracked objects:
  5495 ;;		On entry : 0/0
  5496 ;;		On exit  : 0/0
  5497 ;;		Unchanged: 0/0
  5498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5499 ;;      Params:         4       0       0       0       0       0       0       0       0
  5500 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5501 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5502 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5503 ;;Total ram usage:        6 bytes
  5504 ;; Hardware stack levels used:    1
  5505 ;; Hardware stack levels required when called:    2
  5506 ;; This function calls:
  5507 ;;		Nothing
  5508 ;; This function is called by:
  5509 ;;		_fround
  5510 ;;		_scale
  5511 ;; This function uses a non-reentrant model
  5512 ;;
  5513                           
  5514                           	psect	text17
  5515  001D6A                     __ptext17:
  5516                           	opt stack 0
  5517  001D6A                     ___awmod:
  5518                           	opt stack 26
  5519                           
  5520                           ;incstack = 0
  5521  001D6A  0E00               	movlw	0
  5522  001D6C  6E19               	movwf	___awmod@sign,c
  5523  001D6E  AE15               	btfss	___awmod@dividend+1,7,c
  5524  001D70  D006               	goto	l497
  5525  001D72  6C14               	negf	___awmod@dividend,c
  5526  001D74  1E15               	comf	___awmod@dividend+1,f,c
  5527  001D76  B0D8               	btfsc	status,0,c
  5528  001D78  2A15               	incf	___awmod@dividend+1,f,c
  5529  001D7A  0E01               	movlw	1
  5530  001D7C  6E19               	movwf	___awmod@sign,c
  5531  001D7E                     l497:
  5532  001D7E  AE17               	btfss	___awmod@divisor+1,7,c
  5533  001D80  D004               	goto	l498
  5534  001D82  6C16               	negf	___awmod@divisor,c
  5535  001D84  1E17               	comf	___awmod@divisor+1,f,c
  5536  001D86  B0D8               	btfsc	status,0,c
  5537  001D88  2A17               	incf	___awmod@divisor+1,f,c
  5538  001D8A                     l498:
  5539  001D8A  5016               	movf	___awmod@divisor,w,c
  5540  001D8C  1017               	iorwf	___awmod@divisor+1,w,c
  5541  001D8E  B4D8               	btfsc	status,2,c
  5542  001D90  D018               	goto	l505
  5543  001D92  0E01               	movlw	1
  5544  001D94  6E18               	movwf	___awmod@counter,c
  5545  001D96  D004               	goto	l500
  5546  001D98  90D8               	bcf	status,0,c
  5547  001D9A  3616               	rlcf	___awmod@divisor,f,c
  5548  001D9C  3617               	rlcf	___awmod@divisor+1,f,c
  5549  001D9E  2A18               	incf	___awmod@counter,f,c
  5550  001DA0                     l500:
  5551  001DA0  AE17               	btfss	___awmod@divisor+1,7,c
  5552  001DA2  D7FA               	goto	l501
  5553  001DA4                     u4190:
  5554  001DA4  5016               	movf	___awmod@divisor,w,c
  5555  001DA6  5C14               	subwf	___awmod@dividend,w,c
  5556  001DA8  5017               	movf	___awmod@divisor+1,w,c
  5557  001DAA  5815               	subwfb	___awmod@dividend+1,w,c
  5558  001DAC  A0D8               	btfss	status,0,c
  5559  001DAE  D004               	goto	l504
  5560  001DB0  5016               	movf	___awmod@divisor,w,c
  5561  001DB2  5E14               	subwf	___awmod@dividend,f,c
  5562  001DB4  5017               	movf	___awmod@divisor+1,w,c
  5563  001DB6  5A15               	subwfb	___awmod@dividend+1,f,c
  5564  001DB8                     l504:
  5565  001DB8  90D8               	bcf	status,0,c
  5566  001DBA  3217               	rrcf	___awmod@divisor+1,f,c
  5567  001DBC  3216               	rrcf	___awmod@divisor,f,c
  5568  001DBE  2E18               	decfsz	___awmod@counter,f,c
  5569  001DC0  D7F1               	goto	u4190
  5570  001DC2                     l505:
  5571  001DC2  5019               	movf	___awmod@sign,w,c
  5572  001DC4  B4D8               	btfsc	status,2,c
  5573  001DC6  D004               	goto	l506
  5574  001DC8  6C14               	negf	___awmod@dividend,c
  5575  001DCA  1E15               	comf	___awmod@dividend+1,f,c
  5576  001DCC  B0D8               	btfsc	status,0,c
  5577  001DCE  2A15               	incf	___awmod@dividend+1,f,c
  5578  001DD0                     l506:
  5579  001DD0  C014  F014         	movff	___awmod@dividend,?___awmod
  5580  001DD4  C015  F015         	movff	___awmod@dividend+1,?___awmod+1
  5581  001DD8  0012               	return	
  5582  001DDA                     __end_of___awmod:
  5583                           	opt stack 0
  5584                           tblptru	equ	0xFF8
  5585                           tblptrh	equ	0xFF7
  5586                           tblptrl	equ	0xFF6
  5587                           tablat	equ	0xFF5
  5588                           prodh	equ	0xFF4
  5589                           prodl	equ	0xFF3
  5590                           intcon	equ	0xFF2
  5591                           intcon2	equ	0xFF1
  5592                           postinc0	equ	0xFEE
  5593                           wreg	equ	0xFE8
  5594                           indf1	equ	0xFE7
  5595                           plusw1	equ	0xFE3
  5596                           fsr1h	equ	0xFE2
  5597                           fsr1l	equ	0xFE1
  5598                           indf2	equ	0xFDF
  5599                           postinc2	equ	0xFDE
  5600                           postdec2	equ	0xFDD
  5601                           plusw2	equ	0xFDB
  5602                           fsr2h	equ	0xFDA
  5603                           fsr2l	equ	0xFD9
  5604                           status	equ	0xFD8
  5605                           
  5606 ;; *************** function ___awdiv *****************
  5607 ;; Defined at:
  5608 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  5609 ;; Parameters:    Size  Location     Type
  5610 ;;  dividend        2   25[COMRAM] int 
  5611 ;;  divisor         2   27[COMRAM] int 
  5612 ;; Auto vars:     Size  Location     Type
  5613 ;;  quotient        2   31[COMRAM] int 
  5614 ;;  sign            1   30[COMRAM] unsigned char 
  5615 ;;  counter         1   29[COMRAM] unsigned char 
  5616 ;; Return value:  Size  Location     Type
  5617 ;;                  2   25[COMRAM] int 
  5618 ;; Registers used:
  5619 ;;		wreg, status,2, status,0
  5620 ;; Tracked objects:
  5621 ;;		On entry : 0/0
  5622 ;;		On exit  : 0/0
  5623 ;;		Unchanged: 0/0
  5624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5625 ;;      Params:         4       0       0       0       0       0       0       0       0
  5626 ;;      Locals:         4       0       0       0       0       0       0       0       0
  5627 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5628 ;;      Totals:         8       0       0       0       0       0       0       0       0
  5629 ;;Total ram usage:        8 bytes
  5630 ;; Hardware stack levels used:    1
  5631 ;; Hardware stack levels required when called:    2
  5632 ;; This function calls:
  5633 ;;		Nothing
  5634 ;; This function is called by:
  5635 ;;		_fround
  5636 ;;		_scale
  5637 ;;		_sprintf
  5638 ;; This function uses a non-reentrant model
  5639 ;;
  5640                           
  5641                           	psect	text18
  5642  001C64                     __ptext18:
  5643                           	opt stack 0
  5644  001C64                     ___awdiv:
  5645                           	opt stack 26
  5646                           
  5647                           ;incstack = 0
  5648  001C64  0E00               	movlw	0
  5649  001C66  6E1F               	movwf	___awdiv@sign,c
  5650  001C68  AE1D               	btfss	___awdiv@divisor+1,7,c
  5651  001C6A  D006               	goto	l484
  5652  001C6C  6C1C               	negf	___awdiv@divisor,c
  5653  001C6E  1E1D               	comf	___awdiv@divisor+1,f,c
  5654  001C70  B0D8               	btfsc	status,0,c
  5655  001C72  2A1D               	incf	___awdiv@divisor+1,f,c
  5656  001C74  0E01               	movlw	1
  5657  001C76  6E1F               	movwf	___awdiv@sign,c
  5658  001C78                     l484:
  5659  001C78  AE1B               	btfss	___awdiv@dividend+1,7,c
  5660  001C7A  D006               	goto	l485
  5661  001C7C  6C1A               	negf	___awdiv@dividend,c
  5662  001C7E  1E1B               	comf	___awdiv@dividend+1,f,c
  5663  001C80  B0D8               	btfsc	status,0,c
  5664  001C82  2A1B               	incf	___awdiv@dividend+1,f,c
  5665  001C84  0E01               	movlw	1
  5666  001C86  1A1F               	xorwf	___awdiv@sign,f,c
  5667  001C88                     l485:
  5668  001C88  0E00               	movlw	0
  5669  001C8A  6E21               	movwf	___awdiv@quotient+1,c
  5670  001C8C  0E00               	movlw	0
  5671  001C8E  6E20               	movwf	___awdiv@quotient,c
  5672  001C90  501C               	movf	___awdiv@divisor,w,c
  5673  001C92  101D               	iorwf	___awdiv@divisor+1,w,c
  5674  001C94  B4D8               	btfsc	status,2,c
  5675  001C96  D01C               	goto	l492
  5676  001C98  0E01               	movlw	1
  5677  001C9A  6E1E               	movwf	___awdiv@counter,c
  5678  001C9C  D004               	goto	l487
  5679  001C9E  90D8               	bcf	status,0,c
  5680  001CA0  361C               	rlcf	___awdiv@divisor,f,c
  5681  001CA2  361D               	rlcf	___awdiv@divisor+1,f,c
  5682  001CA4  2A1E               	incf	___awdiv@counter,f,c
  5683  001CA6                     l487:
  5684  001CA6  AE1D               	btfss	___awdiv@divisor+1,7,c
  5685  001CA8  D7FA               	goto	l488
  5686  001CAA                     u4130:
  5687  001CAA  90D8               	bcf	status,0,c
  5688  001CAC  3620               	rlcf	___awdiv@quotient,f,c
  5689  001CAE  3621               	rlcf	___awdiv@quotient+1,f,c
  5690  001CB0  501C               	movf	___awdiv@divisor,w,c
  5691  001CB2  5C1A               	subwf	___awdiv@dividend,w,c
  5692  001CB4  501D               	movf	___awdiv@divisor+1,w,c
  5693  001CB6  581B               	subwfb	___awdiv@dividend+1,w,c
  5694  001CB8  A0D8               	btfss	status,0,c
  5695  001CBA  D005               	goto	l491
  5696  001CBC  501C               	movf	___awdiv@divisor,w,c
  5697  001CBE  5E1A               	subwf	___awdiv@dividend,f,c
  5698  001CC0  501D               	movf	___awdiv@divisor+1,w,c
  5699  001CC2  5A1B               	subwfb	___awdiv@dividend+1,f,c
  5700  001CC4  8020               	bsf	___awdiv@quotient,0,c
  5701  001CC6                     l491:
  5702  001CC6  90D8               	bcf	status,0,c
  5703  001CC8  321D               	rrcf	___awdiv@divisor+1,f,c
  5704  001CCA  321C               	rrcf	___awdiv@divisor,f,c
  5705  001CCC  2E1E               	decfsz	___awdiv@counter,f,c
  5706  001CCE  D7ED               	goto	u4130
  5707  001CD0                     l492:
  5708  001CD0  501F               	movf	___awdiv@sign,w,c
  5709  001CD2  B4D8               	btfsc	status,2,c
  5710  001CD4  D004               	goto	l493
  5711  001CD6  6C20               	negf	___awdiv@quotient,c
  5712  001CD8  1E21               	comf	___awdiv@quotient+1,f,c
  5713  001CDA  B0D8               	btfsc	status,0,c
  5714  001CDC  2A21               	incf	___awdiv@quotient+1,f,c
  5715  001CDE                     l493:
  5716  001CDE  C020  F01A         	movff	___awdiv@quotient,?___awdiv
  5717  001CE2  C021  F01B         	movff	___awdiv@quotient+1,?___awdiv+1
  5718  001CE6  0012               	return	
  5719  001CE8                     __end_of___awdiv:
  5720                           	opt stack 0
  5721                           tblptru	equ	0xFF8
  5722                           tblptrh	equ	0xFF7
  5723                           tblptrl	equ	0xFF6
  5724                           tablat	equ	0xFF5
  5725                           prodh	equ	0xFF4
  5726                           prodl	equ	0xFF3
  5727                           intcon	equ	0xFF2
  5728                           intcon2	equ	0xFF1
  5729                           postinc0	equ	0xFEE
  5730                           wreg	equ	0xFE8
  5731                           indf1	equ	0xFE7
  5732                           plusw1	equ	0xFE3
  5733                           fsr1h	equ	0xFE2
  5734                           fsr1l	equ	0xFE1
  5735                           indf2	equ	0xFDF
  5736                           postinc2	equ	0xFDE
  5737                           postdec2	equ	0xFDD
  5738                           plusw2	equ	0xFDB
  5739                           fsr2h	equ	0xFDA
  5740                           fsr2l	equ	0xFD9
  5741                           status	equ	0xFD8
  5742                           
  5743 ;; *************** function __tdiv_to_l_ *****************
  5744 ;; Defined at:
  5745 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdivl.c"
  5746 ;; Parameters:    Size  Location     Type
  5747 ;;  f1              3   19[COMRAM] float 
  5748 ;;  f2              3   22[COMRAM] float 
  5749 ;; Auto vars:     Size  Location     Type
  5750 ;;  quot            4   28[COMRAM] unsigned long 
  5751 ;;  exp1            1   33[COMRAM] unsigned char 
  5752 ;;  cntr            1   32[COMRAM] unsigned char 
  5753 ;; Return value:  Size  Location     Type
  5754 ;;                  4   19[COMRAM] unsigned long 
  5755 ;; Registers used:
  5756 ;;		wreg, status,2, status,0
  5757 ;; Tracked objects:
  5758 ;;		On entry : 0/0
  5759 ;;		On exit  : 0/0
  5760 ;;		Unchanged: 0/0
  5761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5762 ;;      Params:         6       0       0       0       0       0       0       0       0
  5763 ;;      Locals:         6       0       0       0       0       0       0       0       0
  5764 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5765 ;;      Totals:        15       0       0       0       0       0       0       0       0
  5766 ;;Total ram usage:       15 bytes
  5767 ;; Hardware stack levels used:    1
  5768 ;; Hardware stack levels required when called:    2
  5769 ;; This function calls:
  5770 ;;		Nothing
  5771 ;; This function is called by:
  5772 ;;		_sprintf
  5773 ;; This function uses a non-reentrant model
  5774 ;;
  5775                           
  5776                           	psect	text19
  5777  0014B4                     __ptext19:
  5778                           	opt stack 0
  5779  0014B4                     __tdiv_to_l_:
  5780                           	opt stack 27
  5781                           
  5782                           ;incstack = 0
  5783  0014B4  C016  F01A         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  5784  0014B8  6A1B               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  5785  0014BA  6A1C               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  5786  0014BC  3415               	rlcf	__tdiv_to_l_@f1+1,w,c
  5787  0014BE  361A               	rlcf	??__tdiv_to_l_& (0+255),f,c
  5788  0014C0  E301               	bnc	u2491
  5789  0014C2  801B               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  5790  0014C4                     u2491:
  5791  0014C4  501A               	movf	??__tdiv_to_l_,w,c
  5792  0014C6  6E22               	movwf	__tdiv_to_l_@exp1,c
  5793  0014C8  5022               	movf	__tdiv_to_l_@exp1,w,c
  5794  0014CA  A4D8               	btfss	status,2,c
  5795  0014CC  D009               	goto	l620
  5796  0014CE  0E00               	movlw	0
  5797  0014D0  6E14               	movwf	?__tdiv_to_l_,c
  5798  0014D2  0E00               	movlw	0
  5799  0014D4  6E15               	movwf	?__tdiv_to_l_+1,c
  5800  0014D6  0E00               	movlw	0
  5801  0014D8  6E16               	movwf	?__tdiv_to_l_+2,c
  5802  0014DA  0E00               	movlw	0
  5803  0014DC  6E17               	movwf	?__tdiv_to_l_+3,c
  5804  0014DE  0012               	return	
  5805  0014E0                     l620:
  5806  0014E0  C019  F01A         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  5807  0014E4  6A1B               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  5808  0014E6  6A1C               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  5809  0014E8  3418               	rlcf	__tdiv_to_l_@f2+1,w,c
  5810  0014EA  361A               	rlcf	??__tdiv_to_l_& (0+255),f,c
  5811  0014EC  E301               	bnc	u2511
  5812  0014EE  801B               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  5813  0014F0                     u2511:
  5814  0014F0  501A               	movf	??__tdiv_to_l_,w,c
  5815  0014F2  6E21               	movwf	__tdiv_to_l_@cntr,c
  5816  0014F4  5021               	movf	__tdiv_to_l_@cntr,w,c
  5817  0014F6  A4D8               	btfss	status,2,c
  5818  0014F8  D009               	goto	l622
  5819  0014FA  0E00               	movlw	0
  5820  0014FC  6E14               	movwf	?__tdiv_to_l_,c
  5821  0014FE  0E00               	movlw	0
  5822  001500  6E15               	movwf	?__tdiv_to_l_+1,c
  5823  001502  0E00               	movlw	0
  5824  001504  6E16               	movwf	?__tdiv_to_l_+2,c
  5825  001506  0E00               	movlw	0
  5826  001508  6E17               	movwf	?__tdiv_to_l_+3,c
  5827  00150A  0012               	return	
  5828  00150C                     l622:
  5829  00150C  8E15               	bsf	__tdiv_to_l_@f1+1,7,c
  5830  00150E  0EFF               	movlw	255
  5831  001510  1614               	andwf	__tdiv_to_l_@f1,f,c
  5832  001512  0EFF               	movlw	255
  5833  001514  1615               	andwf	__tdiv_to_l_@f1+1,f,c
  5834  001516  0E00               	movlw	0
  5835  001518  1616               	andwf	__tdiv_to_l_@f1+2,f,c
  5836  00151A  8E18               	bsf	__tdiv_to_l_@f2+1,7,c
  5837  00151C  0EFF               	movlw	255
  5838  00151E  1617               	andwf	__tdiv_to_l_@f2,f,c
  5839  001520  0EFF               	movlw	255
  5840  001522  1618               	andwf	__tdiv_to_l_@f2+1,f,c
  5841  001524  0E00               	movlw	0
  5842  001526  1619               	andwf	__tdiv_to_l_@f2+2,f,c
  5843  001528  0E00               	movlw	0
  5844  00152A  6E1D               	movwf	__tdiv_to_l_@quot,c
  5845  00152C  0E00               	movlw	0
  5846  00152E  6E1E               	movwf	__tdiv_to_l_@quot+1,c
  5847  001530  0E00               	movlw	0
  5848  001532  6E1F               	movwf	__tdiv_to_l_@quot+2,c
  5849  001534  0E00               	movlw	0
  5850  001536  6E20               	movwf	__tdiv_to_l_@quot+3,c
  5851  001538  0E7F               	movlw	127
  5852  00153A  5E22               	subwf	__tdiv_to_l_@exp1,f,c
  5853  00153C  5021               	movf	__tdiv_to_l_@cntr,w,c
  5854  00153E  0F98               	addlw	152
  5855  001540  5E22               	subwf	__tdiv_to_l_@exp1,f,c
  5856  001542  0E18               	movlw	24
  5857  001544  6E21               	movwf	__tdiv_to_l_@cntr,c
  5858  001546                     l623:
  5859  001546  90D8               	bcf	status,0,c
  5860  001548  361D               	rlcf	__tdiv_to_l_@quot,f,c
  5861  00154A  361E               	rlcf	__tdiv_to_l_@quot+1,f,c
  5862  00154C  361F               	rlcf	__tdiv_to_l_@quot+2,f,c
  5863  00154E  3620               	rlcf	__tdiv_to_l_@quot+3,f,c
  5864  001550  5017               	movf	__tdiv_to_l_@f2,w,c
  5865  001552  5C14               	subwf	__tdiv_to_l_@f1,w,c
  5866  001554  5018               	movf	__tdiv_to_l_@f2+1,w,c
  5867  001556  5815               	subwfb	__tdiv_to_l_@f1+1,w,c
  5868  001558  5019               	movf	__tdiv_to_l_@f2+2,w,c
  5869  00155A  5816               	subwfb	__tdiv_to_l_@f1+2,w,c
  5870  00155C  A0D8               	btfss	status,0,c
  5871  00155E  D007               	goto	l624
  5872  001560  5017               	movf	__tdiv_to_l_@f2,w,c
  5873  001562  5E14               	subwf	__tdiv_to_l_@f1,f,c
  5874  001564  5018               	movf	__tdiv_to_l_@f2+1,w,c
  5875  001566  5A15               	subwfb	__tdiv_to_l_@f1+1,f,c
  5876  001568  5019               	movf	__tdiv_to_l_@f2+2,w,c
  5877  00156A  5A16               	subwfb	__tdiv_to_l_@f1+2,f,c
  5878  00156C  801D               	bsf	__tdiv_to_l_@quot,0,c
  5879  00156E                     l624:
  5880  00156E  90D8               	bcf	status,0,c
  5881  001570  3614               	rlcf	__tdiv_to_l_@f1,f,c
  5882  001572  3615               	rlcf	__tdiv_to_l_@f1+1,f,c
  5883  001574  3616               	rlcf	__tdiv_to_l_@f1+2,f,c
  5884  001576  2E21               	decfsz	__tdiv_to_l_@cntr,f,c
  5885  001578  D7E6               	goto	l623
  5886  00157A  AE22               	btfss	__tdiv_to_l_@exp1,7,c
  5887  00157C  D016               	goto	l626
  5888  00157E  5022               	movf	__tdiv_to_l_@exp1,w,c
  5889  001580  0A80               	xorlw	128
  5890  001582  0F97               	addlw	151
  5891  001584  B0D8               	btfsc	status,0,c
  5892  001586  D009               	goto	l627
  5893  001588  0E00               	movlw	0
  5894  00158A  6E14               	movwf	?__tdiv_to_l_,c
  5895  00158C  0E00               	movlw	0
  5896  00158E  6E15               	movwf	?__tdiv_to_l_+1,c
  5897  001590  0E00               	movlw	0
  5898  001592  6E16               	movwf	?__tdiv_to_l_+2,c
  5899  001594  0E00               	movlw	0
  5900  001596  6E17               	movwf	?__tdiv_to_l_+3,c
  5901  001598  0012               	return	
  5902  00159A                     l627:
  5903  00159A  90D8               	bcf	status,0,c
  5904  00159C  3220               	rrcf	__tdiv_to_l_@quot+3,f,c
  5905  00159E  321F               	rrcf	__tdiv_to_l_@quot+2,f,c
  5906  0015A0  321E               	rrcf	__tdiv_to_l_@quot+1,f,c
  5907  0015A2  321D               	rrcf	__tdiv_to_l_@quot,f,c
  5908  0015A4  3E22               	incfsz	__tdiv_to_l_@exp1,f,c
  5909  0015A6  D7F9               	goto	l627
  5910  0015A8  D015               	goto	u2570
  5911  0015AA                     l626:
  5912  0015AA  0E17               	movlw	23
  5913  0015AC  6422               	cpfsgt	__tdiv_to_l_@exp1,c
  5914  0015AE  D00F               	goto	l632
  5915  0015B0  0E00               	movlw	0
  5916  0015B2  6E14               	movwf	?__tdiv_to_l_,c
  5917  0015B4  0E00               	movlw	0
  5918  0015B6  6E15               	movwf	?__tdiv_to_l_+1,c
  5919  0015B8  0E00               	movlw	0
  5920  0015BA  6E16               	movwf	?__tdiv_to_l_+2,c
  5921  0015BC  0E00               	movlw	0
  5922  0015BE  6E17               	movwf	?__tdiv_to_l_+3,c
  5923  0015C0  0012               	return	
  5924  0015C2  90D8               	bcf	status,0,c
  5925  0015C4  361D               	rlcf	__tdiv_to_l_@quot,f,c
  5926  0015C6  361E               	rlcf	__tdiv_to_l_@quot+1,f,c
  5927  0015C8  361F               	rlcf	__tdiv_to_l_@quot+2,f,c
  5928  0015CA  3620               	rlcf	__tdiv_to_l_@quot+3,f,c
  5929  0015CC  0622               	decf	__tdiv_to_l_@exp1,f,c
  5930  0015CE                     l632:
  5931  0015CE  5022               	movf	__tdiv_to_l_@exp1,w,c
  5932  0015D0  A4D8               	btfss	status,2,c
  5933  0015D2  D7F7               	goto	l633
  5934  0015D4                     u2570:
  5935  0015D4  C01D  F014         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  5936  0015D8  C01E  F015         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  5937  0015DC  C01F  F016         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  5938  0015E0  C020  F017         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  5939  0015E4  0012               	return		;funcret
  5940  0015E6                     __end_of__tdiv_to_l_:
  5941                           	opt stack 0
  5942                           tblptru	equ	0xFF8
  5943                           tblptrh	equ	0xFF7
  5944                           tblptrl	equ	0xFF6
  5945                           tablat	equ	0xFF5
  5946                           prodh	equ	0xFF4
  5947                           prodl	equ	0xFF3
  5948                           intcon	equ	0xFF2
  5949                           intcon2	equ	0xFF1
  5950                           postinc0	equ	0xFEE
  5951                           wreg	equ	0xFE8
  5952                           indf1	equ	0xFE7
  5953                           plusw1	equ	0xFE3
  5954                           fsr1h	equ	0xFE2
  5955                           fsr1l	equ	0xFE1
  5956                           indf2	equ	0xFDF
  5957                           postinc2	equ	0xFDE
  5958                           postdec2	equ	0xFDD
  5959                           plusw2	equ	0xFDB
  5960                           fsr2h	equ	0xFDA
  5961                           fsr2l	equ	0xFD9
  5962                           status	equ	0xFD8
  5963                           
  5964 ;; *************** function __div_to_l_ *****************
  5965 ;; Defined at:
  5966 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fldivl.c"
  5967 ;; Parameters:    Size  Location     Type
  5968 ;;  f1              3   19[COMRAM] unsigned long 
  5969 ;;  f2              3   22[COMRAM] unsigned long 
  5970 ;; Auto vars:     Size  Location     Type
  5971 ;;  quot            4   25[COMRAM] unsigned long 
  5972 ;;  exp1            1   30[COMRAM] unsigned char 
  5973 ;;  cntr            1   29[COMRAM] unsigned char 
  5974 ;; Return value:  Size  Location     Type
  5975 ;;                  4   19[COMRAM] unsigned long 
  5976 ;; Registers used:
  5977 ;;		wreg, status,2, status,0
  5978 ;; Tracked objects:
  5979 ;;		On entry : 0/0
  5980 ;;		On exit  : 0/0
  5981 ;;		Unchanged: 0/0
  5982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5983 ;;      Params:         6       0       0       0       0       0       0       0       0
  5984 ;;      Locals:         6       0       0       0       0       0       0       0       0
  5985 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5986 ;;      Totals:        12       0       0       0       0       0       0       0       0
  5987 ;;Total ram usage:       12 bytes
  5988 ;; Hardware stack levels used:    1
  5989 ;; Hardware stack levels required when called:    2
  5990 ;; This function calls:
  5991 ;;		Nothing
  5992 ;; This function is called by:
  5993 ;;		_sprintf
  5994 ;; This function uses a non-reentrant model
  5995 ;;
  5996                           
  5997                           	psect	text20
  5998  0015E6                     __ptext20:
  5999                           	opt stack 0
  6000  0015E6                     __div_to_l_:
  6001                           	opt stack 27
  6002                           
  6003                           ;incstack = 0
  6004  0015E6  3416               	rlcf	__div_to_l_@f1+2,w,c
  6005  0015E8  3417               	rlcf	__div_to_l_@f1+3,w,c
  6006  0015EA  6E1F               	movwf	__div_to_l_@exp1,c
  6007  0015EC  501F               	movf	__div_to_l_@exp1,w,c
  6008  0015EE  A4D8               	btfss	status,2,c
  6009  0015F0  D009               	goto	l516
  6010  0015F2  0E00               	movlw	0
  6011  0015F4  6E14               	movwf	?__div_to_l_,c
  6012  0015F6  0E00               	movlw	0
  6013  0015F8  6E15               	movwf	?__div_to_l_+1,c
  6014  0015FA  0E00               	movlw	0
  6015  0015FC  6E16               	movwf	?__div_to_l_+2,c
  6016  0015FE  0E00               	movlw	0
  6017  001600  6E17               	movwf	?__div_to_l_+3,c
  6018  001602  0012               	return	
  6019  001604                     l516:
  6020  001604  3419               	rlcf	__div_to_l_@f2+2,w,c
  6021  001606  341A               	rlcf	__div_to_l_@f2+3,w,c
  6022  001608  6E1E               	movwf	__div_to_l_@cntr,c
  6023  00160A  501E               	movf	__div_to_l_@cntr,w,c
  6024  00160C  A4D8               	btfss	status,2,c
  6025  00160E  D009               	goto	l518
  6026  001610  0E00               	movlw	0
  6027  001612  6E14               	movwf	?__div_to_l_,c
  6028  001614  0E00               	movlw	0
  6029  001616  6E15               	movwf	?__div_to_l_+1,c
  6030  001618  0E00               	movlw	0
  6031  00161A  6E16               	movwf	?__div_to_l_+2,c
  6032  00161C  0E00               	movlw	0
  6033  00161E  6E17               	movwf	?__div_to_l_+3,c
  6034  001620  0012               	return	
  6035  001622                     l518:
  6036  001622  8E16               	bsf	__div_to_l_@f1+2,7,c
  6037  001624  0EFF               	movlw	255
  6038  001626  1614               	andwf	__div_to_l_@f1,f,c
  6039  001628  0EFF               	movlw	255
  6040  00162A  1615               	andwf	__div_to_l_@f1+1,f,c
  6041  00162C  0EFF               	movlw	255
  6042  00162E  1616               	andwf	__div_to_l_@f1+2,f,c
  6043  001630  0E00               	movlw	0
  6044  001632  1617               	andwf	__div_to_l_@f1+3,f,c
  6045  001634  8E19               	bsf	__div_to_l_@f2+2,7,c
  6046  001636  0EFF               	movlw	255
  6047  001638  1617               	andwf	__div_to_l_@f2,f,c
  6048  00163A  0EFF               	movlw	255
  6049  00163C  1618               	andwf	__div_to_l_@f2+1,f,c
  6050  00163E  0EFF               	movlw	255
  6051  001640  1619               	andwf	__div_to_l_@f2+2,f,c
  6052  001642  0E00               	movlw	0
  6053  001644  161A               	andwf	__div_to_l_@f2+3,f,c
  6054  001646  0E00               	movlw	0
  6055  001648  6E1A               	movwf	__div_to_l_@quot,c
  6056  00164A  0E00               	movlw	0
  6057  00164C  6E1B               	movwf	__div_to_l_@quot+1,c
  6058  00164E  0E00               	movlw	0
  6059  001650  6E1C               	movwf	__div_to_l_@quot+2,c
  6060  001652  0E00               	movlw	0
  6061  001654  6E1D               	movwf	__div_to_l_@quot+3,c
  6062  001656  0E7F               	movlw	127
  6063  001658  5E1F               	subwf	__div_to_l_@exp1,f,c
  6064  00165A  501E               	movf	__div_to_l_@cntr,w,c
  6065  00165C  0FA0               	addlw	160
  6066  00165E  5E1F               	subwf	__div_to_l_@exp1,f,c
  6067  001660  0E20               	movlw	32
  6068  001662  6E1E               	movwf	__div_to_l_@cntr,c
  6069  001664  90D8               	bcf	status,0,c
  6070  001666  361A               	rlcf	__div_to_l_@quot,f,c
  6071  001668  361B               	rlcf	__div_to_l_@quot+1,f,c
  6072  00166A  361C               	rlcf	__div_to_l_@quot+2,f,c
  6073  00166C  361D               	rlcf	__div_to_l_@quot+3,f,c
  6074  00166E  5017               	movf	__div_to_l_@f2,w,c
  6075  001670  5C14               	subwf	__div_to_l_@f1,w,c
  6076  001672  5018               	movf	__div_to_l_@f2+1,w,c
  6077  001674  5815               	subwfb	__div_to_l_@f1+1,w,c
  6078  001676  5019               	movf	__div_to_l_@f2+2,w,c
  6079  001678  5816               	subwfb	__div_to_l_@f1+2,w,c
  6080  00167A  501A               	movf	__div_to_l_@f2+3,w,c
  6081  00167C  5817               	subwfb	__div_to_l_@f1+3,w,c
  6082  00167E  A0D8               	btfss	status,0,c
  6083  001680  D009               	goto	l520
  6084  001682  5017               	movf	__div_to_l_@f2,w,c
  6085  001684  5E14               	subwf	__div_to_l_@f1,f,c
  6086  001686  5018               	movf	__div_to_l_@f2+1,w,c
  6087  001688  5A15               	subwfb	__div_to_l_@f1+1,f,c
  6088  00168A  5019               	movf	__div_to_l_@f2+2,w,c
  6089  00168C  5A16               	subwfb	__div_to_l_@f1+2,f,c
  6090  00168E  501A               	movf	__div_to_l_@f2+3,w,c
  6091  001690  5A17               	subwfb	__div_to_l_@f1+3,f,c
  6092  001692  801A               	bsf	__div_to_l_@quot,0,c
  6093  001694                     l520:
  6094  001694  90D8               	bcf	status,0,c
  6095  001696  3614               	rlcf	__div_to_l_@f1,f,c
  6096  001698  3615               	rlcf	__div_to_l_@f1+1,f,c
  6097  00169A  3616               	rlcf	__div_to_l_@f1+2,f,c
  6098  00169C  3617               	rlcf	__div_to_l_@f1+3,f,c
  6099  00169E  2E1E               	decfsz	__div_to_l_@cntr,f,c
  6100  0016A0  D7E1               	goto	l519
  6101  0016A2  AE1F               	btfss	__div_to_l_@exp1,7,c
  6102  0016A4  D016               	goto	l522
  6103  0016A6  501F               	movf	__div_to_l_@exp1,w,c
  6104  0016A8  0A80               	xorlw	128
  6105  0016AA  0F9F               	addlw	159
  6106  0016AC  B0D8               	btfsc	status,0,c
  6107  0016AE  D009               	goto	l523
  6108  0016B0  0E00               	movlw	0
  6109  0016B2  6E14               	movwf	?__div_to_l_,c
  6110  0016B4  0E00               	movlw	0
  6111  0016B6  6E15               	movwf	?__div_to_l_+1,c
  6112  0016B8  0E00               	movlw	0
  6113  0016BA  6E16               	movwf	?__div_to_l_+2,c
  6114  0016BC  0E00               	movlw	0
  6115  0016BE  6E17               	movwf	?__div_to_l_+3,c
  6116  0016C0  0012               	return	
  6117  0016C2                     l523:
  6118  0016C2  90D8               	bcf	status,0,c
  6119  0016C4  321D               	rrcf	__div_to_l_@quot+3,f,c
  6120  0016C6  321C               	rrcf	__div_to_l_@quot+2,f,c
  6121  0016C8  321B               	rrcf	__div_to_l_@quot+1,f,c
  6122  0016CA  321A               	rrcf	__div_to_l_@quot,f,c
  6123  0016CC  3E1F               	incfsz	__div_to_l_@exp1,f,c
  6124  0016CE  D7F9               	goto	l523
  6125  0016D0  D015               	goto	u2640
  6126  0016D2                     l522:
  6127  0016D2  0E1F               	movlw	31
  6128  0016D4  641F               	cpfsgt	__div_to_l_@exp1,c
  6129  0016D6  D00F               	goto	l528
  6130  0016D8  0E00               	movlw	0
  6131  0016DA  6E14               	movwf	?__div_to_l_,c
  6132  0016DC  0E00               	movlw	0
  6133  0016DE  6E15               	movwf	?__div_to_l_+1,c
  6134  0016E0  0E00               	movlw	0
  6135  0016E2  6E16               	movwf	?__div_to_l_+2,c
  6136  0016E4  0E00               	movlw	0
  6137  0016E6  6E17               	movwf	?__div_to_l_+3,c
  6138  0016E8  0012               	return	
  6139  0016EA  90D8               	bcf	status,0,c
  6140  0016EC  361A               	rlcf	__div_to_l_@quot,f,c
  6141  0016EE  361B               	rlcf	__div_to_l_@quot+1,f,c
  6142  0016F0  361C               	rlcf	__div_to_l_@quot+2,f,c
  6143  0016F2  361D               	rlcf	__div_to_l_@quot+3,f,c
  6144  0016F4  061F               	decf	__div_to_l_@exp1,f,c
  6145  0016F6                     l528:
  6146  0016F6  501F               	movf	__div_to_l_@exp1,w,c
  6147  0016F8  A4D8               	btfss	status,2,c
  6148  0016FA  D7F7               	goto	l529
  6149  0016FC                     u2640:
  6150  0016FC  C01A  F014         	movff	__div_to_l_@quot,?__div_to_l_
  6151  001700  C01B  F015         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  6152  001704  C01C  F016         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  6153  001708  C01D  F017         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  6154  00170C  0012               	return		;funcret
  6155  00170E                     __end_of__div_to_l_:
  6156                           	opt stack 0
  6157                           tblptru	equ	0xFF8
  6158                           tblptrh	equ	0xFF7
  6159                           tblptrl	equ	0xFF6
  6160                           tablat	equ	0xFF5
  6161                           prodh	equ	0xFF4
  6162                           prodl	equ	0xFF3
  6163                           intcon	equ	0xFF2
  6164                           intcon2	equ	0xFF1
  6165                           postinc0	equ	0xFEE
  6166                           wreg	equ	0xFE8
  6167                           indf1	equ	0xFE7
  6168                           plusw1	equ	0xFE3
  6169                           fsr1h	equ	0xFE2
  6170                           fsr1l	equ	0xFE1
  6171                           indf2	equ	0xFDF
  6172                           postinc2	equ	0xFDE
  6173                           postdec2	equ	0xFDD
  6174                           plusw2	equ	0xFDB
  6175                           fsr2h	equ	0xFDA
  6176                           fsr2l	equ	0xFD9
  6177                           status	equ	0xFD8
  6178                           
  6179 ;; *************** function ___lltoft *****************
  6180 ;; Defined at:
  6181 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
  6182 ;; Parameters:    Size  Location     Type
  6183 ;;  c               4   27[COMRAM] unsigned long 
  6184 ;; Auto vars:     Size  Location     Type
  6185 ;;  exp             1   35[COMRAM] unsigned char 
  6186 ;; Return value:  Size  Location     Type
  6187 ;;                  3   27[COMRAM] float 
  6188 ;; Registers used:
  6189 ;;		wreg, status,2, status,0, cstack
  6190 ;; Tracked objects:
  6191 ;;		On entry : 0/0
  6192 ;;		On exit  : 0/0
  6193 ;;		Unchanged: 0/0
  6194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6195 ;;      Params:         4       0       0       0       0       0       0       0       0
  6196 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6197 ;;      Temps:          4       0       0       0       0       0       0       0       0
  6198 ;;      Totals:         9       0       0       0       0       0       0       0       0
  6199 ;;Total ram usage:        9 bytes
  6200 ;; Hardware stack levels used:    1
  6201 ;; Hardware stack levels required when called:    3
  6202 ;; This function calls:
  6203 ;;		___ftpack
  6204 ;; This function is called by:
  6205 ;;		_sprintf
  6206 ;; This function uses a non-reentrant model
  6207 ;;
  6208                           
  6209                           	psect	text21
  6210  001E40                     __ptext21:
  6211                           	opt stack 0
  6212  001E40                     ___lltoft:
  6213                           	opt stack 26
  6214                           
  6215                           ;incstack = 0
  6216  001E40  0E8E               	movlw	142
  6217  001E42  6E24               	movwf	___lltoft@exp,c
  6218  001E44  D006               	goto	l727
  6219  001E46  90D8               	bcf	status,0,c
  6220  001E48  321F               	rrcf	___lltoft@c+3,f,c
  6221  001E4A  321E               	rrcf	___lltoft@c+2,f,c
  6222  001E4C  321D               	rrcf	___lltoft@c+1,f,c
  6223  001E4E  321C               	rrcf	___lltoft@c,f,c
  6224  001E50  2A24               	incf	___lltoft@exp,f,c
  6225  001E52                     l727:
  6226  001E52  0E00               	movlw	0
  6227  001E54  141C               	andwf	___lltoft@c,w,c
  6228  001E56  6E20               	movwf	??___lltoft& (0+255),c
  6229  001E58  0E00               	movlw	0
  6230  001E5A  141D               	andwf	___lltoft@c+1,w,c
  6231  001E5C  6E21               	movwf	(??___lltoft+1)& (0+255),c
  6232  001E5E  0E00               	movlw	0
  6233  001E60  141E               	andwf	___lltoft@c+2,w,c
  6234  001E62  6E22               	movwf	(??___lltoft+2)& (0+255),c
  6235  001E64  0EFF               	movlw	255
  6236  001E66  141F               	andwf	___lltoft@c+3,w,c
  6237  001E68  6E23               	movwf	(??___lltoft+3)& (0+255),c
  6238  001E6A  5020               	movf	??___lltoft,w,c
  6239  001E6C  1021               	iorwf	??___lltoft+1,w,c
  6240  001E6E  1022               	iorwf	??___lltoft+2,w,c
  6241  001E70  1023               	iorwf	??___lltoft+3,w,c
  6242  001E72  A4D8               	btfss	status,2,c
  6243  001E74  D7E8               	goto	l728
  6244  001E76  C01C  F014         	movff	___lltoft@c,___ftpack@arg
  6245  001E7A  C01D  F015         	movff	___lltoft@c+1,___ftpack@arg+1
  6246  001E7E  C01E  F016         	movff	___lltoft@c+2,___ftpack@arg+2
  6247  001E82  C024  F017         	movff	___lltoft@exp,___ftpack@exp
  6248  001E86  0E00               	movlw	0
  6249  001E88  6E18               	movwf	___ftpack@sign,c
  6250  001E8A  EC3C  F00D         	call	___ftpack	;wreg free
  6251  001E8E  C014  F01C         	movff	?___ftpack,?___lltoft
  6252  001E92  C015  F01D         	movff	?___ftpack+1,?___lltoft+1
  6253  001E96  C016  F01E         	movff	?___ftpack+2,?___lltoft+2
  6254  001E9A  0012               	return	
  6255  001E9C                     __end_of___lltoft:
  6256                           	opt stack 0
  6257                           tblptru	equ	0xFF8
  6258                           tblptrh	equ	0xFF7
  6259                           tblptrl	equ	0xFF6
  6260                           tablat	equ	0xFF5
  6261                           prodh	equ	0xFF4
  6262                           prodl	equ	0xFF3
  6263                           intcon	equ	0xFF2
  6264                           intcon2	equ	0xFF1
  6265                           postinc0	equ	0xFEE
  6266                           wreg	equ	0xFE8
  6267                           indf1	equ	0xFE7
  6268                           plusw1	equ	0xFE3
  6269                           fsr1h	equ	0xFE2
  6270                           fsr1l	equ	0xFE1
  6271                           indf2	equ	0xFDF
  6272                           postinc2	equ	0xFDE
  6273                           postdec2	equ	0xFDD
  6274                           plusw2	equ	0xFDB
  6275                           fsr2h	equ	0xFDA
  6276                           fsr2l	equ	0xFD9
  6277                           status	equ	0xFD8
  6278                           
  6279 ;; *************** function ___llmod *****************
  6280 ;; Defined at:
  6281 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  6282 ;; Parameters:    Size  Location     Type
  6283 ;;  dividend        4   19[COMRAM] unsigned long 
  6284 ;;  divisor         4   23[COMRAM] unsigned long 
  6285 ;; Auto vars:     Size  Location     Type
  6286 ;;  counter         1   27[COMRAM] unsigned char 
  6287 ;; Return value:  Size  Location     Type
  6288 ;;                  4   19[COMRAM] unsigned long 
  6289 ;; Registers used:
  6290 ;;		wreg, status,2, status,0
  6291 ;; Tracked objects:
  6292 ;;		On entry : 0/0
  6293 ;;		On exit  : 0/0
  6294 ;;		Unchanged: 0/0
  6295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6296 ;;      Params:         8       0       0       0       0       0       0       0       0
  6297 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6298 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6299 ;;      Totals:         9       0       0       0       0       0       0       0       0
  6300 ;;Total ram usage:        9 bytes
  6301 ;; Hardware stack levels used:    1
  6302 ;; Hardware stack levels required when called:    2
  6303 ;; This function calls:
  6304 ;;		Nothing
  6305 ;; This function is called by:
  6306 ;;		_sprintf
  6307 ;; This function uses a non-reentrant model
  6308 ;;
  6309                           
  6310                           	psect	text22
  6311  001DDA                     __ptext22:
  6312                           	opt stack 0
  6313  001DDA                     ___llmod:
  6314                           	opt stack 27
  6315                           
  6316                           ;incstack = 0
  6317  001DDA  5018               	movf	___llmod@divisor,w,c
  6318  001DDC  1019               	iorwf	___llmod@divisor+1,w,c
  6319  001DDE  101A               	iorwf	___llmod@divisor+2,w,c
  6320  001DE0  101B               	iorwf	___llmod@divisor+3,w,c
  6321  001DE2  B4D8               	btfsc	status,2,c
  6322  001DE4  D024               	goto	l721
  6323  001DE6  0E01               	movlw	1
  6324  001DE8  6E1C               	movwf	___llmod@counter,c
  6325  001DEA  D006               	goto	l716
  6326  001DEC  90D8               	bcf	status,0,c
  6327  001DEE  3618               	rlcf	___llmod@divisor,f,c
  6328  001DF0  3619               	rlcf	___llmod@divisor+1,f,c
  6329  001DF2  361A               	rlcf	___llmod@divisor+2,f,c
  6330  001DF4  361B               	rlcf	___llmod@divisor+3,f,c
  6331  001DF6  2A1C               	incf	___llmod@counter,f,c
  6332  001DF8                     l716:
  6333  001DF8  AE1B               	btfss	___llmod@divisor+3,7,c
  6334  001DFA  D7F8               	goto	l717
  6335  001DFC                     u2820:
  6336  001DFC  5018               	movf	___llmod@divisor,w,c
  6337  001DFE  5C14               	subwf	___llmod@dividend,w,c
  6338  001E00  5019               	movf	___llmod@divisor+1,w,c
  6339  001E02  5815               	subwfb	___llmod@dividend+1,w,c
  6340  001E04  501A               	movf	___llmod@divisor+2,w,c
  6341  001E06  5816               	subwfb	___llmod@dividend+2,w,c
  6342  001E08  501B               	movf	___llmod@divisor+3,w,c
  6343  001E0A  5817               	subwfb	___llmod@dividend+3,w,c
  6344  001E0C  A0D8               	btfss	status,0,c
  6345  001E0E  D008               	goto	l720
  6346  001E10  5018               	movf	___llmod@divisor,w,c
  6347  001E12  5E14               	subwf	___llmod@dividend,f,c
  6348  001E14  5019               	movf	___llmod@divisor+1,w,c
  6349  001E16  5A15               	subwfb	___llmod@dividend+1,f,c
  6350  001E18  501A               	movf	___llmod@divisor+2,w,c
  6351  001E1A  5A16               	subwfb	___llmod@dividend+2,f,c
  6352  001E1C  501B               	movf	___llmod@divisor+3,w,c
  6353  001E1E  5A17               	subwfb	___llmod@dividend+3,f,c
  6354  001E20                     l720:
  6355  001E20  90D8               	bcf	status,0,c
  6356  001E22  321B               	rrcf	___llmod@divisor+3,f,c
  6357  001E24  321A               	rrcf	___llmod@divisor+2,f,c
  6358  001E26  3219               	rrcf	___llmod@divisor+1,f,c
  6359  001E28  3218               	rrcf	___llmod@divisor,f,c
  6360  001E2A  2E1C               	decfsz	___llmod@counter,f,c
  6361  001E2C  D7E7               	goto	u2820
  6362  001E2E                     l721:
  6363  001E2E  C014  F014         	movff	___llmod@dividend,?___llmod
  6364  001E32  C015  F015         	movff	___llmod@dividend+1,?___llmod+1
  6365  001E36  C016  F016         	movff	___llmod@dividend+2,?___llmod+2
  6366  001E3A  C017  F017         	movff	___llmod@dividend+3,?___llmod+3
  6367  001E3E  0012               	return		;funcret
  6368  001E40                     __end_of___llmod:
  6369                           	opt stack 0
  6370                           tblptru	equ	0xFF8
  6371                           tblptrh	equ	0xFF7
  6372                           tblptrl	equ	0xFF6
  6373                           tablat	equ	0xFF5
  6374                           prodh	equ	0xFF4
  6375                           prodl	equ	0xFF3
  6376                           intcon	equ	0xFF2
  6377                           intcon2	equ	0xFF1
  6378                           postinc0	equ	0xFEE
  6379                           wreg	equ	0xFE8
  6380                           indf1	equ	0xFE7
  6381                           plusw1	equ	0xFE3
  6382                           fsr1h	equ	0xFE2
  6383                           fsr1l	equ	0xFE1
  6384                           indf2	equ	0xFDF
  6385                           postinc2	equ	0xFDE
  6386                           postdec2	equ	0xFDD
  6387                           plusw2	equ	0xFDB
  6388                           fsr2h	equ	0xFDA
  6389                           fsr2l	equ	0xFD9
  6390                           status	equ	0xFD8
  6391                           
  6392 ;; *************** function ___lldiv *****************
  6393 ;; Defined at:
  6394 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  6395 ;; Parameters:    Size  Location     Type
  6396 ;;  dividend        4   19[COMRAM] unsigned long 
  6397 ;;  divisor         4   23[COMRAM] unsigned long 
  6398 ;; Auto vars:     Size  Location     Type
  6399 ;;  quotient        4   27[COMRAM] unsigned long 
  6400 ;;  counter         1   31[COMRAM] unsigned char 
  6401 ;; Return value:  Size  Location     Type
  6402 ;;                  4   19[COMRAM] unsigned long 
  6403 ;; Registers used:
  6404 ;;		wreg, status,2, status,0
  6405 ;; Tracked objects:
  6406 ;;		On entry : 0/0
  6407 ;;		On exit  : 0/0
  6408 ;;		Unchanged: 0/0
  6409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6410 ;;      Params:         8       0       0       0       0       0       0       0       0
  6411 ;;      Locals:         5       0       0       0       0       0       0       0       0
  6412 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6413 ;;      Totals:        13       0       0       0       0       0       0       0       0
  6414 ;;Total ram usage:       13 bytes
  6415 ;; Hardware stack levels used:    1
  6416 ;; Hardware stack levels required when called:    2
  6417 ;; This function calls:
  6418 ;;		Nothing
  6419 ;; This function is called by:
  6420 ;;		_sprintf
  6421 ;; This function uses a non-reentrant model
  6422 ;;
  6423                           
  6424                           	psect	text23
  6425  001CE8                     __ptext23:
  6426                           	opt stack 0
  6427  001CE8                     ___lldiv:
  6428                           	opt stack 27
  6429                           
  6430                           ;incstack = 0
  6431  001CE8  0E00               	movlw	0
  6432  001CEA  6E1C               	movwf	___lldiv@quotient,c
  6433  001CEC  0E00               	movlw	0
  6434  001CEE  6E1D               	movwf	___lldiv@quotient+1,c
  6435  001CF0  0E00               	movlw	0
  6436  001CF2  6E1E               	movwf	___lldiv@quotient+2,c
  6437  001CF4  0E00               	movlw	0
  6438  001CF6  6E1F               	movwf	___lldiv@quotient+3,c
  6439  001CF8  5018               	movf	___lldiv@divisor,w,c
  6440  001CFA  1019               	iorwf	___lldiv@divisor+1,w,c
  6441  001CFC  101A               	iorwf	___lldiv@divisor+2,w,c
  6442  001CFE  101B               	iorwf	___lldiv@divisor+3,w,c
  6443  001D00  B4D8               	btfsc	status,2,c
  6444  001D02  D02A               	goto	l711
  6445  001D04  0E01               	movlw	1
  6446  001D06  6E20               	movwf	___lldiv@counter,c
  6447  001D08  D006               	goto	l706
  6448  001D0A  90D8               	bcf	status,0,c
  6449  001D0C  3618               	rlcf	___lldiv@divisor,f,c
  6450  001D0E  3619               	rlcf	___lldiv@divisor+1,f,c
  6451  001D10  361A               	rlcf	___lldiv@divisor+2,f,c
  6452  001D12  361B               	rlcf	___lldiv@divisor+3,f,c
  6453  001D14  2A20               	incf	___lldiv@counter,f,c
  6454  001D16                     l706:
  6455  001D16  AE1B               	btfss	___lldiv@divisor+3,7,c
  6456  001D18  D7F8               	goto	l707
  6457  001D1A                     u2790:
  6458  001D1A  90D8               	bcf	status,0,c
  6459  001D1C  361C               	rlcf	___lldiv@quotient,f,c
  6460  001D1E  361D               	rlcf	___lldiv@quotient+1,f,c
  6461  001D20  361E               	rlcf	___lldiv@quotient+2,f,c
  6462  001D22  361F               	rlcf	___lldiv@quotient+3,f,c
  6463  001D24  5018               	movf	___lldiv@divisor,w,c
  6464  001D26  5C14               	subwf	___lldiv@dividend,w,c
  6465  001D28  5019               	movf	___lldiv@divisor+1,w,c
  6466  001D2A  5815               	subwfb	___lldiv@dividend+1,w,c
  6467  001D2C  501A               	movf	___lldiv@divisor+2,w,c
  6468  001D2E  5816               	subwfb	___lldiv@dividend+2,w,c
  6469  001D30  501B               	movf	___lldiv@divisor+3,w,c
  6470  001D32  5817               	subwfb	___lldiv@dividend+3,w,c
  6471  001D34  A0D8               	btfss	status,0,c
  6472  001D36  D009               	goto	l710
  6473  001D38  5018               	movf	___lldiv@divisor,w,c
  6474  001D3A  5E14               	subwf	___lldiv@dividend,f,c
  6475  001D3C  5019               	movf	___lldiv@divisor+1,w,c
  6476  001D3E  5A15               	subwfb	___lldiv@dividend+1,f,c
  6477  001D40  501A               	movf	___lldiv@divisor+2,w,c
  6478  001D42  5A16               	subwfb	___lldiv@dividend+2,f,c
  6479  001D44  501B               	movf	___lldiv@divisor+3,w,c
  6480  001D46  5A17               	subwfb	___lldiv@dividend+3,f,c
  6481  001D48  801C               	bsf	___lldiv@quotient,0,c
  6482  001D4A                     l710:
  6483  001D4A  90D8               	bcf	status,0,c
  6484  001D4C  321B               	rrcf	___lldiv@divisor+3,f,c
  6485  001D4E  321A               	rrcf	___lldiv@divisor+2,f,c
  6486  001D50  3219               	rrcf	___lldiv@divisor+1,f,c
  6487  001D52  3218               	rrcf	___lldiv@divisor,f,c
  6488  001D54  2E20               	decfsz	___lldiv@counter,f,c
  6489  001D56  D7E1               	goto	u2790
  6490  001D58                     l711:
  6491  001D58  C01C  F014         	movff	___lldiv@quotient,?___lldiv
  6492  001D5C  C01D  F015         	movff	___lldiv@quotient+1,?___lldiv+1
  6493  001D60  C01E  F016         	movff	___lldiv@quotient+2,?___lldiv+2
  6494  001D64  C01F  F017         	movff	___lldiv@quotient+3,?___lldiv+3
  6495  001D68  0012               	return		;funcret
  6496  001D6A                     __end_of___lldiv:
  6497                           	opt stack 0
  6498                           tblptru	equ	0xFF8
  6499                           tblptrh	equ	0xFF7
  6500                           tblptrl	equ	0xFF6
  6501                           tablat	equ	0xFF5
  6502                           prodh	equ	0xFF4
  6503                           prodl	equ	0xFF3
  6504                           intcon	equ	0xFF2
  6505                           intcon2	equ	0xFF1
  6506                           postinc0	equ	0xFEE
  6507                           wreg	equ	0xFE8
  6508                           indf1	equ	0xFE7
  6509                           plusw1	equ	0xFE3
  6510                           fsr1h	equ	0xFE2
  6511                           fsr1l	equ	0xFE1
  6512                           indf2	equ	0xFDF
  6513                           postinc2	equ	0xFDE
  6514                           postdec2	equ	0xFDD
  6515                           plusw2	equ	0xFDB
  6516                           fsr2h	equ	0xFDA
  6517                           fsr2l	equ	0xFD9
  6518                           status	equ	0xFD8
  6519                           
  6520 ;; *************** function ___fttol *****************
  6521 ;; Defined at:
  6522 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  6523 ;; Parameters:    Size  Location     Type
  6524 ;;  f1              3    0[BANK0 ] float 
  6525 ;; Auto vars:     Size  Location     Type
  6526 ;;  lval            4   10[BANK0 ] unsigned long 
  6527 ;;  exp1            1   14[BANK0 ] unsigned char 
  6528 ;;  sign1           1    9[BANK0 ] unsigned char 
  6529 ;; Return value:  Size  Location     Type
  6530 ;;                  4    0[BANK0 ] long 
  6531 ;; Registers used:
  6532 ;;		wreg, status,2, status,0
  6533 ;; Tracked objects:
  6534 ;;		On entry : 0/0
  6535 ;;		On exit  : 0/0
  6536 ;;		Unchanged: 0/0
  6537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6538 ;;      Params:         0       4       0       0       0       0       0       0       0
  6539 ;;      Locals:         0       6       0       0       0       0       0       0       0
  6540 ;;      Temps:          0       5       0       0       0       0       0       0       0
  6541 ;;      Totals:         0      15       0       0       0       0       0       0       0
  6542 ;;Total ram usage:       15 bytes
  6543 ;; Hardware stack levels used:    1
  6544 ;; Hardware stack levels required when called:    2
  6545 ;; This function calls:
  6546 ;;		Nothing
  6547 ;; This function is called by:
  6548 ;;		_sprintf
  6549 ;; This function uses a non-reentrant model
  6550 ;;
  6551                           
  6552                           	psect	text24
  6553  00170E                     __ptext24:
  6554                           	opt stack 0
  6555  00170E                     ___fttol:
  6556                           	opt stack 27
  6557                           
  6558                           ;incstack = 0
  6559  00170E  C0C6  F0C8         	movff	___fttol@f1+2,??___fttol
  6560  001712  0100               	movlb	0	; () banked
  6561  001714  6BC9               	clrf	(??___fttol+1)& (0+255),b
  6562  001716  6BCA               	clrf	(??___fttol+2)& (0+255),b
  6563  001718  35C5               	rlcf	(___fttol@f1+1)& (0+255),w,b
  6564  00171A  37C8               	rlcf	??___fttol& (0+255),f,b
  6565  00171C  E301               	bnc	u4301
  6566  00171E  81C9               	bsf	(??___fttol+1)& (0+255),0,b
  6567  001720                     u4301:
  6568  001720  51C8               	movf	??___fttol& (0+255),w,b
  6569  001722  6FD2               	movwf	___fttol@exp1& (0+255),b
  6570  001724  51D2               	movf	___fttol@exp1& (0+255),w,b
  6571  001726  A4D8               	btfss	status,2,c
  6572  001728  D009               	goto	l665
  6573                           
  6574                           ; BSR set to: 0
  6575  00172A  0E00               	movlw	0
  6576  00172C  6FC4               	movwf	?___fttol& (0+255),b
  6577  00172E  0E00               	movlw	0
  6578  001730  6FC5               	movwf	(?___fttol+1)& (0+255),b
  6579  001732  0E00               	movlw	0
  6580  001734  6FC6               	movwf	(?___fttol+2)& (0+255),b
  6581  001736  0E00               	movlw	0
  6582  001738  6FC7               	movwf	(?___fttol+3)& (0+255),b
  6583                           
  6584                           ; BSR set to: 0
  6585  00173A  0012               	return	
  6586  00173C                     l665:
  6587                           
  6588                           ; BSR set to: 0
  6589                           
  6590                           ; BSR set to: 0
  6591  00173C  0E17               	movlw	23
  6592  00173E  6FC8               	movwf	??___fttol& (0+255),b
  6593  001740  C0C4  F0C9         	movff	___fttol@f1,??___fttol+1
  6594  001744  C0C5  F0CA         	movff	___fttol@f1+1,??___fttol+2
  6595  001748  C0C6  F0CB         	movff	___fttol@f1+2,??___fttol+3
  6596  00174C  29C8               	incf	??___fttol& (0+255),w,b
  6597  00174E  6FCC               	movwf	(??___fttol+4)& (0+255),b
  6598  001750  D004               	goto	u4320
  6599  001752                     u4325:
  6600  001752  90D8               	bcf	status,0,c
  6601  001754  33CB               	rrcf	(??___fttol+3)& (0+255),f,b
  6602  001756  33CA               	rrcf	(??___fttol+2)& (0+255),f,b
  6603  001758  33C9               	rrcf	(??___fttol+1)& (0+255),f,b
  6604  00175A                     u4320:
  6605  00175A  2FCC               	decfsz	(??___fttol+4)& (0+255),f,b
  6606  00175C  D7FA               	goto	u4325
  6607  00175E  0100               	movlb	0	; () banked
  6608  001760  51C9               	movf	(??___fttol+1)& (0+255),w,b
  6609  001762  6FCD               	movwf	___fttol@sign1& (0+255),b
  6610                           
  6611                           ; BSR set to: 0
  6612  001764  8FC5               	bsf	(___fttol@f1+1)& (0+255),7,b
  6613                           
  6614                           ; BSR set to: 0
  6615  001766  0EFF               	movlw	255
  6616  001768  17C4               	andwf	___fttol@f1& (0+255),f,b
  6617  00176A  0EFF               	movlw	255
  6618  00176C  17C5               	andwf	(___fttol@f1+1)& (0+255),f,b
  6619  00176E  0E00               	movlw	0
  6620  001770  17C6               	andwf	(___fttol@f1+2)& (0+255),f,b
  6621                           
  6622                           ; BSR set to: 0
  6623  001772  51C4               	movf	___fttol@f1& (0+255),w,b
  6624  001774  6FCE               	movwf	___fttol@lval& (0+255),b
  6625  001776  51C5               	movf	(___fttol@f1+1)& (0+255),w,b
  6626  001778  6FCF               	movwf	(___fttol@lval+1)& (0+255),b
  6627  00177A  51C6               	movf	(___fttol@f1+2)& (0+255),w,b
  6628  00177C  6FD0               	movwf	(___fttol@lval+2)& (0+255),b
  6629  00177E  6BD1               	clrf	(___fttol@lval+3)& (0+255),b
  6630                           
  6631                           ; BSR set to: 0
  6632  001780  0E8E               	movlw	142
  6633  001782  5FD2               	subwf	___fttol@exp1& (0+255),f,b
  6634                           
  6635                           ; BSR set to: 0
  6636  001784  AFD2               	btfss	___fttol@exp1& (0+255),7,b
  6637  001786  D016               	goto	l667
  6638                           
  6639                           ; BSR set to: 0
  6640  001788  51D2               	movf	___fttol@exp1& (0+255),w,b
  6641  00178A  0A80               	xorlw	128
  6642  00178C  0F8F               	addlw	143
  6643  00178E  B0D8               	btfsc	status,0,c
  6644  001790  D009               	goto	l668
  6645                           
  6646                           ; BSR set to: 0
  6647  001792  0E00               	movlw	0
  6648  001794  6FC4               	movwf	?___fttol& (0+255),b
  6649  001796  0E00               	movlw	0
  6650  001798  6FC5               	movwf	(?___fttol+1)& (0+255),b
  6651  00179A  0E00               	movlw	0
  6652  00179C  6FC6               	movwf	(?___fttol+2)& (0+255),b
  6653  00179E  0E00               	movlw	0
  6654  0017A0  6FC7               	movwf	(?___fttol+3)& (0+255),b
  6655                           
  6656                           ; BSR set to: 0
  6657  0017A2  0012               	return	
  6658  0017A4                     l668:
  6659                           
  6660                           ; BSR set to: 0
  6661                           
  6662                           ; BSR set to: 0
  6663                           
  6664                           ; BSR set to: 0
  6665  0017A4  90D8               	bcf	status,0,c
  6666  0017A6  33D1               	rrcf	(___fttol@lval+3)& (0+255),f,b
  6667  0017A8  33D0               	rrcf	(___fttol@lval+2)& (0+255),f,b
  6668  0017AA  33CF               	rrcf	(___fttol@lval+1)& (0+255),f,b
  6669  0017AC  33CE               	rrcf	___fttol@lval& (0+255),f,b
  6670                           
  6671                           ; BSR set to: 0
  6672  0017AE  3FD2               	incfsz	___fttol@exp1& (0+255),f,b
  6673  0017B0  D7F9               	goto	l668
  6674                           
  6675                           ; BSR set to: 0
  6676  0017B2  D015               	goto	u4360
  6677  0017B4                     l667:
  6678                           
  6679                           ; BSR set to: 0
  6680                           
  6681                           ; BSR set to: 0
  6682  0017B4  0E17               	movlw	23
  6683  0017B6  65D2               	cpfsgt	___fttol@exp1& (0+255),b
  6684  0017B8  D00F               	goto	l673
  6685                           
  6686                           ; BSR set to: 0
  6687  0017BA  0E00               	movlw	0
  6688  0017BC  6FC4               	movwf	?___fttol& (0+255),b
  6689  0017BE  0E00               	movlw	0
  6690  0017C0  6FC5               	movwf	(?___fttol+1)& (0+255),b
  6691  0017C2  0E00               	movlw	0
  6692  0017C4  6FC6               	movwf	(?___fttol+2)& (0+255),b
  6693  0017C6  0E00               	movlw	0
  6694  0017C8  6FC7               	movwf	(?___fttol+3)& (0+255),b
  6695                           
  6696                           ; BSR set to: 0
  6697  0017CA  0012               	return	
  6698  0017CC                     
  6699                           ; BSR set to: 0
  6700                           
  6701                           ; BSR set to: 0
  6702  0017CC  90D8               	bcf	status,0,c
  6703  0017CE  37CE               	rlcf	___fttol@lval& (0+255),f,b
  6704  0017D0  37CF               	rlcf	(___fttol@lval+1)& (0+255),f,b
  6705  0017D2  37D0               	rlcf	(___fttol@lval+2)& (0+255),f,b
  6706  0017D4  37D1               	rlcf	(___fttol@lval+3)& (0+255),f,b
  6707  0017D6  07D2               	decf	___fttol@exp1& (0+255),f,b
  6708  0017D8                     l673:
  6709                           
  6710                           ; BSR set to: 0
  6711                           
  6712                           ; BSR set to: 0
  6713  0017D8  51D2               	movf	___fttol@exp1& (0+255),w,b
  6714  0017DA  A4D8               	btfss	status,2,c
  6715  0017DC  D7F7               	goto	l674
  6716  0017DE                     u4360:
  6717                           
  6718                           ; BSR set to: 0
  6719                           
  6720                           ; BSR set to: 0
  6721                           
  6722                           ; BSR set to: 0
  6723  0017DE  51CD               	movf	___fttol@sign1& (0+255),w,b
  6724  0017E0  B4D8               	btfsc	status,2,c
  6725  0017E2  D008               	goto	l676
  6726                           
  6727                           ; BSR set to: 0
  6728  0017E4  1FD1               	comf	(___fttol@lval+3)& (0+255),f,b
  6729  0017E6  1FD0               	comf	(___fttol@lval+2)& (0+255),f,b
  6730  0017E8  1FCF               	comf	(___fttol@lval+1)& (0+255),f,b
  6731  0017EA  6DCE               	negf	___fttol@lval& (0+255),b
  6732  0017EC  0E00               	movlw	0
  6733  0017EE  23CF               	addwfc	(___fttol@lval+1)& (0+255),f,b
  6734  0017F0  23D0               	addwfc	(___fttol@lval+2)& (0+255),f,b
  6735  0017F2  23D1               	addwfc	(___fttol@lval+3)& (0+255),f,b
  6736  0017F4                     l676:
  6737                           
  6738                           ; BSR set to: 0
  6739                           
  6740                           ; BSR set to: 0
  6741  0017F4  C0CE  F0C4         	movff	___fttol@lval,?___fttol
  6742  0017F8  C0CF  F0C5         	movff	___fttol@lval+1,?___fttol+1
  6743  0017FC  C0D0  F0C6         	movff	___fttol@lval+2,?___fttol+2
  6744  001800  C0D1  F0C7         	movff	___fttol@lval+3,?___fttol+3
  6745  001804  0012               	return	
  6746  001806                     __end_of___fttol:
  6747                           	opt stack 0
  6748                           tblptru	equ	0xFF8
  6749                           tblptrh	equ	0xFF7
  6750                           tblptrl	equ	0xFF6
  6751                           tablat	equ	0xFF5
  6752                           prodh	equ	0xFF4
  6753                           prodl	equ	0xFF3
  6754                           intcon	equ	0xFF2
  6755                           intcon2	equ	0xFF1
  6756                           postinc0	equ	0xFEE
  6757                           wreg	equ	0xFE8
  6758                           indf1	equ	0xFE7
  6759                           plusw1	equ	0xFE3
  6760                           fsr1h	equ	0xFE2
  6761                           fsr1l	equ	0xFE1
  6762                           indf2	equ	0xFDF
  6763                           postinc2	equ	0xFDE
  6764                           postdec2	equ	0xFDD
  6765                           plusw2	equ	0xFDB
  6766                           fsr2h	equ	0xFDA
  6767                           fsr2l	equ	0xFD9
  6768                           status	equ	0xFD8
  6769                           
  6770 ;; *************** function ___ftsub *****************
  6771 ;; Defined at:
  6772 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
  6773 ;; Parameters:    Size  Location     Type
  6774 ;;  f1              3   16[BANK0 ] float 
  6775 ;;  f2              3   19[BANK0 ] float 
  6776 ;; Auto vars:     Size  Location     Type
  6777 ;;		None
  6778 ;; Return value:  Size  Location     Type
  6779 ;;                  3   16[BANK0 ] float 
  6780 ;; Registers used:
  6781 ;;		wreg, status,2, status,0, cstack
  6782 ;; Tracked objects:
  6783 ;;		On entry : 0/0
  6784 ;;		On exit  : 0/0
  6785 ;;		Unchanged: 0/0
  6786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6787 ;;      Params:         0       6       0       0       0       0       0       0       0
  6788 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6789 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6790 ;;      Totals:         0       6       0       0       0       0       0       0       0
  6791 ;;Total ram usage:        6 bytes
  6792 ;; Hardware stack levels used:    1
  6793 ;; Hardware stack levels required when called:    4
  6794 ;; This function calls:
  6795 ;;		___ftadd
  6796 ;; This function is called by:
  6797 ;;		_sprintf
  6798 ;; This function uses a non-reentrant model
  6799 ;;
  6800                           
  6801                           	psect	text25
  6802  002138                     __ptext25:
  6803                           	opt stack 0
  6804  002138                     ___ftsub:
  6805                           	opt stack 25
  6806                           
  6807                           ; BSR set to: 0
  6808                           ;incstack = 0
  6809  002138  0100               	movlb	0	; () banked
  6810  00213A  51D7               	movf	___ftsub@f2& (0+255),w,b
  6811  00213C  11D8               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  6812  00213E  11D9               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  6813  002140  B4D8               	btfsc	status,2,c
  6814  002142  D006               	goto	l661
  6815                           
  6816                           ; BSR set to: 0
  6817  002144  0E00               	movlw	0
  6818  002146  1BD7               	xorwf	___ftsub@f2& (0+255),f,b
  6819  002148  0E00               	movlw	0
  6820  00214A  1BD8               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  6821  00214C  0E80               	movlw	128
  6822  00214E  1BD9               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  6823  002150                     l661:
  6824                           
  6825                           ; BSR set to: 0
  6826                           
  6827                           ; BSR set to: 0
  6828  002150  C0D4  F0CB         	movff	___ftsub@f1,___ftadd@f1
  6829  002154  C0D5  F0CC         	movff	___ftsub@f1+1,___ftadd@f1+1
  6830  002158  C0D6  F0CD         	movff	___ftsub@f1+2,___ftadd@f1+2
  6831  00215C  C0D7  F0CE         	movff	___ftsub@f2,___ftadd@f2
  6832  002160  C0D8  F0CF         	movff	___ftsub@f2+1,___ftadd@f2+1
  6833  002164  C0D9  F0D0         	movff	___ftsub@f2+2,___ftadd@f2+2
  6834  002168  EC83  F009         	call	___ftadd	;wreg free
  6835  00216C  C0CB  F0D4         	movff	?___ftadd,?___ftsub
  6836  002170  C0CC  F0D5         	movff	?___ftadd+1,?___ftsub+1
  6837  002174  C0CD  F0D6         	movff	?___ftadd+2,?___ftsub+2
  6838  002178  0012               	return	
  6839  00217A                     __end_of___ftsub:
  6840                           	opt stack 0
  6841                           tblptru	equ	0xFF8
  6842                           tblptrh	equ	0xFF7
  6843                           tblptrl	equ	0xFF6
  6844                           tablat	equ	0xFF5
  6845                           prodh	equ	0xFF4
  6846                           prodl	equ	0xFF3
  6847                           intcon	equ	0xFF2
  6848                           intcon2	equ	0xFF1
  6849                           postinc0	equ	0xFEE
  6850                           wreg	equ	0xFE8
  6851                           indf1	equ	0xFE7
  6852                           plusw1	equ	0xFE3
  6853                           fsr1h	equ	0xFE2
  6854                           fsr1l	equ	0xFE1
  6855                           indf2	equ	0xFDF
  6856                           postinc2	equ	0xFDE
  6857                           postdec2	equ	0xFDD
  6858                           plusw2	equ	0xFDB
  6859                           fsr2h	equ	0xFDA
  6860                           fsr2l	equ	0xFD9
  6861                           status	equ	0xFD8
  6862                           
  6863 ;; *************** function ___ftadd *****************
  6864 ;; Defined at:
  6865 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  6866 ;; Parameters:    Size  Location     Type
  6867 ;;  f1              3    7[BANK0 ] float 
  6868 ;;  f2              3   10[BANK0 ] float 
  6869 ;; Auto vars:     Size  Location     Type
  6870 ;;  exp1            1   15[BANK0 ] unsigned char 
  6871 ;;  exp2            1   14[BANK0 ] unsigned char 
  6872 ;;  sign            1   13[BANK0 ] unsigned char 
  6873 ;; Return value:  Size  Location     Type
  6874 ;;                  3    7[BANK0 ] float 
  6875 ;; Registers used:
  6876 ;;		wreg, status,2, status,0, cstack
  6877 ;; Tracked objects:
  6878 ;;		On entry : 0/0
  6879 ;;		On exit  : 0/0
  6880 ;;		Unchanged: 0/0
  6881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6882 ;;      Params:         0       6       0       0       0       0       0       0       0
  6883 ;;      Locals:         0       3       0       0       0       0       0       0       0
  6884 ;;      Temps:          3       0       0       0       0       0       0       0       0
  6885 ;;      Totals:         3       9       0       0       0       0       0       0       0
  6886 ;;Total ram usage:       12 bytes
  6887 ;; Hardware stack levels used:    1
  6888 ;; Hardware stack levels required when called:    3
  6889 ;; This function calls:
  6890 ;;		___ftpack
  6891 ;; This function is called by:
  6892 ;;		_sprintf
  6893 ;;		___ftsub
  6894 ;; This function uses a non-reentrant model
  6895 ;;
  6896                           
  6897                           	psect	text26
  6898  001306                     __ptext26:
  6899                           	opt stack 0
  6900  001306                     ___ftadd:
  6901                           	opt stack 25
  6902                           
  6903                           ;incstack = 0
  6904  001306  C0CD  F03A         	movff	___ftadd@f1+2,??___ftadd
  6905  00130A  6A3B               	clrf	(??___ftadd+1)& (0+255),c
  6906  00130C  6A3C               	clrf	(??___ftadd+2)& (0+255),c
  6907  00130E  0100               	movlb	0	; () banked
  6908  001310  35CC               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  6909  001312  363A               	rlcf	??___ftadd& (0+255),f,c
  6910  001314  E301               	bnc	u3831
  6911  001316  803B               	bsf	(??___ftadd+1)& (0+255),0,c
  6912  001318                     u3831:
  6913  001318  503A               	movf	??___ftadd,w,c
  6914  00131A  6FD3               	movwf	___ftadd@exp1& (0+255),b
  6915  00131C  C0D0  F03A         	movff	___ftadd@f2+2,??___ftadd
  6916  001320  6A3B               	clrf	(??___ftadd+1)& (0+255),c
  6917  001322  6A3C               	clrf	(??___ftadd+2)& (0+255),c
  6918  001324  35CF               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  6919  001326  363A               	rlcf	??___ftadd& (0+255),f,c
  6920  001328  E301               	bnc	u3841
  6921  00132A  803B               	bsf	(??___ftadd+1)& (0+255),0,c
  6922  00132C                     u3841:
  6923  00132C  503A               	movf	??___ftadd,w,c
  6924  00132E  6FD2               	movwf	___ftadd@exp2& (0+255),b
  6925                           
  6926                           ; BSR set to: 0
  6927  001330  51D3               	movf	___ftadd@exp1& (0+255),w,b
  6928  001332  B4D8               	btfsc	status,2,c
  6929  001334  D00B               	goto	u3870
  6930                           
  6931                           ; BSR set to: 0
  6932  001336  51D2               	movf	___ftadd@exp2& (0+255),w,b
  6933  001338  5DD3               	subwf	___ftadd@exp1& (0+255),w,b
  6934  00133A  B0D8               	btfsc	status,0,c
  6935  00133C  D00E               	goto	l579
  6936                           
  6937                           ; BSR set to: 0
  6938  00133E  51D3               	movf	___ftadd@exp1& (0+255),w,b
  6939  001340  0800               	sublw	0
  6940  001342  25D2               	addwf	___ftadd@exp2& (0+255),w,b
  6941  001344  6E3A               	movwf	??___ftadd& (0+255),c
  6942  001346  0E18               	movlw	24
  6943  001348  643A               	cpfsgt	??___ftadd,c
  6944  00134A  D007               	goto	l579
  6945  00134C                     u3870:
  6946                           
  6947                           ; BSR set to: 0
  6948  00134C  C0CE  F0CB         	movff	___ftadd@f2,?___ftadd
  6949  001350  C0CF  F0CC         	movff	___ftadd@f2+1,?___ftadd+1
  6950  001354  C0D0  F0CD         	movff	___ftadd@f2+2,?___ftadd+2
  6951  001358  0012               	return	
  6952  00135A                     l579:
  6953                           
  6954                           ; BSR set to: 0
  6955                           
  6956                           ; BSR set to: 0
  6957  00135A  51D2               	movf	___ftadd@exp2& (0+255),w,b
  6958  00135C  B4D8               	btfsc	status,2,c
  6959  00135E  D00B               	goto	u3900
  6960                           
  6961                           ; BSR set to: 0
  6962  001360  51D3               	movf	___ftadd@exp1& (0+255),w,b
  6963  001362  5DD2               	subwf	___ftadd@exp2& (0+255),w,b
  6964  001364  B0D8               	btfsc	status,0,c
  6965  001366  D00E               	goto	l583
  6966                           
  6967                           ; BSR set to: 0
  6968  001368  51D2               	movf	___ftadd@exp2& (0+255),w,b
  6969  00136A  0800               	sublw	0
  6970  00136C  25D3               	addwf	___ftadd@exp1& (0+255),w,b
  6971  00136E  6E3A               	movwf	??___ftadd& (0+255),c
  6972  001370  0E18               	movlw	24
  6973  001372  643A               	cpfsgt	??___ftadd,c
  6974  001374  D007               	goto	l583
  6975  001376                     u3900:
  6976                           
  6977                           ; BSR set to: 0
  6978  001376  C0CB  F0CB         	movff	___ftadd@f1,?___ftadd
  6979  00137A  C0CC  F0CC         	movff	___ftadd@f1+1,?___ftadd+1
  6980  00137E  C0CD  F0CD         	movff	___ftadd@f1+2,?___ftadd+2
  6981  001382  0012               	return	
  6982  001384                     l583:
  6983                           
  6984                           ; BSR set to: 0
  6985                           
  6986                           ; BSR set to: 0
  6987  001384  0E06               	movlw	6
  6988  001386  6FD1               	movwf	___ftadd@sign& (0+255),b
  6989                           
  6990                           ; BSR set to: 0
  6991  001388  BFCD               	btfsc	(___ftadd@f1+2)& (0+255),7,b
  6992                           
  6993                           ; BSR set to: 0
  6994  00138A  8FD1               	bsf	___ftadd@sign& (0+255),7,b
  6995                           
  6996                           ; BSR set to: 0
  6997                           
  6998                           ; BSR set to: 0
  6999  00138C  BFD0               	btfsc	(___ftadd@f2+2)& (0+255),7,b
  7000                           
  7001                           ; BSR set to: 0
  7002  00138E  8DD1               	bsf	___ftadd@sign& (0+255),6,b
  7003                           
  7004                           ; BSR set to: 0
  7005  001390  8FCC               	bsf	(___ftadd@f1+1)& (0+255),7,b
  7006                           
  7007                           ; BSR set to: 0
  7008  001392  0EFF               	movlw	255
  7009  001394  17CB               	andwf	___ftadd@f1& (0+255),f,b
  7010  001396  0EFF               	movlw	255
  7011  001398  17CC               	andwf	(___ftadd@f1+1)& (0+255),f,b
  7012  00139A  0E00               	movlw	0
  7013  00139C  17CD               	andwf	(___ftadd@f1+2)& (0+255),f,b
  7014  00139E  8FCF               	bsf	(___ftadd@f2+1)& (0+255),7,b
  7015                           
  7016                           ; BSR set to: 0
  7017  0013A0  0EFF               	movlw	255
  7018  0013A2  17CE               	andwf	___ftadd@f2& (0+255),f,b
  7019  0013A4  0EFF               	movlw	255
  7020  0013A6  17CF               	andwf	(___ftadd@f2+1)& (0+255),f,b
  7021  0013A8  0E00               	movlw	0
  7022  0013AA  17D0               	andwf	(___ftadd@f2+2)& (0+255),f,b
  7023                           
  7024                           ; BSR set to: 0
  7025  0013AC  51D2               	movf	___ftadd@exp2& (0+255),w,b
  7026  0013AE  5DD3               	subwf	___ftadd@exp1& (0+255),w,b
  7027  0013B0  B0D8               	btfsc	status,0,c
  7028  0013B2  D01B               	goto	l588
  7029  0013B4                     u3930:
  7030                           
  7031                           ; BSR set to: 0
  7032                           
  7033                           ; BSR set to: 0
  7034  0013B4  90D8               	bcf	status,0,c
  7035  0013B6  37CE               	rlcf	___ftadd@f2& (0+255),f,b
  7036  0013B8  37CF               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  7037  0013BA  37D0               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  7038  0013BC  07D2               	decf	___ftadd@exp2& (0+255),f,b
  7039                           
  7040                           ; BSR set to: 0
  7041  0013BE  51D3               	movf	___ftadd@exp1& (0+255),w,b
  7042  0013C0  19D2               	xorwf	___ftadd@exp2& (0+255),w,b
  7043  0013C2  B4D8               	btfsc	status,2,c
  7044  0013C4  D00D               	goto	l593
  7045                           
  7046                           ; BSR set to: 0
  7047  0013C6  07D1               	decf	___ftadd@sign& (0+255),f,b
  7048  0013C8  C0D1  F03A         	movff	___ftadd@sign,??___ftadd
  7049  0013CC  0E07               	movlw	7
  7050  0013CE  163A               	andwf	??___ftadd,f,c
  7051  0013D0  B4D8               	btfsc	status,2,c
  7052  0013D2  D006               	goto	l593
  7053  0013D4  D7EF               	goto	u3930
  7054  0013D6                     
  7055                           ; BSR set to: 0
  7056                           
  7057                           ; BSR set to: 0
  7058  0013D6  90D8               	bcf	status,0,c
  7059  0013D8  33CD               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  7060  0013DA  33CC               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  7061  0013DC  33CB               	rrcf	___ftadd@f1& (0+255),f,b
  7062  0013DE  2BD3               	incf	___ftadd@exp1& (0+255),f,b
  7063  0013E0                     l593:
  7064                           
  7065                           ; BSR set to: 0
  7066                           
  7067                           ; BSR set to: 0
  7068  0013E0  51D2               	movf	___ftadd@exp2& (0+255),w,b
  7069  0013E2  19D3               	xorwf	___ftadd@exp1& (0+255),w,b
  7070  0013E4  B4D8               	btfsc	status,2,c
  7071  0013E6  D01F               	goto	u4000
  7072  0013E8  D7F6               	goto	l594
  7073  0013EA                     l588:
  7074                           
  7075                           ; BSR set to: 0
  7076                           
  7077                           ; BSR set to: 0
  7078  0013EA  51D3               	movf	___ftadd@exp1& (0+255),w,b
  7079  0013EC  5DD2               	subwf	___ftadd@exp2& (0+255),w,b
  7080  0013EE  B0D8               	btfsc	status,0,c
  7081  0013F0  D01A               	goto	u4000
  7082  0013F2                     u3970:
  7083                           
  7084                           ; BSR set to: 0
  7085                           
  7086                           ; BSR set to: 0
  7087  0013F2  90D8               	bcf	status,0,c
  7088  0013F4  37CB               	rlcf	___ftadd@f1& (0+255),f,b
  7089  0013F6  37CC               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  7090  0013F8  37CD               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  7091  0013FA  07D3               	decf	___ftadd@exp1& (0+255),f,b
  7092                           
  7093                           ; BSR set to: 0
  7094  0013FC  51D3               	movf	___ftadd@exp1& (0+255),w,b
  7095  0013FE  19D2               	xorwf	___ftadd@exp2& (0+255),w,b
  7096  001400  B4D8               	btfsc	status,2,c
  7097  001402  D00D               	goto	l602
  7098                           
  7099                           ; BSR set to: 0
  7100  001404  07D1               	decf	___ftadd@sign& (0+255),f,b
  7101  001406  C0D1  F03A         	movff	___ftadd@sign,??___ftadd
  7102  00140A  0E07               	movlw	7
  7103  00140C  163A               	andwf	??___ftadd,f,c
  7104  00140E  B4D8               	btfsc	status,2,c
  7105  001410  D006               	goto	l602
  7106  001412  D7EF               	goto	u3970
  7107  001414                     
  7108                           ; BSR set to: 0
  7109                           
  7110                           ; BSR set to: 0
  7111  001414  90D8               	bcf	status,0,c
  7112  001416  33D0               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  7113  001418  33CF               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  7114  00141A  33CE               	rrcf	___ftadd@f2& (0+255),f,b
  7115  00141C  2BD2               	incf	___ftadd@exp2& (0+255),f,b
  7116  00141E                     l602:
  7117                           
  7118                           ; BSR set to: 0
  7119                           
  7120                           ; BSR set to: 0
  7121  00141E  51D2               	movf	___ftadd@exp2& (0+255),w,b
  7122  001420  19D3               	xorwf	___ftadd@exp1& (0+255),w,b
  7123  001422  A4D8               	btfss	status,2,c
  7124  001424  D7F7               	goto	l603
  7125  001426                     u4000:
  7126                           
  7127                           ; BSR set to: 0
  7128                           
  7129                           ; BSR set to: 0
  7130                           
  7131                           ; BSR set to: 0
  7132  001426  AFD1               	btfss	___ftadd@sign& (0+255),7,b
  7133  001428  D00C               	goto	l605
  7134                           
  7135                           ; BSR set to: 0
  7136  00142A  0EFF               	movlw	255
  7137  00142C  1BCB               	xorwf	___ftadd@f1& (0+255),f,b
  7138  00142E  0EFF               	movlw	255
  7139  001430  1BCC               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  7140  001432  0EFF               	movlw	255
  7141  001434  1BCD               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  7142  001436  0E01               	movlw	1
  7143  001438  27CB               	addwf	___ftadd@f1& (0+255),f,b
  7144  00143A  0E00               	movlw	0
  7145  00143C  23CC               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  7146  00143E  0E00               	movlw	0
  7147  001440  23CD               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  7148  001442                     l605:
  7149                           
  7150                           ; BSR set to: 0
  7151  001442  ADD1               	btfss	___ftadd@sign& (0+255),6,b
  7152  001444  D00C               	goto	l606
  7153                           
  7154                           ; BSR set to: 0
  7155  001446  0EFF               	movlw	255
  7156  001448  1BCE               	xorwf	___ftadd@f2& (0+255),f,b
  7157  00144A  0EFF               	movlw	255
  7158  00144C  1BCF               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  7159  00144E  0EFF               	movlw	255
  7160  001450  1BD0               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  7161  001452  0E01               	movlw	1
  7162  001454  27CE               	addwf	___ftadd@f2& (0+255),f,b
  7163  001456  0E00               	movlw	0
  7164  001458  23CF               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  7165  00145A  0E00               	movlw	0
  7166  00145C  23D0               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  7167  00145E                     l606:
  7168                           
  7169                           ; BSR set to: 0
  7170                           
  7171                           ; BSR set to: 0
  7172  00145E  0E00               	movlw	0
  7173  001460  6FD1               	movwf	___ftadd@sign& (0+255),b
  7174                           
  7175                           ; BSR set to: 0
  7176  001462  51CB               	movf	___ftadd@f1& (0+255),w,b
  7177  001464  27CE               	addwf	___ftadd@f2& (0+255),f,b
  7178  001466  51CC               	movf	(___ftadd@f1+1)& (0+255),w,b
  7179  001468  23CF               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  7180  00146A  51CD               	movf	(___ftadd@f1+2)& (0+255),w,b
  7181  00146C  23D0               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  7182                           
  7183                           ; BSR set to: 0
  7184  00146E  AFD0               	btfss	(___ftadd@f2+2)& (0+255),7,b
  7185  001470  D00E               	goto	l607
  7186                           
  7187                           ; BSR set to: 0
  7188  001472  0EFF               	movlw	255
  7189  001474  1BCE               	xorwf	___ftadd@f2& (0+255),f,b
  7190  001476  0EFF               	movlw	255
  7191  001478  1BCF               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  7192  00147A  0EFF               	movlw	255
  7193  00147C  1BD0               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  7194  00147E  0E01               	movlw	1
  7195  001480  27CE               	addwf	___ftadd@f2& (0+255),f,b
  7196  001482  0E00               	movlw	0
  7197  001484  23CF               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  7198  001486  0E00               	movlw	0
  7199  001488  23D0               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  7200                           
  7201                           ; BSR set to: 0
  7202  00148A  0E01               	movlw	1
  7203  00148C  6FD1               	movwf	___ftadd@sign& (0+255),b
  7204  00148E                     l607:
  7205                           
  7206                           ; BSR set to: 0
  7207                           
  7208                           ; BSR set to: 0
  7209  00148E  C0CE  F014         	movff	___ftadd@f2,___ftpack@arg
  7210  001492  C0CF  F015         	movff	___ftadd@f2+1,___ftpack@arg+1
  7211  001496  C0D0  F016         	movff	___ftadd@f2+2,___ftpack@arg+2
  7212  00149A  C0D3  F017         	movff	___ftadd@exp1,___ftpack@exp
  7213  00149E  C0D1  F018         	movff	___ftadd@sign,___ftpack@sign
  7214  0014A2  EC3C  F00D         	call	___ftpack	;wreg free
  7215  0014A6  C014  F0CB         	movff	?___ftpack,?___ftadd
  7216  0014AA  C015  F0CC         	movff	?___ftpack+1,?___ftadd+1
  7217  0014AE  C016  F0CD         	movff	?___ftpack+2,?___ftadd+2
  7218  0014B2  0012               	return	
  7219  0014B4                     __end_of___ftadd:
  7220                           	opt stack 0
  7221                           tblptru	equ	0xFF8
  7222                           tblptrh	equ	0xFF7
  7223                           tblptrl	equ	0xFF6
  7224                           tablat	equ	0xFF5
  7225                           prodh	equ	0xFF4
  7226                           prodl	equ	0xFF3
  7227                           intcon	equ	0xFF2
  7228                           intcon2	equ	0xFF1
  7229                           postinc0	equ	0xFEE
  7230                           wreg	equ	0xFE8
  7231                           indf1	equ	0xFE7
  7232                           plusw1	equ	0xFE3
  7233                           fsr1h	equ	0xFE2
  7234                           fsr1l	equ	0xFE1
  7235                           indf2	equ	0xFDF
  7236                           postinc2	equ	0xFDE
  7237                           postdec2	equ	0xFDD
  7238                           plusw2	equ	0xFDB
  7239                           fsr2h	equ	0xFDA
  7240                           fsr2l	equ	0xFD9
  7241                           status	equ	0xFD8
  7242                           
  7243 ;; *************** function ___ftneg *****************
  7244 ;; Defined at:
  7245 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
  7246 ;; Parameters:    Size  Location     Type
  7247 ;;  f1              3   19[COMRAM] float 
  7248 ;; Auto vars:     Size  Location     Type
  7249 ;;		None
  7250 ;; Return value:  Size  Location     Type
  7251 ;;                  3   19[COMRAM] float 
  7252 ;; Registers used:
  7253 ;;		wreg, status,2, status,0
  7254 ;; Tracked objects:
  7255 ;;		On entry : 0/0
  7256 ;;		On exit  : 0/0
  7257 ;;		Unchanged: 0/0
  7258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7259 ;;      Params:         3       0       0       0       0       0       0       0       0
  7260 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7261 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7262 ;;      Totals:         3       0       0       0       0       0       0       0       0
  7263 ;;Total ram usage:        3 bytes
  7264 ;; Hardware stack levels used:    1
  7265 ;; Hardware stack levels required when called:    2
  7266 ;; This function calls:
  7267 ;;		Nothing
  7268 ;; This function is called by:
  7269 ;;		_sprintf
  7270 ;; This function uses a non-reentrant model
  7271 ;;
  7272                           
  7273                           	psect	text27
  7274  002282                     __ptext27:
  7275                           	opt stack 0
  7276  002282                     ___ftneg:
  7277                           	opt stack 27
  7278                           
  7279                           ;incstack = 0
  7280  002282  5014               	movf	___ftneg@f1,w,c
  7281  002284  1015               	iorwf	___ftneg@f1+1,w,c
  7282  002286  1016               	iorwf	___ftneg@f1+2,w,c
  7283  002288  B4D8               	btfsc	status,2,c
  7284  00228A  D006               	goto	l655
  7285  00228C  0E00               	movlw	0
  7286  00228E  1A14               	xorwf	___ftneg@f1,f,c
  7287  002290  0E00               	movlw	0
  7288  002292  1A15               	xorwf	___ftneg@f1+1,f,c
  7289  002294  0E80               	movlw	128
  7290  002296  1A16               	xorwf	___ftneg@f1+2,f,c
  7291  002298                     l655:
  7292  002298  C014  F014         	movff	___ftneg@f1,?___ftneg
  7293  00229C  C015  F015         	movff	___ftneg@f1+1,?___ftneg+1
  7294  0022A0  C016  F016         	movff	___ftneg@f1+2,?___ftneg+2
  7295  0022A4  0012               	return		;funcret
  7296  0022A6                     __end_of___ftneg:
  7297                           	opt stack 0
  7298                           tblptru	equ	0xFF8
  7299                           tblptrh	equ	0xFF7
  7300                           tblptrl	equ	0xFF6
  7301                           tablat	equ	0xFF5
  7302                           prodh	equ	0xFF4
  7303                           prodl	equ	0xFF3
  7304                           intcon	equ	0xFF2
  7305                           intcon2	equ	0xFF1
  7306                           postinc0	equ	0xFEE
  7307                           wreg	equ	0xFE8
  7308                           indf1	equ	0xFE7
  7309                           plusw1	equ	0xFE3
  7310                           fsr1h	equ	0xFE2
  7311                           fsr1l	equ	0xFE1
  7312                           indf2	equ	0xFDF
  7313                           postinc2	equ	0xFDE
  7314                           postdec2	equ	0xFDD
  7315                           plusw2	equ	0xFDB
  7316                           fsr2h	equ	0xFDA
  7317                           fsr2l	equ	0xFD9
  7318                           status	equ	0xFD8
  7319                           
  7320 ;; *************** function ___ftge *****************
  7321 ;; Defined at:
  7322 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
  7323 ;; Parameters:    Size  Location     Type
  7324 ;;  ff1             3   19[COMRAM] float 
  7325 ;;  ff2             3   22[COMRAM] float 
  7326 ;; Auto vars:     Size  Location     Type
  7327 ;;		None
  7328 ;; Return value:  Size  Location     Type
  7329 ;;		None               void
  7330 ;; Registers used:
  7331 ;;		wreg, status,2, status,0
  7332 ;; Tracked objects:
  7333 ;;		On entry : 0/0
  7334 ;;		On exit  : 0/0
  7335 ;;		Unchanged: 0/0
  7336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7337 ;;      Params:         6       0       0       0       0       0       0       0       0
  7338 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7339 ;;      Temps:          3       0       0       0       0       0       0       0       0
  7340 ;;      Totals:         9       0       0       0       0       0       0       0       0
  7341 ;;Total ram usage:        9 bytes
  7342 ;; Hardware stack levels used:    1
  7343 ;; Hardware stack levels required when called:    2
  7344 ;; This function calls:
  7345 ;;		Nothing
  7346 ;; This function is called by:
  7347 ;;		_sprintf
  7348 ;; This function uses a non-reentrant model
  7349 ;;
  7350                           
  7351                           	psect	text28
  7352  001BD4                     __ptext28:
  7353                           	opt stack 0
  7354  001BD4                     ___ftge:
  7355                           	opt stack 27
  7356                           
  7357                           ;incstack = 0
  7358  001BD4  AE16               	btfss	___ftge@ff1+2,7,c
  7359  001BD6  D016               	goto	l637
  7360  001BD8  C014  F01A         	movff	___ftge@ff1,??___ftge
  7361  001BDC  C015  F01B         	movff	___ftge@ff1+1,??___ftge+1
  7362  001BE0  C016  F01C         	movff	___ftge@ff1+2,??___ftge+2
  7363  001BE4  1E1A               	comf	??___ftge,f,c
  7364  001BE6  1E1B               	comf	??___ftge+1,f,c
  7365  001BE8  1E1C               	comf	??___ftge+2,f,c
  7366  001BEA  2A1A               	incf	??___ftge,f,c
  7367  001BEC  0E00               	movlw	0
  7368  001BEE  221B               	addwfc	??___ftge+1,f,c
  7369  001BF0  221C               	addwfc	??___ftge+2,f,c
  7370  001BF2  0E00               	movlw	0
  7371  001BF4  241A               	addwf	??___ftge,w,c
  7372  001BF6  6E14               	movwf	___ftge@ff1,c
  7373  001BF8  0E00               	movlw	0
  7374  001BFA  201B               	addwfc	??___ftge+1,w,c
  7375  001BFC  6E15               	movwf	___ftge@ff1+1,c
  7376  001BFE  0E80               	movlw	128
  7377  001C00  201C               	addwfc	??___ftge+2,w,c
  7378  001C02  6E16               	movwf	___ftge@ff1+2,c
  7379  001C04                     l637:
  7380  001C04  AE19               	btfss	___ftge@ff2+2,7,c
  7381  001C06  D016               	goto	l638
  7382  001C08  C017  F01A         	movff	___ftge@ff2,??___ftge
  7383  001C0C  C018  F01B         	movff	___ftge@ff2+1,??___ftge+1
  7384  001C10  C019  F01C         	movff	___ftge@ff2+2,??___ftge+2
  7385  001C14  1E1A               	comf	??___ftge,f,c
  7386  001C16  1E1B               	comf	??___ftge+1,f,c
  7387  001C18  1E1C               	comf	??___ftge+2,f,c
  7388  001C1A  2A1A               	incf	??___ftge,f,c
  7389  001C1C  0E00               	movlw	0
  7390  001C1E  221B               	addwfc	??___ftge+1,f,c
  7391  001C20  221C               	addwfc	??___ftge+2,f,c
  7392  001C22  0E00               	movlw	0
  7393  001C24  241A               	addwf	??___ftge,w,c
  7394  001C26  6E17               	movwf	___ftge@ff2,c
  7395  001C28  0E00               	movlw	0
  7396  001C2A  201B               	addwfc	??___ftge+1,w,c
  7397  001C2C  6E18               	movwf	___ftge@ff2+1,c
  7398  001C2E  0E80               	movlw	128
  7399  001C30  201C               	addwfc	??___ftge+2,w,c
  7400  001C32  6E19               	movwf	___ftge@ff2+2,c
  7401  001C34                     l638:
  7402  001C34  0E00               	movlw	0
  7403  001C36  1A14               	xorwf	___ftge@ff1,f,c
  7404  001C38  0E00               	movlw	0
  7405  001C3A  1A15               	xorwf	___ftge@ff1+1,f,c
  7406  001C3C  0E80               	movlw	128
  7407  001C3E  1A16               	xorwf	___ftge@ff1+2,f,c
  7408  001C40  0E00               	movlw	0
  7409  001C42  1A17               	xorwf	___ftge@ff2,f,c
  7410  001C44  0E00               	movlw	0
  7411  001C46  1A18               	xorwf	___ftge@ff2+1,f,c
  7412  001C48  0E80               	movlw	128
  7413  001C4A  1A19               	xorwf	___ftge@ff2+2,f,c
  7414  001C4C  5017               	movf	___ftge@ff2,w,c
  7415  001C4E  5C14               	subwf	___ftge@ff1,w,c
  7416  001C50  5018               	movf	___ftge@ff2+1,w,c
  7417  001C52  5815               	subwfb	___ftge@ff1+1,w,c
  7418  001C54  5019               	movf	___ftge@ff2+2,w,c
  7419  001C56  5816               	subwfb	___ftge@ff1+2,w,c
  7420  001C58  B0D8               	btfsc	status,0,c
  7421  001C5A  D002               	goto	l2239
  7422  001C5C  90D8               	bcf	status,0,c
  7423  001C5E  0012               	return	
  7424  001C60                     l2239:
  7425  001C60  80D8               	bsf	status,0,c
  7426  001C62  0012               	return	
  7427  001C64                     __end_of___ftge:
  7428                           	opt stack 0
  7429                           tblptru	equ	0xFF8
  7430                           tblptrh	equ	0xFF7
  7431                           tblptrl	equ	0xFF6
  7432                           tablat	equ	0xFF5
  7433                           prodh	equ	0xFF4
  7434                           prodl	equ	0xFF3
  7435                           intcon	equ	0xFF2
  7436                           intcon2	equ	0xFF1
  7437                           postinc0	equ	0xFEE
  7438                           wreg	equ	0xFE8
  7439                           indf1	equ	0xFE7
  7440                           plusw1	equ	0xFE3
  7441                           fsr1h	equ	0xFE2
  7442                           fsr1l	equ	0xFE1
  7443                           indf2	equ	0xFDF
  7444                           postinc2	equ	0xFDE
  7445                           postdec2	equ	0xFDD
  7446                           plusw2	equ	0xFDB
  7447                           fsr2h	equ	0xFDA
  7448                           fsr2l	equ	0xFD9
  7449                           status	equ	0xFD8
  7450                           
  7451 ;; *************** function _send_sr *****************
  7452 ;; Defined at:
  7453 ;;		line 4 in file "shreg.c"
  7454 ;; Parameters:    Size  Location     Type
  7455 ;;  buffer          2   19[COMRAM] PTR short 
  7456 ;;		 -> main@L298_inputs(16), 
  7457 ;; Auto vars:     Size  Location     Type
  7458 ;;  i               2   22[COMRAM] int 
  7459 ;; Return value:  Size  Location     Type
  7460 ;;                  1    wreg      void 
  7461 ;; Registers used:
  7462 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7463 ;; Tracked objects:
  7464 ;;		On entry : 0/0
  7465 ;;		On exit  : 0/0
  7466 ;;		Unchanged: 0/0
  7467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7468 ;;      Params:         2       0       0       0       0       0       0       0       0
  7469 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7470 ;;      Temps:          1       0       0       0       0       0       0       0       0
  7471 ;;      Totals:         5       0       0       0       0       0       0       0       0
  7472 ;;Total ram usage:        5 bytes
  7473 ;; Hardware stack levels used:    1
  7474 ;; Hardware stack levels required when called:    2
  7475 ;; This function calls:
  7476 ;;		Nothing
  7477 ;; This function is called by:
  7478 ;;		_main
  7479 ;; This function uses a non-reentrant model
  7480 ;;
  7481                           
  7482                           	psect	text29
  7483  001E9C                     __ptext29:
  7484                           	opt stack 0
  7485  001E9C                     _send_sr:
  7486                           	opt stack 28
  7487                           
  7488                           ;shreg.c: 12: int i;
  7489                           ;shreg.c: 14: LATBbits.LATB0 = 1;
  7490                           
  7491                           ;incstack = 0
  7492  001E9C  808A               	bsf	3978,0,c	;volatile
  7493                           
  7494                           ;shreg.c: 16: for(i=0; i<8; i++)
  7495  001E9E  0E00               	movlw	0
  7496  001EA0  6E18               	movwf	send_sr@i+1,c
  7497  001EA2  0E00               	movlw	0
  7498  001EA4  6E17               	movwf	send_sr@i,c
  7499  001EA6  BE18               	btfsc	send_sr@i+1,7,c
  7500  001EA8  D003               	goto	l171
  7501  001EAA  5018               	movf	send_sr@i+1,w,c
  7502  001EAC  E11E               	bnz	l172
  7503  001EAE  D019               	goto	L3
  7504  001EB0                     l171:
  7505                           
  7506                           ;shreg.c: 17: {
  7507                           ;shreg.c: 18: LATBbits.LATB4 = buffer[i];
  7508  001EB0  90D8               	bcf	status,0,c
  7509  001EB2  3417               	rlcf	send_sr@i,w,c
  7510  001EB4  6ED9               	movwf	fsr2l,c
  7511  001EB6  3418               	rlcf	send_sr@i+1,w,c
  7512  001EB8  6EDA               	movwf	fsr2h,c
  7513  001EBA  5014               	movf	send_sr@buffer,w,c
  7514  001EBC  26D9               	addwf	fsr2l,f,c
  7515  001EBE  5015               	movf	send_sr@buffer+1,w,c
  7516  001EC0  22DA               	addwfc	fsr2h,f,c
  7517  001EC2  50DF               	movf	indf2,w,c
  7518  001EC4  6E16               	movwf	??_send_sr& (0+255),c
  7519  001EC6  3A16               	swapf	??_send_sr,f,c
  7520  001EC8  508A               	movf	3978,w,c	;volatile
  7521  001ECA  1816               	xorwf	??_send_sr,w,c
  7522  001ECC  0BEF               	andlw	-17
  7523  001ECE  1816               	xorwf	??_send_sr,w,c
  7524  001ED0  6E8A               	movwf	3978,c	;volatile
  7525                           
  7526                           ;shreg.c: 19: LATBbits.LATB1 = 1;
  7527  001ED2  828A               	bsf	3978,1,c	;volatile
  7528                           
  7529                           ;shreg.c: 20: LATBbits.LATB1 = 0;
  7530  001ED4  928A               	bcf	3978,1,c	;volatile
  7531  001ED6  4A17               	infsnz	send_sr@i,f,c
  7532  001ED8  2A18               	incf	send_sr@i+1,f,c
  7533  001EDA  BE18               	btfsc	send_sr@i+1,7,c
  7534  001EDC  D7E9               	goto	l171
  7535  001EDE  5018               	movf	send_sr@i+1,w,c
  7536  001EE0  E104               	bnz	u2960
  7537  001EE2                     L3:
  7538  001EE2  0E08               	movlw	8
  7539  001EE4  5C17               	subwf	send_sr@i,w,c
  7540  001EE6  A0D8               	btfss	status,0,c
  7541  001EE8  D7E3               	goto	l171
  7542  001EEA                     u2960:
  7543  001EEA                     l172:
  7544                           
  7545                           ;shreg.c: 21: }
  7546                           ;shreg.c: 23: LATBbits.LATB2 = 0;
  7547  001EEA  948A               	bcf	3978,2,c	;volatile
  7548                           
  7549                           ;shreg.c: 24: LATBbits.LATB2 = 1;
  7550  001EEC  848A               	bsf	3978,2,c	;volatile
  7551                           
  7552                           ;shreg.c: 25: LATBbits.LATB0 = 0;
  7553  001EEE  908A               	bcf	3978,0,c	;volatile
  7554  001EF0  0012               	return		;funcret
  7555  001EF2                     __end_of_send_sr:
  7556                           	opt stack 0
  7557                           tblptru	equ	0xFF8
  7558                           tblptrh	equ	0xFF7
  7559                           tblptrl	equ	0xFF6
  7560                           tablat	equ	0xFF5
  7561                           prodh	equ	0xFF4
  7562                           prodl	equ	0xFF3
  7563                           intcon	equ	0xFF2
  7564                           intcon2	equ	0xFF1
  7565                           postinc0	equ	0xFEE
  7566                           wreg	equ	0xFE8
  7567                           indf1	equ	0xFE7
  7568                           plusw1	equ	0xFE3
  7569                           fsr1h	equ	0xFE2
  7570                           fsr1l	equ	0xFE1
  7571                           indf2	equ	0xFDF
  7572                           postinc2	equ	0xFDE
  7573                           postdec2	equ	0xFDD
  7574                           plusw2	equ	0xFDB
  7575                           fsr2h	equ	0xFDA
  7576                           fsr2l	equ	0xFD9
  7577                           status	equ	0xFD8
  7578                           
  7579 ;; *************** function _configure_tmr2 *****************
  7580 ;; Defined at:
  7581 ;;		line 180 in file "main.c"
  7582 ;; Parameters:    Size  Location     Type
  7583 ;;		None
  7584 ;; Auto vars:     Size  Location     Type
  7585 ;;		None
  7586 ;; Return value:  Size  Location     Type
  7587 ;;                  1    wreg      void 
  7588 ;; Registers used:
  7589 ;;		wreg, status,2
  7590 ;; Tracked objects:
  7591 ;;		On entry : 0/0
  7592 ;;		On exit  : 0/0
  7593 ;;		Unchanged: 0/0
  7594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7595 ;;      Params:         0       0       0       0       0       0       0       0       0
  7596 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7597 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7598 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7599 ;;Total ram usage:        0 bytes
  7600 ;; Hardware stack levels used:    1
  7601 ;; Hardware stack levels required when called:    2
  7602 ;; This function calls:
  7603 ;;		Nothing
  7604 ;; This function is called by:
  7605 ;;		_main
  7606 ;; This function uses a non-reentrant model
  7607 ;;
  7608                           
  7609                           	psect	text30
  7610  0022C4                     __ptext30:
  7611                           	opt stack 0
  7612  0022C4                     _configure_tmr2:
  7613                           	opt stack 28
  7614                           
  7615                           ;main.c: 182: PR2 = 1023;
  7616                           
  7617                           ;incstack = 0
  7618  0022C4  68CB               	setf	4043,c	;volatile
  7619                           
  7620                           ;main.c: 183: T2CONbits.TOUTPS = 0;
  7621  0022C6  96CA               	bcf	4042,3,c	;volatile
  7622  0022C8  98CA               	bcf	4042,4,c	;volatile
  7623  0022CA  9ACA               	bcf	4042,5,c	;volatile
  7624  0022CC  9CCA               	bcf	4042,6,c	;volatile
  7625                           
  7626                           ;main.c: 184: T2CONbits.TMR2ON = 1;
  7627  0022CE  84CA               	bsf	4042,2,c	;volatile
  7628                           
  7629                           ;main.c: 185: T2CONbits.T2CKPS = 0;
  7630  0022D0  0EFC               	movlw	-4
  7631  0022D2  16CA               	andwf	4042,f,c	;volatile
  7632  0022D4  0012               	return		;funcret
  7633  0022D6                     __end_of_configure_tmr2:
  7634                           	opt stack 0
  7635                           tblptru	equ	0xFF8
  7636                           tblptrh	equ	0xFF7
  7637                           tblptrl	equ	0xFF6
  7638                           tablat	equ	0xFF5
  7639                           prodh	equ	0xFF4
  7640                           prodl	equ	0xFF3
  7641                           intcon	equ	0xFF2
  7642                           intcon2	equ	0xFF1
  7643                           postinc0	equ	0xFEE
  7644                           wreg	equ	0xFE8
  7645                           indf1	equ	0xFE7
  7646                           plusw1	equ	0xFE3
  7647                           fsr1h	equ	0xFE2
  7648                           fsr1l	equ	0xFE1
  7649                           indf2	equ	0xFDF
  7650                           postinc2	equ	0xFDE
  7651                           postdec2	equ	0xFDD
  7652                           plusw2	equ	0xFDB
  7653                           fsr2h	equ	0xFDA
  7654                           fsr2l	equ	0xFD9
  7655                           status	equ	0xFD8
  7656                           
  7657 ;; *************** function _configure_pwm *****************
  7658 ;; Defined at:
  7659 ;;		line 188 in file "main.c"
  7660 ;; Parameters:    Size  Location     Type
  7661 ;;		None
  7662 ;; Auto vars:     Size  Location     Type
  7663 ;;		None
  7664 ;; Return value:  Size  Location     Type
  7665 ;;                  1    wreg      void 
  7666 ;; Registers used:
  7667 ;;		wreg, status,2
  7668 ;; Tracked objects:
  7669 ;;		On entry : 0/0
  7670 ;;		On exit  : 0/0
  7671 ;;		Unchanged: 0/0
  7672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7673 ;;      Params:         0       0       0       0       0       0       0       0       0
  7674 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7675 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7676 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7677 ;;Total ram usage:        0 bytes
  7678 ;; Hardware stack levels used:    1
  7679 ;; Hardware stack levels required when called:    2
  7680 ;; This function calls:
  7681 ;;		Nothing
  7682 ;; This function is called by:
  7683 ;;		_main
  7684 ;; This function uses a non-reentrant model
  7685 ;;
  7686                           
  7687                           	psect	text31
  7688  0022FE                     __ptext31:
  7689                           	opt stack 0
  7690  0022FE                     _configure_pwm:
  7691                           	opt stack 28
  7692                           
  7693                           ;main.c: 190: CCP1CONbits.CCP1M = 12;
  7694                           
  7695                           ;incstack = 0
  7696  0022FE  50BD               	movf	4029,w,c	;volatile
  7697  002300  0BF0               	andlw	-16
  7698  002302  090C               	iorlw	12
  7699  002304  6EBD               	movwf	4029,c	;volatile
  7700  002306  0012               	return		;funcret
  7701  002308                     __end_of_configure_pwm:
  7702                           	opt stack 0
  7703                           tblptru	equ	0xFF8
  7704                           tblptrh	equ	0xFF7
  7705                           tblptrl	equ	0xFF6
  7706                           tablat	equ	0xFF5
  7707                           prodh	equ	0xFF4
  7708                           prodl	equ	0xFF3
  7709                           intcon	equ	0xFF2
  7710                           intcon2	equ	0xFF1
  7711                           postinc0	equ	0xFEE
  7712                           wreg	equ	0xFE8
  7713                           indf1	equ	0xFE7
  7714                           plusw1	equ	0xFE3
  7715                           fsr1h	equ	0xFE2
  7716                           fsr1l	equ	0xFE1
  7717                           indf2	equ	0xFDF
  7718                           postinc2	equ	0xFDE
  7719                           postdec2	equ	0xFDD
  7720                           plusw2	equ	0xFDB
  7721                           fsr2h	equ	0xFDA
  7722                           fsr2l	equ	0xFD9
  7723                           status	equ	0xFD8
  7724                           
  7725 ;; *************** function _atoi *****************
  7726 ;; Defined at:
  7727 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atoi.c"
  7728 ;; Parameters:    Size  Location     Type
  7729 ;;  s               2   39[COMRAM] PTR const unsigned char 
  7730 ;;		 -> NULL(0), main@raw_command(100), 
  7731 ;; Auto vars:     Size  Location     Type
  7732 ;;  a               2   44[COMRAM] int 
  7733 ;;  sign            1   43[COMRAM] unsigned char 
  7734 ;; Return value:  Size  Location     Type
  7735 ;;                  2   39[COMRAM] int 
  7736 ;; Registers used:
  7737 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7738 ;; Tracked objects:
  7739 ;;		On entry : 0/0
  7740 ;;		On exit  : 0/0
  7741 ;;		Unchanged: 0/0
  7742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7743 ;;      Params:         2       0       0       0       0       0       0       0       0
  7744 ;;      Locals:         3       0       0       0       0       0       0       0       0
  7745 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7746 ;;      Totals:         7       0       0       0       0       0       0       0       0
  7747 ;;Total ram usage:        7 bytes
  7748 ;; Hardware stack levels used:    1
  7749 ;; Hardware stack levels required when called:    3
  7750 ;; This function calls:
  7751 ;;		___wmul
  7752 ;;		_isdigit
  7753 ;; This function is called by:
  7754 ;;		_main
  7755 ;; This function uses a non-reentrant model
  7756 ;;
  7757                           
  7758                           	psect	text32
  7759  0018FA                     __ptext32:
  7760                           	opt stack 0
  7761  0018FA                     _atoi:
  7762                           	opt stack 27
  7763                           
  7764                           ;incstack = 0
  7765  0018FA  D002               	goto	l465
  7766  0018FC  4A28               	infsnz	atoi@s,f,c
  7767  0018FE  2A29               	incf	atoi@s+1,f,c
  7768  001900                     l465:
  7769  001900  C028  FFD9         	movff	atoi@s,fsr2l
  7770  001904  C029  FFDA         	movff	atoi@s+1,fsr2h
  7771  001908  0E20               	movlw	32
  7772  00190A  18DE               	xorwf	postinc2,w,c
  7773  00190C  B4D8               	btfsc	status,2,c
  7774  00190E  D7F6               	goto	l466
  7775  001910  C028  FFD9         	movff	atoi@s,fsr2l
  7776  001914  C029  FFDA         	movff	atoi@s+1,fsr2h
  7777  001918  0E09               	movlw	9
  7778  00191A  18DE               	xorwf	postinc2,w,c
  7779  00191C  B4D8               	btfsc	status,2,c
  7780  00191E  D7EE               	goto	l466
  7781  001920  0E00               	movlw	0
  7782  001922  6E2E               	movwf	atoi@a+1,c
  7783  001924  0E00               	movlw	0
  7784  001926  6E2D               	movwf	atoi@a,c
  7785  001928  0E00               	movlw	0
  7786  00192A  6E2C               	movwf	atoi@sign,c
  7787  00192C  C028  FFD9         	movff	atoi@s,fsr2l
  7788  001930  C029  FFDA         	movff	atoi@s+1,fsr2h
  7789  001934  0E2D               	movlw	45
  7790  001936  18DE               	xorwf	postinc2,w,c
  7791  001938  A4D8               	btfss	status,2,c
  7792  00193A  D002               	goto	l468
  7793  00193C  2A2C               	incf	atoi@sign,f,c
  7794  00193E  D024               	goto	l3813
  7795  001940                     l468:
  7796  001940  C028  FFD9         	movff	atoi@s,fsr2l
  7797  001944  C029  FFDA         	movff	atoi@s+1,fsr2h
  7798  001948  0E2B               	movlw	43
  7799  00194A  18DE               	xorwf	postinc2,w,c
  7800  00194C  A4D8               	btfss	status,2,c
  7801  00194E  D01E               	goto	l471
  7802  001950  D01B               	goto	l3813
  7803  001952  C02D  F022         	movff	atoi@a,___wmul@multiplier
  7804  001956  C02E  F023         	movff	atoi@a+1,___wmul@multiplier+1
  7805  00195A  0E00               	movlw	0
  7806  00195C  6E25               	movwf	___wmul@multiplicand+1,c
  7807  00195E  0E0A               	movlw	10
  7808  001960  6E24               	movwf	___wmul@multiplicand,c
  7809  001962  EC2E  F011         	call	___wmul	;wreg free
  7810  001966  C028  FFD9         	movff	atoi@s,fsr2l
  7811  00196A  C029  FFDA         	movff	atoi@s+1,fsr2h
  7812  00196E  50DF               	movf	indf2,w,c
  7813  001970  6E2A               	movwf	??_atoi& (0+255),c
  7814  001972  6A2B               	clrf	(??_atoi+1)& (0+255),c
  7815  001974  5022               	movf	?___wmul,w,c
  7816  001976  262A               	addwf	??_atoi,f,c
  7817  001978  5023               	movf	?___wmul+1,w,c
  7818  00197A  222B               	addwfc	??_atoi+1,f,c
  7819  00197C  0ED0               	movlw	208
  7820  00197E  242A               	addwf	??_atoi,w,c
  7821  001980  6E2D               	movwf	atoi@a,c
  7822  001982  0EFF               	movlw	255
  7823  001984  202B               	addwfc	??_atoi+1,w,c
  7824  001986  6E2E               	movwf	atoi@a+1,c
  7825  001988                     l3813:
  7826  001988  4A28               	infsnz	atoi@s,f,c
  7827  00198A  2A29               	incf	atoi@s+1,f,c
  7828  00198C                     l471:
  7829  00198C  C028  FFD9         	movff	atoi@s,fsr2l
  7830  001990  C029  FFDA         	movff	atoi@s+1,fsr2h
  7831  001994  50DF               	movf	indf2,w,c
  7832  001996  EC53  F011         	call	_isdigit
  7833  00199A  B0D8               	btfsc	status,0,c
  7834  00199C  D7DA               	goto	l472
  7835  00199E  502C               	movf	atoi@sign,w,c
  7836  0019A0  B4D8               	btfsc	status,2,c
  7837  0019A2  D00D               	goto	l474
  7838  0019A4  C02D  F02A         	movff	atoi@a,??_atoi
  7839  0019A8  C02E  F02B         	movff	atoi@a+1,??_atoi+1
  7840  0019AC  1E2A               	comf	??_atoi,f,c
  7841  0019AE  1E2B               	comf	??_atoi+1,f,c
  7842  0019B0  4A2A               	infsnz	??_atoi,f,c
  7843  0019B2  2A2B               	incf	??_atoi+1,f,c
  7844  0019B4  C02A  F028         	movff	??_atoi,?_atoi
  7845  0019B8  C02B  F029         	movff	??_atoi+1,?_atoi+1
  7846  0019BC  0012               	return	
  7847  0019BE                     l474:
  7848  0019BE  C02D  F028         	movff	atoi@a,?_atoi
  7849  0019C2  C02E  F029         	movff	atoi@a+1,?_atoi+1
  7850  0019C6  0012               	return		;funcret
  7851  0019C8                     __end_of_atoi:
  7852                           	opt stack 0
  7853                           tblptru	equ	0xFF8
  7854                           tblptrh	equ	0xFF7
  7855                           tblptrl	equ	0xFF6
  7856                           tablat	equ	0xFF5
  7857                           prodh	equ	0xFF4
  7858                           prodl	equ	0xFF3
  7859                           intcon	equ	0xFF2
  7860                           intcon2	equ	0xFF1
  7861                           postinc0	equ	0xFEE
  7862                           wreg	equ	0xFE8
  7863                           indf1	equ	0xFE7
  7864                           plusw1	equ	0xFE3
  7865                           fsr1h	equ	0xFE2
  7866                           fsr1l	equ	0xFE1
  7867                           indf2	equ	0xFDF
  7868                           postinc2	equ	0xFDE
  7869                           postdec2	equ	0xFDD
  7870                           plusw2	equ	0xFDB
  7871                           fsr2h	equ	0xFDA
  7872                           fsr2l	equ	0xFD9
  7873                           status	equ	0xFD8
  7874                           
  7875 ;; *************** function _isdigit *****************
  7876 ;; Defined at:
  7877 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  7878 ;; Parameters:    Size  Location     Type
  7879 ;;  c               1    wreg     unsigned char 
  7880 ;; Auto vars:     Size  Location     Type
  7881 ;;  c               1   21[COMRAM] unsigned char 
  7882 ;; Return value:  Size  Location     Type
  7883 ;;		None               void
  7884 ;; Registers used:
  7885 ;;		wreg, status,2, status,0
  7886 ;; Tracked objects:
  7887 ;;		On entry : 0/0
  7888 ;;		On exit  : 0/0
  7889 ;;		Unchanged: 0/0
  7890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7891 ;;      Params:         0       0       0       0       0       0       0       0       0
  7892 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7893 ;;      Temps:          1       0       0       0       0       0       0       0       0
  7894 ;;      Totals:         3       0       0       0       0       0       0       0       0
  7895 ;;Total ram usage:        3 bytes
  7896 ;; Hardware stack levels used:    1
  7897 ;; Hardware stack levels required when called:    2
  7898 ;; This function calls:
  7899 ;;		Nothing
  7900 ;; This function is called by:
  7901 ;;		_sprintf
  7902 ;;		_atoi
  7903 ;; This function uses a non-reentrant model
  7904 ;;
  7905                           
  7906                           	psect	text33
  7907  0022A6                     __ptext33:
  7908                           	opt stack 0
  7909  0022A6                     _isdigit:
  7910                           	opt stack 27
  7911                           
  7912                           ;incstack = 0
  7913                           ;isdigit@c stored from wreg
  7914  0022A6  6E16               	movwf	isdigit@c,c
  7915  0022A8  0E00               	movlw	0
  7916  0022AA  6E15               	movwf	_isdigit$1159,c
  7917  0022AC  0E3A               	movlw	58
  7918  0022AE  6016               	cpfslt	isdigit@c,c
  7919  0022B0  D005               	goto	l680
  7920  0022B2  0E2F               	movlw	47
  7921  0022B4  6416               	cpfsgt	isdigit@c,c
  7922  0022B6  D002               	goto	l680
  7923  0022B8  0E01               	movlw	1
  7924  0022BA  6E15               	movwf	_isdigit$1159,c
  7925  0022BC                     l680:
  7926  0022BC  C015  F014         	movff	_isdigit$1159,??_isdigit
  7927  0022C0  3014               	rrcf	??_isdigit,w,c
  7928  0022C2  0012               	return	
  7929  0022C4                     __end_of_isdigit:
  7930                           	opt stack 0
  7931                           tblptru	equ	0xFF8
  7932                           tblptrh	equ	0xFF7
  7933                           tblptrl	equ	0xFF6
  7934                           tablat	equ	0xFF5
  7935                           prodh	equ	0xFF4
  7936                           prodl	equ	0xFF3
  7937                           intcon	equ	0xFF2
  7938                           intcon2	equ	0xFF1
  7939                           postinc0	equ	0xFEE
  7940                           wreg	equ	0xFE8
  7941                           indf1	equ	0xFE7
  7942                           plusw1	equ	0xFE3
  7943                           fsr1h	equ	0xFE2
  7944                           fsr1l	equ	0xFE1
  7945                           indf2	equ	0xFDF
  7946                           postinc2	equ	0xFDE
  7947                           postdec2	equ	0xFDD
  7948                           plusw2	equ	0xFDB
  7949                           fsr2h	equ	0xFDA
  7950                           fsr2l	equ	0xFD9
  7951                           status	equ	0xFD8
  7952                           
  7953 ;; *************** function ___wmul *****************
  7954 ;; Defined at:
  7955 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  7956 ;; Parameters:    Size  Location     Type
  7957 ;;  multiplier      2   33[COMRAM] unsigned int 
  7958 ;;  multiplicand    2   35[COMRAM] unsigned int 
  7959 ;; Auto vars:     Size  Location     Type
  7960 ;;  product         2   37[COMRAM] unsigned int 
  7961 ;; Return value:  Size  Location     Type
  7962 ;;                  2   33[COMRAM] unsigned int 
  7963 ;; Registers used:
  7964 ;;		wreg, status,2, status,0, prodl, prodh
  7965 ;; Tracked objects:
  7966 ;;		On entry : 0/0
  7967 ;;		On exit  : 0/0
  7968 ;;		Unchanged: 0/0
  7969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7970 ;;      Params:         4       0       0       0       0       0       0       0       0
  7971 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7972 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7973 ;;      Totals:         6       0       0       0       0       0       0       0       0
  7974 ;;Total ram usage:        6 bytes
  7975 ;; Hardware stack levels used:    1
  7976 ;; Hardware stack levels required when called:    2
  7977 ;; This function calls:
  7978 ;;		Nothing
  7979 ;; This function is called by:
  7980 ;;		_fround
  7981 ;;		_scale
  7982 ;;		_sprintf
  7983 ;;		_atoi
  7984 ;; This function uses a non-reentrant model
  7985 ;;
  7986                           
  7987                           	psect	text34
  7988  00225C                     __ptext34:
  7989                           	opt stack 0
  7990  00225C                     ___wmul:
  7991                           	opt stack 26
  7992                           
  7993                           ;incstack = 0
  7994  00225C  5022               	movf	___wmul@multiplier,w,c
  7995  00225E  0224               	mulwf	___wmul@multiplicand,c
  7996  002260  CFF3 F026          	movff	prodl,___wmul@product
  7997  002264  CFF4 F027          	movff	prodh,___wmul@product+1
  7998  002268  5022               	movf	___wmul@multiplier,w,c
  7999  00226A  0225               	mulwf	___wmul@multiplicand+1,c
  8000  00226C  50F3               	movf	prodl,w,c
  8001  00226E  2627               	addwf	___wmul@product+1,f,c
  8002  002270  5023               	movf	___wmul@multiplier+1,w,c
  8003  002272  0224               	mulwf	___wmul@multiplicand,c
  8004  002274  50F3               	movf	prodl,w,c
  8005  002276  2627               	addwf	___wmul@product+1,f,c
  8006  002278  C026  F022         	movff	___wmul@product,?___wmul
  8007  00227C  C027  F023         	movff	___wmul@product+1,?___wmul+1
  8008  002280  0012               	return	
  8009  002282                     __end_of___wmul:
  8010                           	opt stack 0
  8011                           tblptru	equ	0xFF8
  8012                           tblptrh	equ	0xFF7
  8013                           tblptrl	equ	0xFF6
  8014                           tablat	equ	0xFF5
  8015                           prodh	equ	0xFF4
  8016                           prodl	equ	0xFF3
  8017                           intcon	equ	0xFF2
  8018                           intcon2	equ	0xFF1
  8019                           postinc0	equ	0xFEE
  8020                           wreg	equ	0xFE8
  8021                           indf1	equ	0xFE7
  8022                           plusw1	equ	0xFE3
  8023                           fsr1h	equ	0xFE2
  8024                           fsr1l	equ	0xFE1
  8025                           indf2	equ	0xFDF
  8026                           postinc2	equ	0xFDE
  8027                           postdec2	equ	0xFDD
  8028                           plusw2	equ	0xFDB
  8029                           fsr2h	equ	0xFDA
  8030                           fsr2l	equ	0xFD9
  8031                           status	equ	0xFD8
  8032                           
  8033 ;; *************** function ___awtoft *****************
  8034 ;; Defined at:
  8035 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
  8036 ;; Parameters:    Size  Location     Type
  8037 ;;  c               2   27[COMRAM] int 
  8038 ;; Auto vars:     Size  Location     Type
  8039 ;;  sign            1   30[COMRAM] unsigned char 
  8040 ;; Return value:  Size  Location     Type
  8041 ;;                  3   27[COMRAM] float 
  8042 ;; Registers used:
  8043 ;;		wreg, status,2, status,0, cstack
  8044 ;; Tracked objects:
  8045 ;;		On entry : 0/0
  8046 ;;		On exit  : 0/0
  8047 ;;		Unchanged: 0/0
  8048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8049 ;;      Params:         3       0       0       0       0       0       0       0       0
  8050 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8051 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8052 ;;      Totals:         4       0       0       0       0       0       0       0       0
  8053 ;;Total ram usage:        4 bytes
  8054 ;; Hardware stack levels used:    1
  8055 ;; Hardware stack levels required when called:    3
  8056 ;; This function calls:
  8057 ;;		___ftpack
  8058 ;; This function is called by:
  8059 ;;		_main
  8060 ;; This function uses a non-reentrant model
  8061 ;;
  8062                           
  8063                           	psect	text35
  8064  0021F8                     __ptext35:
  8065                           	opt stack 0
  8066  0021F8                     ___awtoft:
  8067                           	opt stack 27
  8068                           
  8069                           ;incstack = 0
  8070  0021F8  0E00               	movlw	0
  8071  0021FA  6E1F               	movwf	___awtoft@sign,c
  8072  0021FC  AE1D               	btfss	___awtoft@c+1,7,c
  8073  0021FE  D006               	goto	l512
  8074  002200  6C1C               	negf	___awtoft@c,c
  8075  002202  1E1D               	comf	___awtoft@c+1,f,c
  8076  002204  B0D8               	btfsc	status,0,c
  8077  002206  2A1D               	incf	___awtoft@c+1,f,c
  8078  002208  0E01               	movlw	1
  8079  00220A  6E1F               	movwf	___awtoft@sign,c
  8080  00220C                     l512:
  8081  00220C  C01C  F014         	movff	___awtoft@c,___ftpack@arg
  8082  002210  C01D  F015         	movff	___awtoft@c+1,___ftpack@arg+1
  8083  002214  6A16               	clrf	___ftpack@arg+2,c
  8084  002216  0E8E               	movlw	142
  8085  002218  6E17               	movwf	___ftpack@exp,c
  8086  00221A  C01F  F018         	movff	___awtoft@sign,___ftpack@sign
  8087  00221E  EC3C  F00D         	call	___ftpack	;wreg free
  8088  002222  C014  F01C         	movff	?___ftpack,?___awtoft
  8089  002226  C015  F01D         	movff	?___ftpack+1,?___awtoft+1
  8090  00222A  C016  F01E         	movff	?___ftpack+2,?___awtoft+2
  8091  00222E  0012               	return	
  8092  002230                     __end_of___awtoft:
  8093                           	opt stack 0
  8094                           tblptru	equ	0xFF8
  8095                           tblptrh	equ	0xFF7
  8096                           tblptrl	equ	0xFF6
  8097                           tablat	equ	0xFF5
  8098                           prodh	equ	0xFF4
  8099                           prodl	equ	0xFF3
  8100                           intcon	equ	0xFF2
  8101                           intcon2	equ	0xFF1
  8102                           postinc0	equ	0xFEE
  8103                           wreg	equ	0xFE8
  8104                           indf1	equ	0xFE7
  8105                           plusw1	equ	0xFE3
  8106                           fsr1h	equ	0xFE2
  8107                           fsr1l	equ	0xFE1
  8108                           indf2	equ	0xFDF
  8109                           postinc2	equ	0xFDE
  8110                           postdec2	equ	0xFDD
  8111                           plusw2	equ	0xFDB
  8112                           fsr2h	equ	0xFDA
  8113                           fsr2l	equ	0xFD9
  8114                           status	equ	0xFD8
  8115                           
  8116 ;; *************** function ___ftpack *****************
  8117 ;; Defined at:
  8118 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  8119 ;; Parameters:    Size  Location     Type
  8120 ;;  arg             3   19[COMRAM] unsigned um
  8121 ;;  exp             1   22[COMRAM] unsigned char 
  8122 ;;  sign            1   23[COMRAM] unsigned char 
  8123 ;; Auto vars:     Size  Location     Type
  8124 ;;		None
  8125 ;; Return value:  Size  Location     Type
  8126 ;;                  3   19[COMRAM] float 
  8127 ;; Registers used:
  8128 ;;		wreg, status,2, status,0
  8129 ;; Tracked objects:
  8130 ;;		On entry : 0/0
  8131 ;;		On exit  : 0/0
  8132 ;;		Unchanged: 0/0
  8133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8134 ;;      Params:         5       0       0       0       0       0       0       0       0
  8135 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8136 ;;      Temps:          3       0       0       0       0       0       0       0       0
  8137 ;;      Totals:         8       0       0       0       0       0       0       0       0
  8138 ;;Total ram usage:        8 bytes
  8139 ;; Hardware stack levels used:    1
  8140 ;; Hardware stack levels required when called:    2
  8141 ;; This function calls:
  8142 ;;		Nothing
  8143 ;; This function is called by:
  8144 ;;		___awtoft
  8145 ;;		___ftadd
  8146 ;;		___ftmul
  8147 ;;		___lltoft
  8148 ;; This function uses a non-reentrant model
  8149 ;;
  8150                           
  8151                           	psect	text36
  8152  001A78                     __ptext36:
  8153                           	opt stack 0
  8154  001A78                     ___ftpack:
  8155                           	opt stack 25
  8156                           
  8157                           ;incstack = 0
  8158  001A78  5017               	movf	___ftpack@exp,w,c
  8159  001A7A  B4D8               	btfsc	status,2,c
  8160  001A7C  D005               	goto	u3760
  8161  001A7E  5014               	movf	___ftpack@arg,w,c
  8162  001A80  1015               	iorwf	___ftpack@arg+1,w,c
  8163  001A82  1016               	iorwf	___ftpack@arg+2,w,c
  8164  001A84  A4D8               	btfss	status,2,c
  8165  001A86  D00C               	goto	l548
  8166  001A88                     u3760:
  8167  001A88  0E00               	movlw	0
  8168  001A8A  6E14               	movwf	?___ftpack,c
  8169  001A8C  0E00               	movlw	0
  8170  001A8E  6E15               	movwf	?___ftpack+1,c
  8171  001A90  0E00               	movlw	0
  8172  001A92  6E16               	movwf	?___ftpack+2,c
  8173  001A94  0012               	return	
  8174  001A96  2A17               	incf	___ftpack@exp,f,c
  8175  001A98  90D8               	bcf	status,0,c
  8176  001A9A  3216               	rrcf	___ftpack@arg+2,f,c
  8177  001A9C  3215               	rrcf	___ftpack@arg+1,f,c
  8178  001A9E  3214               	rrcf	___ftpack@arg,f,c
  8179  001AA0                     l548:
  8180  001AA0  0E00               	movlw	0
  8181  001AA2  1414               	andwf	___ftpack@arg,w,c
  8182  001AA4  6E19               	movwf	??___ftpack& (0+255),c
  8183  001AA6  0E00               	movlw	0
  8184  001AA8  1415               	andwf	___ftpack@arg+1,w,c
  8185  001AAA  6E1A               	movwf	(??___ftpack+1)& (0+255),c
  8186  001AAC  0EFE               	movlw	254
  8187  001AAE  1416               	andwf	___ftpack@arg+2,w,c
  8188  001AB0  6E1B               	movwf	(??___ftpack+2)& (0+255),c
  8189  001AB2  5019               	movf	??___ftpack,w,c
  8190  001AB4  101A               	iorwf	??___ftpack+1,w,c
  8191  001AB6  101B               	iorwf	??___ftpack+2,w,c
  8192  001AB8  B4D8               	btfsc	status,2,c
  8193  001ABA  D00C               	goto	l551
  8194  001ABC  D7EC               	goto	l549
  8195  001ABE  2A17               	incf	___ftpack@exp,f,c
  8196  001AC0  0E01               	movlw	1
  8197  001AC2  2614               	addwf	___ftpack@arg,f,c
  8198  001AC4  0E00               	movlw	0
  8199  001AC6  2215               	addwfc	___ftpack@arg+1,f,c
  8200  001AC8  0E00               	movlw	0
  8201  001ACA  2216               	addwfc	___ftpack@arg+2,f,c
  8202  001ACC  90D8               	bcf	status,0,c
  8203  001ACE  3216               	rrcf	___ftpack@arg+2,f,c
  8204  001AD0  3215               	rrcf	___ftpack@arg+1,f,c
  8205  001AD2  3214               	rrcf	___ftpack@arg,f,c
  8206  001AD4                     l551:
  8207  001AD4  0E00               	movlw	0
  8208  001AD6  1414               	andwf	___ftpack@arg,w,c
  8209  001AD8  6E19               	movwf	??___ftpack& (0+255),c
  8210  001ADA  0E00               	movlw	0
  8211  001ADC  1415               	andwf	___ftpack@arg+1,w,c
  8212  001ADE  6E1A               	movwf	(??___ftpack+1)& (0+255),c
  8213  001AE0  0EFF               	movlw	255
  8214  001AE2  1416               	andwf	___ftpack@arg+2,w,c
  8215  001AE4  6E1B               	movwf	(??___ftpack+2)& (0+255),c
  8216  001AE6  5019               	movf	??___ftpack,w,c
  8217  001AE8  101A               	iorwf	??___ftpack+1,w,c
  8218  001AEA  101B               	iorwf	??___ftpack+2,w,c
  8219  001AEC  B4D8               	btfsc	status,2,c
  8220  001AEE  D006               	goto	l554
  8221  001AF0  D7E6               	goto	l552
  8222  001AF2  0617               	decf	___ftpack@exp,f,c
  8223  001AF4  90D8               	bcf	status,0,c
  8224  001AF6  3614               	rlcf	___ftpack@arg,f,c
  8225  001AF8  3615               	rlcf	___ftpack@arg+1,f,c
  8226  001AFA  3616               	rlcf	___ftpack@arg+2,f,c
  8227  001AFC                     l554:
  8228  001AFC  BE15               	btfsc	___ftpack@arg+1,7,c
  8229  001AFE  D003               	goto	u3800
  8230  001B00  0E02               	movlw	2
  8231  001B02  6017               	cpfslt	___ftpack@exp,c
  8232  001B04  D7F6               	goto	l555
  8233  001B06                     u3800:
  8234  001B06  A017               	btfss	___ftpack@exp,0,c
  8235  001B08  9E15               	bcf	___ftpack@arg+1,7,c
  8236  001B0A  90D8               	bcf	status,0,c
  8237  001B0C  3217               	rrcf	___ftpack@exp,f,c
  8238  001B0E  5017               	movf	___ftpack@exp,w,c
  8239  001B10  1216               	iorwf	___ftpack@arg+2,f,c
  8240  001B12  5018               	movf	___ftpack@sign,w,c
  8241  001B14  A4D8               	btfss	status,2,c
  8242  001B16  8E16               	bsf	___ftpack@arg+2,7,c
  8243  001B18  C014  F014         	movff	___ftpack@arg,?___ftpack
  8244  001B1C  C015  F015         	movff	___ftpack@arg+1,?___ftpack+1
  8245  001B20  C016  F016         	movff	___ftpack@arg+2,?___ftpack+2
  8246  001B24  0012               	return	
  8247  001B26                     __end_of___ftpack:
  8248                           	opt stack 0
  8249                           tblptru	equ	0xFF8
  8250                           tblptrh	equ	0xFF7
  8251                           tblptrl	equ	0xFF6
  8252                           tablat	equ	0xFF5
  8253                           prodh	equ	0xFF4
  8254                           prodl	equ	0xFF3
  8255                           intcon	equ	0xFF2
  8256                           intcon2	equ	0xFF1
  8257                           postinc0	equ	0xFEE
  8258                           wreg	equ	0xFE8
  8259                           indf1	equ	0xFE7
  8260                           plusw1	equ	0xFE3
  8261                           fsr1h	equ	0xFE2
  8262                           fsr1l	equ	0xFE1
  8263                           indf2	equ	0xFDF
  8264                           postinc2	equ	0xFDE
  8265                           postdec2	equ	0xFDD
  8266                           plusw2	equ	0xFDB
  8267                           fsr2h	equ	0xFDA
  8268                           fsr2l	equ	0xFD9
  8269                           status	equ	0xFD8
  8270                           
  8271 ;; *************** function _IRS *****************
  8272 ;; Defined at:
  8273 ;;		line 32 in file "main.c"
  8274 ;; Parameters:    Size  Location     Type
  8275 ;;		None
  8276 ;; Auto vars:     Size  Location     Type
  8277 ;;		None
  8278 ;; Return value:  Size  Location     Type
  8279 ;;                  1    wreg      void 
  8280 ;; Registers used:
  8281 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8282 ;; Tracked objects:
  8283 ;;		On entry : 0/0
  8284 ;;		On exit  : 0/0
  8285 ;;		Unchanged: 0/0
  8286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8287 ;;      Params:         0       0       0       0       0       0       0       0       0
  8288 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8289 ;;      Temps:         18       0       0       0       0       0       0       0       0
  8290 ;;      Totals:        18       0       0       0       0       0       0       0       0
  8291 ;;Total ram usage:       18 bytes
  8292 ;; Hardware stack levels used:    1
  8293 ;; Hardware stack levels required when called:    1
  8294 ;; This function calls:
  8295 ;;		_uart_rx_isr
  8296 ;;		_uart_tx_isr
  8297 ;; This function is called by:
  8298 ;;		Interrupt level 2
  8299 ;; This function uses a non-reentrant model
  8300 ;;
  8301                           
  8302                           	psect	intcode
  8303  000008                     __pintcode:
  8304                           	opt stack 0
  8305  000008                     _IRS:
  8306                           	opt stack 25
  8307                           
  8308                           ;incstack = 0
  8309  000008  824C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8310  00000A  ED93  F00D         	call	int_func,f	;refresh shadow registers
  8311                           tblptru	equ	0xFF8
  8312                           tblptrh	equ	0xFF7
  8313                           tblptrl	equ	0xFF6
  8314                           tablat	equ	0xFF5
  8315                           prodh	equ	0xFF4
  8316                           prodl	equ	0xFF3
  8317                           intcon	equ	0xFF2
  8318                           intcon2	equ	0xFF1
  8319                           postinc0	equ	0xFEE
  8320                           wreg	equ	0xFE8
  8321                           indf1	equ	0xFE7
  8322                           plusw1	equ	0xFE3
  8323                           fsr1h	equ	0xFE2
  8324                           fsr1l	equ	0xFE1
  8325                           indf2	equ	0xFDF
  8326                           postinc2	equ	0xFDE
  8327                           postdec2	equ	0xFDD
  8328                           plusw2	equ	0xFDB
  8329                           fsr2h	equ	0xFDA
  8330                           fsr2l	equ	0xFD9
  8331                           status	equ	0xFD8
  8332                           
  8333                           	psect	intcode_body
  8334  001B26                     __pintcode_body:
  8335                           	opt stack 25
  8336  001B26                     int_func:
  8337                           	opt stack 25
  8338  001B26  0006               	pop		; remove dummy address from shadow register refresh
  8339  001B28  CFFA F002          	movff	pclath,??_IRS
  8340  001B2C  CFFB F003          	movff	pclatu,??_IRS+1
  8341  001B30  CFE9 F004          	movff	fsr0l,??_IRS+2
  8342  001B34  CFEA F005          	movff	fsr0h,??_IRS+3
  8343  001B38  CFE1 F006          	movff	fsr1l,??_IRS+4
  8344  001B3C  CFE2 F007          	movff	fsr1h,??_IRS+5
  8345  001B40  CFD9 F008          	movff	fsr2l,??_IRS+6
  8346  001B44  CFDA F009          	movff	fsr2h,??_IRS+7
  8347  001B48  CFF3 F00A          	movff	prodl,??_IRS+8
  8348  001B4C  CFF4 F00B          	movff	prodh,??_IRS+9
  8349  001B50  CFF6 F00C          	movff	tblptrl,??_IRS+10
  8350  001B54  CFF7 F00D          	movff	tblptrh,??_IRS+11
  8351  001B58  CFF8 F00E          	movff	tblptru,??_IRS+12
  8352  001B5C  CFF5 F00F          	movff	tablat,??_IRS+13
  8353  001B60  C04C  F010         	movff	btemp,??_IRS+14
  8354  001B64  C04D  F011         	movff	btemp+1,??_IRS+15
  8355  001B68  C04E  F012         	movff	btemp+2,??_IRS+16
  8356  001B6C  C04F  F013         	movff	btemp+3,??_IRS+17
  8357                           
  8358                           ;main.c: 34: uart_rx_isr();
  8359  001B70  ECEE  F00F         	call	_uart_rx_isr	;wreg free
  8360                           
  8361                           ;main.c: 35: uart_tx_isr();
  8362  001B74  ECBD  F010         	call	_uart_tx_isr	;wreg free
  8363                           
  8364                           ;main.c: 37: if(PIR1bits.ADIF)
  8365  001B78  AC9E               	btfss	3998,6,c	;volatile
  8366  001B7A  D006               	goto	i2l73
  8367                           
  8368                           ;main.c: 38: {
  8369                           ;main.c: 39: motor_1_ia = ADRES;
  8370  001B7C  CFC3 F193          	movff	4035,_motor_1_ia	;volatile
  8371  001B80  CFC4 F194          	movff	4036,_motor_1_ia+1	;volatile
  8372                           
  8373                           ;main.c: 40: ADCON0bits.GO = 1;
  8374  001B84  82C2               	bsf	4034,1,c	;volatile
  8375                           
  8376                           ;main.c: 41: PIR1bits.ADIF = 0;
  8377  001B86  9C9E               	bcf	3998,6,c	;volatile
  8378  001B88                     i2l73:
  8379  001B88  C013  F04F         	movff	??_IRS+17,btemp+3
  8380  001B8C  C012  F04E         	movff	??_IRS+16,btemp+2
  8381  001B90  C011  F04D         	movff	??_IRS+15,btemp+1
  8382  001B94  C010  F04C         	movff	??_IRS+14,btemp
  8383  001B98  C00F  FFF5         	movff	??_IRS+13,tablat
  8384  001B9C  C00E  FFF8         	movff	??_IRS+12,tblptru
  8385  001BA0  C00D  FFF7         	movff	??_IRS+11,tblptrh
  8386  001BA4  C00C  FFF6         	movff	??_IRS+10,tblptrl
  8387  001BA8  C00B  FFF4         	movff	??_IRS+9,prodh
  8388  001BAC  C00A  FFF3         	movff	??_IRS+8,prodl
  8389  001BB0  C009  FFDA         	movff	??_IRS+7,fsr2h
  8390  001BB4  C008  FFD9         	movff	??_IRS+6,fsr2l
  8391  001BB8  C007  FFE2         	movff	??_IRS+5,fsr1h
  8392  001BBC  C006  FFE1         	movff	??_IRS+4,fsr1l
  8393  001BC0  C005  FFEA         	movff	??_IRS+3,fsr0h
  8394  001BC4  C004  FFE9         	movff	??_IRS+2,fsr0l
  8395  001BC8  C003  FFFB         	movff	??_IRS+1,pclatu
  8396  001BCC  C002  FFFA         	movff	??_IRS,pclath
  8397  001BD0  924C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  8398  001BD2  0011               	retfie		f
  8399  001BD4                     __end_of_IRS:
  8400                           	opt stack 0
  8401                           pclatu	equ	0xFFB
  8402                           pclath	equ	0xFFA
  8403                           tblptru	equ	0xFF8
  8404                           tblptrh	equ	0xFF7
  8405                           tblptrl	equ	0xFF6
  8406                           tablat	equ	0xFF5
  8407                           prodh	equ	0xFF4
  8408                           prodl	equ	0xFF3
  8409                           intcon	equ	0xFF2
  8410                           intcon2	equ	0xFF1
  8411                           postinc0	equ	0xFEE
  8412                           fsr0h	equ	0xFEA
  8413                           fsr0l	equ	0xFE9
  8414                           wreg	equ	0xFE8
  8415                           indf1	equ	0xFE7
  8416                           plusw1	equ	0xFE3
  8417                           fsr1h	equ	0xFE2
  8418                           fsr1l	equ	0xFE1
  8419                           indf2	equ	0xFDF
  8420                           postinc2	equ	0xFDE
  8421                           postdec2	equ	0xFDD
  8422                           plusw2	equ	0xFDB
  8423                           fsr2h	equ	0xFDA
  8424                           fsr2l	equ	0xFD9
  8425                           status	equ	0xFD8
  8426                           
  8427 ;; *************** function _uart_tx_isr *****************
  8428 ;; Defined at:
  8429 ;;		line 103 in file "usart.c"
  8430 ;; Parameters:    Size  Location     Type
  8431 ;;		None
  8432 ;; Auto vars:     Size  Location     Type
  8433 ;;		None
  8434 ;; Return value:  Size  Location     Type
  8435 ;;                  1    wreg      void 
  8436 ;; Registers used:
  8437 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8438 ;; Tracked objects:
  8439 ;;		On entry : 0/0
  8440 ;;		On exit  : 0/0
  8441 ;;		Unchanged: 0/0
  8442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8443 ;;      Params:         0       0       0       0       0       0       0       0       0
  8444 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8445 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8446 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8447 ;;Total ram usage:        0 bytes
  8448 ;; Hardware stack levels used:    1
  8449 ;; This function calls:
  8450 ;;		Nothing
  8451 ;; This function is called by:
  8452 ;;		_IRS
  8453 ;; This function uses a non-reentrant model
  8454 ;;
  8455                           
  8456                           	psect	text38
  8457  00217A                     __ptext38:
  8458                           	opt stack 0
  8459  00217A                     _uart_tx_isr:
  8460                           	opt stack 25
  8461                           
  8462                           ;usart.c: 105: if(PIR1bits.TXIF)
  8463                           
  8464                           ;incstack = 0
  8465  00217A  A89E               	btfss	3998,4,c	;volatile
  8466  00217C  0012               	return	
  8467                           
  8468                           ;usart.c: 106: {
  8469                           ;usart.c: 107: if(tx_buffer[tx_buffer_pointer] == '\0')
  8470  00217E  0E60               	movlw	low _tx_buffer
  8471  002180  2444               	addwf	_tx_buffer_pointer,w,c
  8472  002182  6ED9               	movwf	fsr2l,c
  8473  002184  0E00               	movlw	high _tx_buffer
  8474  002186  2045               	addwfc	_tx_buffer_pointer+1,w,c
  8475  002188  6EDA               	movwf	fsr2h,c
  8476  00218A  50DF               	movf	indf2,w,c
  8477  00218C  A4D8               	btfss	status,2,c
  8478  00218E  D00B               	goto	i2l164
  8479                           
  8480                           ;usart.c: 108: {
  8481                           ;usart.c: 109: tx_transmission_end = 1;
  8482  002190  0E00               	movlw	0
  8483  002192  6E4B               	movwf	_tx_transmission_end+1,c
  8484  002194  0E01               	movlw	1
  8485  002196  6E4A               	movwf	_tx_transmission_end,c
  8486                           
  8487                           ;usart.c: 110: tx_buffer_pointer = 0;
  8488  002198  0E00               	movlw	0
  8489  00219A  6E45               	movwf	_tx_buffer_pointer+1,c
  8490  00219C  0E00               	movlw	0
  8491  00219E  6E44               	movwf	_tx_buffer_pointer,c
  8492                           
  8493                           ;usart.c: 111: PIE1bits.TXIE = 0;
  8494  0021A0  989D               	bcf	3997,4,c	;volatile
  8495                           
  8496                           ;usart.c: 112: PIR1bits.TXIF = 0;
  8497  0021A2  989E               	bcf	3998,4,c	;volatile
  8498                           
  8499                           ;usart.c: 113: }
  8500  0021A4  0012               	return	
  8501  0021A6                     i2l164:
  8502                           
  8503                           ;usart.c: 114: else
  8504                           ;usart.c: 115: {
  8505                           ;usart.c: 116: TXREG = tx_buffer[tx_buffer_pointer];
  8506  0021A6  0E60               	movlw	low _tx_buffer
  8507  0021A8  2444               	addwf	_tx_buffer_pointer,w,c
  8508  0021AA  6ED9               	movwf	fsr2l,c
  8509  0021AC  0E00               	movlw	high _tx_buffer
  8510  0021AE  2045               	addwfc	_tx_buffer_pointer+1,w,c
  8511  0021B0  6EDA               	movwf	fsr2h,c
  8512  0021B2  50DF               	movf	indf2,w,c
  8513  0021B4  6EAD               	movwf	4013,c	;volatile
  8514                           
  8515                           ;usart.c: 117: tx_buffer_pointer++;
  8516  0021B6  4A44               	infsnz	_tx_buffer_pointer,f,c
  8517  0021B8  2A45               	incf	_tx_buffer_pointer+1,f,c
  8518  0021BA  0012               	return	
  8519  0021BC                     __end_of_uart_tx_isr:
  8520                           	opt stack 0
  8521                           pclatu	equ	0xFFB
  8522                           pclath	equ	0xFFA
  8523                           tblptru	equ	0xFF8
  8524                           tblptrh	equ	0xFF7
  8525                           tblptrl	equ	0xFF6
  8526                           tablat	equ	0xFF5
  8527                           prodh	equ	0xFF4
  8528                           prodl	equ	0xFF3
  8529                           intcon	equ	0xFF2
  8530                           intcon2	equ	0xFF1
  8531                           postinc0	equ	0xFEE
  8532                           fsr0h	equ	0xFEA
  8533                           fsr0l	equ	0xFE9
  8534                           wreg	equ	0xFE8
  8535                           indf1	equ	0xFE7
  8536                           plusw1	equ	0xFE3
  8537                           fsr1h	equ	0xFE2
  8538                           fsr1l	equ	0xFE1
  8539                           indf2	equ	0xFDF
  8540                           postinc2	equ	0xFDE
  8541                           postdec2	equ	0xFDD
  8542                           plusw2	equ	0xFDB
  8543                           fsr2h	equ	0xFDA
  8544                           fsr2l	equ	0xFD9
  8545                           status	equ	0xFD8
  8546                           
  8547 ;; *************** function _uart_rx_isr *****************
  8548 ;; Defined at:
  8549 ;;		line 80 in file "usart.c"
  8550 ;; Parameters:    Size  Location     Type
  8551 ;;		None
  8552 ;; Auto vars:     Size  Location     Type
  8553 ;;		None
  8554 ;; Return value:  Size  Location     Type
  8555 ;;                  1    wreg      void 
  8556 ;; Registers used:
  8557 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8558 ;; Tracked objects:
  8559 ;;		On entry : 0/0
  8560 ;;		On exit  : 0/0
  8561 ;;		Unchanged: 0/0
  8562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8563 ;;      Params:         0       0       0       0       0       0       0       0       0
  8564 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8565 ;;      Temps:          1       0       0       0       0       0       0       0       0
  8566 ;;      Totals:         1       0       0       0       0       0       0       0       0
  8567 ;;Total ram usage:        1 bytes
  8568 ;; Hardware stack levels used:    1
  8569 ;; This function calls:
  8570 ;;		Nothing
  8571 ;; This function is called by:
  8572 ;;		_IRS
  8573 ;; This function uses a non-reentrant model
  8574 ;;
  8575                           
  8576                           	psect	text39
  8577  001FDC                     __ptext39:
  8578                           	opt stack 0
  8579  001FDC                     _uart_rx_isr:
  8580                           	opt stack 25
  8581                           
  8582                           ;usart.c: 82: if(PIR1bits.RCIF)
  8583                           
  8584                           ;incstack = 0
  8585  001FDC  AA9E               	btfss	3998,5,c	;volatile
  8586  001FDE  0012               	return	
  8587                           
  8588                           ;usart.c: 83: {
  8589                           ;usart.c: 84: if(!rx_buffer_full)
  8590  001FE0  5040               	movf	_rx_buffer_full,w,c
  8591  001FE2  1041               	iorwf	_rx_buffer_full+1,w,c
  8592  001FE4  A4D8               	btfss	status,2,c
  8593  001FE6  D01D               	goto	i2l159
  8594                           
  8595                           ;usart.c: 85: {
  8596                           ;usart.c: 87: rx_buffer[rx_buffer_pointer] = RCREG;
  8597  001FE8  0E95               	movlw	low _rx_buffer
  8598  001FEA  2442               	addwf	_rx_buffer_pointer,w,c
  8599  001FEC  6ED9               	movwf	fsr2l,c
  8600  001FEE  0E01               	movlw	high _rx_buffer
  8601  001FF0  2043               	addwfc	_rx_buffer_pointer+1,w,c
  8602  001FF2  6EDA               	movwf	fsr2h,c
  8603  001FF4  CFAE FFDF          	movff	4014,indf2	;volatile
  8604                           
  8605                           ;usart.c: 89: if(rx_buffer[rx_buffer_pointer] != '\n')
  8606  001FF8  0E95               	movlw	low _rx_buffer
  8607  001FFA  2442               	addwf	_rx_buffer_pointer,w,c
  8608  001FFC  6ED9               	movwf	fsr2l,c
  8609  001FFE  0E01               	movlw	high _rx_buffer
  8610  002000  2043               	addwfc	_rx_buffer_pointer+1,w,c
  8611  002002  6EDA               	movwf	fsr2h,c
  8612  002004  0E0A               	movlw	10
  8613  002006  18DE               	xorwf	postinc2,w,c
  8614  002008  B4D8               	btfsc	status,2,c
  8615  00200A  D003               	goto	i2l158
  8616                           
  8617                           ;usart.c: 90: {
  8618                           ;usart.c: 91: rx_buffer_pointer++;
  8619  00200C  4A42               	infsnz	_rx_buffer_pointer,f,c
  8620  00200E  2A43               	incf	_rx_buffer_pointer+1,f,c
  8621                           
  8622                           ;usart.c: 92: }
  8623  002010  D008               	goto	i2l159
  8624  002012                     i2l158:
  8625                           
  8626                           ;usart.c: 93: else
  8627                           ;usart.c: 94: {
  8628                           ;usart.c: 95: rx_buffer_pointer = 0;
  8629  002012  0E00               	movlw	0
  8630  002014  6E43               	movwf	_rx_buffer_pointer+1,c
  8631  002016  0E00               	movlw	0
  8632  002018  6E42               	movwf	_rx_buffer_pointer,c
  8633                           
  8634                           ;usart.c: 96: rx_buffer_full = 1;
  8635  00201A  0E00               	movlw	0
  8636  00201C  6E41               	movwf	_rx_buffer_full+1,c
  8637  00201E  0E01               	movlw	1
  8638  002020  6E40               	movwf	_rx_buffer_full,c
  8639  002022                     i2l159:
  8640                           
  8641                           ;usart.c: 97: }
  8642                           ;usart.c: 98: }
  8643                           ;usart.c: 99: PIR1bits.RCIF = 0;
  8644  002022  9A9E               	bcf	3998,5,c	;volatile
  8645  002024  0012               	return	
  8646  002026                     __end_of_uart_rx_isr:
  8647                           	opt stack 0
  8648                           pclatu	equ	0xFFB
  8649                           pclath	equ	0xFFA
  8650                           tblptru	equ	0xFF8
  8651                           tblptrh	equ	0xFF7
  8652                           tblptrl	equ	0xFF6
  8653                           tablat	equ	0xFF5
  8654                           prodh	equ	0xFF4
  8655                           prodl	equ	0xFF3
  8656                           intcon	equ	0xFF2
  8657                           intcon2	equ	0xFF1
  8658                           postinc0	equ	0xFEE
  8659                           fsr0h	equ	0xFEA
  8660                           fsr0l	equ	0xFE9
  8661                           wreg	equ	0xFE8
  8662                           indf1	equ	0xFE7
  8663                           plusw1	equ	0xFE3
  8664                           fsr1h	equ	0xFE2
  8665                           fsr1l	equ	0xFE1
  8666                           indf2	equ	0xFDF
  8667                           postinc2	equ	0xFDE
  8668                           postdec2	equ	0xFDD
  8669                           plusw2	equ	0xFDB
  8670                           fsr2h	equ	0xFDA
  8671                           fsr2l	equ	0xFD9
  8672                           status	equ	0xFD8
  8673                           pclatu	equ	0xFFB
  8674                           pclath	equ	0xFFA
  8675                           tblptru	equ	0xFF8
  8676                           tblptrh	equ	0xFF7
  8677                           tblptrl	equ	0xFF6
  8678                           tablat	equ	0xFF5
  8679                           prodh	equ	0xFF4
  8680                           prodl	equ	0xFF3
  8681                           intcon	equ	0xFF2
  8682                           intcon2	equ	0xFF1
  8683                           postinc0	equ	0xFEE
  8684                           fsr0h	equ	0xFEA
  8685                           fsr0l	equ	0xFE9
  8686                           wreg	equ	0xFE8
  8687                           indf1	equ	0xFE7
  8688                           plusw1	equ	0xFE3
  8689                           fsr1h	equ	0xFE2
  8690                           fsr1l	equ	0xFE1
  8691                           indf2	equ	0xFDF
  8692                           postinc2	equ	0xFDE
  8693                           postdec2	equ	0xFDD
  8694                           plusw2	equ	0xFDB
  8695                           fsr2h	equ	0xFDA
  8696                           fsr2l	equ	0xFD9
  8697                           status	equ	0xFD8
  8698                           
  8699                           	psect	rparam
  8700  0000                     pclatu	equ	0xFFB
  8701                           pclath	equ	0xFFA
  8702                           tblptru	equ	0xFF8
  8703                           tblptrh	equ	0xFF7
  8704                           tblptrl	equ	0xFF6
  8705                           tablat	equ	0xFF5
  8706                           prodh	equ	0xFF4
  8707                           prodl	equ	0xFF3
  8708                           intcon	equ	0xFF2
  8709                           intcon2	equ	0xFF1
  8710                           postinc0	equ	0xFEE
  8711                           fsr0h	equ	0xFEA
  8712                           fsr0l	equ	0xFE9
  8713                           wreg	equ	0xFE8
  8714                           indf1	equ	0xFE7
  8715                           plusw1	equ	0xFE3
  8716                           fsr1h	equ	0xFE2
  8717                           fsr1l	equ	0xFE1
  8718                           indf2	equ	0xFDF
  8719                           postinc2	equ	0xFDE
  8720                           postdec2	equ	0xFDD
  8721                           plusw2	equ	0xFDB
  8722                           fsr2h	equ	0xFDA
  8723                           fsr2l	equ	0xFD9
  8724                           status	equ	0xFD8
  8725                           
  8726                           	psect	temp
  8727  00004C                     btemp:
  8728                           	opt stack 0
  8729  00004C                     	ds	1
  8730  0000                     int$flags	set	btemp
  8731  0000                     wtemp6	set	btemp+1
  8732                           pclatu	equ	0xFFB
  8733                           pclath	equ	0xFFA
  8734                           tblptru	equ	0xFF8
  8735                           tblptrh	equ	0xFF7
  8736                           tblptrl	equ	0xFF6
  8737                           tablat	equ	0xFF5
  8738                           prodh	equ	0xFF4
  8739                           prodl	equ	0xFF3
  8740                           intcon	equ	0xFF2
  8741                           intcon2	equ	0xFF1
  8742                           postinc0	equ	0xFEE
  8743                           fsr0h	equ	0xFEA
  8744                           fsr0l	equ	0xFE9
  8745                           wreg	equ	0xFE8
  8746                           indf1	equ	0xFE7
  8747                           plusw1	equ	0xFE3
  8748                           fsr1h	equ	0xFE2
  8749                           fsr1l	equ	0xFE1
  8750                           indf2	equ	0xFDF
  8751                           postinc2	equ	0xFDE
  8752                           postdec2	equ	0xFDD
  8753                           plusw2	equ	0xFDB
  8754                           fsr2h	equ	0xFDA
  8755                           fsr2l	equ	0xFD9
  8756                           status	equ	0xFD8


Data Sizes:
    Strings     171
    Constant    118
    Data        2
    BSS         230
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     61      75
    BANK0           160     60     160
    BANK1           256    131     249
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_5(CODE[3]), STR_4(CODE[3]), STR_3(CODE[3]), 

    strspn@s2	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_5(CODE[3]), STR_4(CODE[3]), STR_3(CODE[3]), 

    strspn@s1	PTR const unsigned char  size(2) Largest target is 100
		 -> NULL(NULL[0]), main@raw_command(BANK1[100]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 3
		 -> STR_5(CODE[3]), STR_4(CODE[3]), NULL(NULL[0]), STR_3(CODE[3]), 

    strcspn@s2	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_5(CODE[3]), STR_4(CODE[3]), STR_3(CODE[3]), 

    strcspn@s1	PTR const unsigned char  size(2) Largest target is 100
		 -> NULL(NULL[0]), main@raw_command(BANK1[100]), 

    strtok@s2	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_5(CODE[3]), STR_4(CODE[3]), STR_3(CODE[3]), 

    strtok@sp	PTR unsigned char  size(2) Largest target is 100
		 -> NULL(NULL[0]), main@raw_command(BANK1[100]), 

    strtok@s1	PTR unsigned char  size(2) Largest target is 100
		 -> NULL(NULL[0]), main@raw_command(BANK1[100]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 100
		 -> rx_buffer(BANK1[100]), main@send_current(BANK1[6]), STR_19(CODE[13]), STR_17(CODE[16]), 
		 -> STR_15(CODE[16]), STR_12(CODE[15]), STR_10(CODE[15]), STR_7(CODE[21]), 
		 -> STR_2(CODE[20]), STR_1(CODE[18]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 100
		 -> tx_buffer(BANK0[100]), main@raw_command(BANK1[100]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 100
		 -> tx_buffer(BANK0[100]), main@raw_command(BANK1[100]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_21(CODE[2]), STR_20(CODE[6]), STR_18(CODE[4]), STR_16(CODE[2]), 
		 -> STR_14(CODE[2]), STR_13(CODE[4]), STR_11(CODE[2]), STR_9(CODE[2]), 
		 -> STR_8(CODE[3]), STR_6(CODE[4]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 100
		 -> NULL(NULL[0]), main@raw_command(BANK1[100]), 

    memset@p1	PTR void  size(2) Largest target is 100
		 -> rx_buffer(BANK1[100]), tx_buffer(BANK0[100]), main@raw_command(BANK1[100]), 

    memset@p	PTR unsigned char  size(2) Largest target is 100
		 -> rx_buffer(BANK1[100]), tx_buffer(BANK0[100]), main@raw_command(BANK1[100]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 100
		 -> NULL(NULL[0]), main@raw_command(BANK1[100]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_22(CODE[9]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 6
		 -> main@send_current(BANK1[6]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    send_sr@buffer	PTR short  size(2) Largest target is 16
		 -> main@L298_inputs(BANK1[16]), 

    uart_read_buffer@message	PTR unsigned char  size(2) Largest target is 100
		 -> main@raw_command(BANK1[100]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 100
		 -> tx_buffer(BANK0[100]), main@raw_command(BANK1[100]), 

    uart_send_string@message	PTR unsigned char  size(2) Largest target is 21
		 -> main@send_current(BANK1[6]), STR_19(CODE[13]), STR_17(CODE[16]), STR_15(CODE[16]), 
		 -> STR_12(CODE[15]), STR_10(CODE[15]), STR_7(CODE[21]), STR_2(CODE[20]), 
		 -> STR_1(CODE[18]), 

    main@arg2	PTR unsigned char  size(2) Largest target is 100
		 -> NULL(NULL[0]), main@raw_command(BANK1[100]), 

    main@arg1	PTR unsigned char  size(2) Largest target is 100
		 -> NULL(NULL[0]), main@raw_command(BANK1[100]), 

    sp__strtok	PTR unsigned char  size(2) Largest target is 100
		 -> NULL(NULL[0]), main@raw_command(BANK1[100]), 

    main@command	PTR unsigned char  size(2) Largest target is 100
		 -> NULL(NULL[0]), main@raw_command(BANK1[100]), 

    sp__memset	PTR void  size(2) Largest target is 100
		 -> rx_buffer(BANK1[100]), tx_buffer(BANK0[100]), main@raw_command(BANK1[100]), 


Critical Paths under _main in COMRAM

    _uart_send_string->_memset
    _uart_read_buffer->_memset
    _strtok->_strcspn
    _strtok->_strspn
    _strspn->_strchr
    _strcspn->_strchr
    _sprintf->_scale
    _scale->___ftmul
    _fround->___ftmul
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    _atoi->___wmul
    ___wmul->___awdiv
    ___awtoft->___ftpack

Critical Paths under _IRS in COMRAM

    _IRS->_uart_rx_isr

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___ftsub
    ___ftsub->___ftadd
    ___ftadd->_fround

Critical Paths under _IRS in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _IRS in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _IRS in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _IRS in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _IRS in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _IRS in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _IRS in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _IRS in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               131   131      0   84219
                                              0 BANK1    131   131      0
                           ___awtoft
                            ___ftmul
                               _atoi
                      _configure_pwm
                     _configure_tmr2
                             _memset
                            _send_sr
                            _sprintf
                             _strcmp
                             _strtok
                   _uart_read_buffer
                   _uart_send_string
                 _uart_set_baud_rate
                        _uart_set_rx
                        _uart_set_tx
 ---------------------------------------------------------------------------------
 (1) _uart_set_tx                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _uart_set_rx                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _uart_set_baud_rate                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _uart_send_string                                     2     0      2    1865
                                             27 COMRAM     2     0      2
                             _memset
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _uart_read_buffer                                     2     0      2    1257
                                             27 COMRAM     2     0      2
                             _memset
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4     379
                                             19 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _memset                                               8     2      6     780
                                             19 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (1) _strtok                                               4     0      4    1926
                                             30 COMRAM     4     0      4
                            _strcspn
                             _strspn
 ---------------------------------------------------------------------------------
 (2) _strspn                                               7     3      4     635
                                             23 COMRAM     7     3      4
                             _strchr
 ---------------------------------------------------------------------------------
 (2) _strcspn                                              7     3      4     635
                                             23 COMRAM     7     3      4
                             _strchr
 ---------------------------------------------------------------------------------
 (3) _strchr                                               4     0      4     392
                                             19 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) _strcmp                                               6     2      4    1611
                                             19 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             44    37      7   61828
                                             22 BANK0     38    31      7
                            ___awdiv
                           ___awtoft (ARG)
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                                7     4      3   14800
                                             54 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _fround                                              10     7      3   14521
                                             54 COMRAM     3     0      3
                                              0 BANK0      7     7      0
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    6221
                                             39 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    2053
                                             19 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    2245
                                             25 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     455
                                             19 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     598
                                             19 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    3085
                                             27 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     615
                                             19 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     466
                                             19 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     641
                                              0 BANK0     15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    5034
                                             16 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    4618
                                             57 COMRAM     3     3      0
                                              7 BANK0      9     3      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     121
                                             19 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     592
                                             19 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _send_sr                                              5     3      2     470
                                             19 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _configure_tmr2                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _configure_pwm                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _atoi                                                 7     5      2    4144
                                             39 COMRAM     7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             19 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    3652
                                             33 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) ___awtoft                                             4     1      3    3116
                                             27 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2893
                                             19 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _IRS                                                 18    18      0       0
                                              1 COMRAM    18    18      0
                        _uart_rx_isr
                        _uart_tx_isr
 ---------------------------------------------------------------------------------
 (6) _uart_tx_isr                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _uart_rx_isr                                          1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___awtoft
     ___ftpack
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   _atoi
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     _isdigit
   _configure_pwm
   _configure_tmr2
   _memset
   _send_sr
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv (ARG)
     ___llmod (ARG)
     ___lltoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_ (ARG)
     __tdiv_to_l_ (ARG)
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit (ARG)
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _strcmp
   _strtok
     _strcspn
       _strchr
     _strspn
       _strchr
   _uart_read_buffer
     _memset
     _strcpy
   _uart_send_string
     _memset
     _strcpy
   _uart_set_baud_rate
   _uart_set_rx
   _uart_set_tx

 _IRS (ROOT)
   _uart_rx_isr
   _uart_tx_isr

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     83      F9       7       97.3%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     3C      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     3D      4B       1       79.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1E4      20        0.0%
DATA                 0      0     1E4       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Dec 10 23:05:25 2019

                _pwm_counter 0046     __end_of_uart_send_string 20B2                           l81 0E04  
                         l82 0EA8                           l84 0F02                           l85 0F40  
                         l87 0F9A                           l88 0FD8                           l89 1010  
               ___awdiv@sign 001F                  __CFG_BOR$ON 000000          ___wmul@multiplicand 0024  
                __CFG_BORV$3 000000               ?_configure_pwm 0001                 __CFG_CP0$OFF 000000  
               __CFG_CP1$OFF 000000                 __CFG_CP2$OFF 000000                 ___ftadd@exp1 00D3  
               ___ftadd@exp2 00D2                 ___ftadd@sign 00D1                          l202 0B48  
                        l210 0038                          l203 0C98                          l220 0152  
                        l212 0052                          l205 0D48                          l221 013C  
                        l213 004A                          l222 0104                          l231 07DE  
                        l240 0402                          l232 019C                          l233 01DE  
                        l225 0164                          l209 0020                          l218 0082  
                        l171 1EB0                          l243 03AA                          l235 0270  
                        l147 208C                          l172 1EEA                          l500 1DA0  
                        l236 02D6                          l228 0160                          l501 1D98  
                        l261 0554                          l253 04D4                          l229 0188  
                        l262 053E                          l254 04EE                          l238 02FC  
                        l271 065A                          l239 033C                          l512 220C  
                        l520 1694                          l504 1DB8                          l192 11F6  
                        l280 07F6                          l272 065E                          l505 1DC2  
                        l281 0812                          l273 0680                          l265 0616  
                        l257 052E                          l249 0468                          l602 141E  
                        l522 16D2                          l506 1DD0                          l290 08F2  
                        l274 07B2                          l266 0582                          l258 0518  
                        l603 1414                          l523 16C2                          l195 12C4  
                        l291 08D2                          l283 0832                          l275 06D0  
                        l516 1604                          l620 14E0                          l284 0854  
                        l268 0636                          l605 1442                          l277 07D4  
                        l269 0620                          l606 145E                          l710 1D4A  
                        l518 1622                          l622 150C                          l198 0B6C  
                        l286 0876                          l278 07BE                          l551 1AD4  
                        l471 198C                          l607 148E                          l711 1D58  
                        l519 1664                          l623 1546                          l199 0A98  
                        l287 087E                          l552 1ABE                          l472 1952  
                        l720 1E20                          l528 16F6                          l632 15CE  
                        l624 156E                          l288 08A2                          l465 1900  
                        l721 1E2E                          l529 16EA                          l633 15C2  
                        l289 08AA                          l554 1AFC                          l474 19BE  
                        l466 18FC                          l706 1D16                          l626 15AA  
                        l650 18B0                          l555 1AF2                          l707 1D0A  
                        l627 159A                          l491 1CC6                          l651 18C0  
                        l299 093C                          l548 1AA0                          l468 1940  
                        l716 1DF8                          l492 1CD0                          l484 1C78  
                        l644 182E                          l549 1A96                          l637 1C04  
                        l661 2150                          l717 1DEC                          l493 1CDE  
                        l485 1C88                          l638 1C34                          l646 1856  
                        l655 2298                          l583 1384                          l727 1E52  
                        l487 1CA6                          l647 1888                          l680 22BC  
                        l728 1E46                          l488 1C9E                          l648 1898  
                        l593 13E0                          l673 17D8                          l665 173C  
                        l497 1D7E                          l913 2030                          l921 20C4  
                        l594 13D6                          l674 17CC                          l498 1D8A  
                        l914 2028                          l922 20BC                          l579 135A  
                        l667 17B4                          l588 13EA                          l676 17F4  
                        l668 17A4                          l933 19D8                          l934 19EA  
                        l783 224A                          l936 1A26                          l784 223A  
                        l937 1A66                          l962 1F54                          l938 1A6E  
                        l963 1F4C                          l972 1F04                          l981 21D8  
                        l973 1EFC                 __CFG_CPB$OFF 000000                          _PR2 000FCB  
               __CFG_CPD$OFF 000000                          _IRS 0008               _rx_buffer_full 0040  
                        _pwm 0048                 ___awmod@sign 0019              ?_configure_tmr2 0001  
                        wreg 000FE8                 __CFG_FOSC$HS 000000                 __CFG_LVP$OFF 000000  
                       ?_IRS 0001                  main@command 017F                 __CFG_WDT$OFF 000000  
                       l2239 1C60                         l4007 0620                         l4113 0938  
                       l2497 223A                         l3813 1988                         l3927 0384  
                       l3919 033C                         l3947 046C                         l3983 053E  
                       l3975 0518                         STR_1 5F7C                         STR_2 5F68  
                       STR_3 5FF4                         STR_4 5FF4                         STR_5 5FF4  
                       STR_6 5FEC                         STR_7 5F53                         STR_8 5FF7  
                       STR_9 5FFA                         u3030 2062                         u4000 1426  
                       u2511 14F0                         u4041 1816                         u4130 1CAA  
                       u2380 20EC                         u4301 1720                         u4061 183E  
                       u4320 175A                         u2640 16FC                         u2570 15D4  
                       u2491 14C4                         u2387 20E2                         u2820 1DFC  
                       u4325 1752                         u4190 1DA4                         u3800 1B06  
                       u4360 17DE                         u3900 1376                         u4620 0384  
                       u4540 0216                         u2860 1F38                         u2790 1D1A  
                       u4470 00E0                         u3831 1318                         u3760 1A88  
                       u2960 1EEA                         u4720 0562                         u2880 1F88  
                       u3841 132C                         u4545 020C                         u3930 13B4  
                       u4660 04A4                         u4580 030E                         u3870 134C  
                       u4750 0644                         u4590 034E                         u4760 0654  
                       u3970 13F2                         u4930 08FA                         u4940 0918  
                       u4960 0956                         i2l73 1B88                         u4981 0DE0  
                       _atoi 18FA                         _main 0D6C                 ___ftpack@arg 0014  
               ___ftpack@exp 0017                         fsr0h 000FEA                         fsr1h 000FE2  
                       fsr2h 000FDA                         fsr0l 000FE9                         indf1 000FE7  
                       indf2 000FDF                         fsr1l 000FE1                         fsr2l 000FD9  
                       btemp 004C                         prodh 000FF4                         prodl 000FF3  
                       start 000E                __CFG_IESO$OFF 000000                 _sprintf$1540 00E7  
               ___ftmul@cntr 0035                 ___param_bank 000000                 ___ftmul@sign 0036  
                      ??_IRS 0002                 ___fttol@exp1 00D2                 ___fttol@lval 00CE  
              __CFG_PLLDIV$1 000000               __CFG_CCP2MX$ON 000000                        ?_atoi 0028  
                      ?_main 0001              __end_of___awdiv 1CE8                        _ADRES 000FC3  
            __end_of___ftadd 14B4                        STR_10 5FAE                        STR_11 5FFC  
                      STR_20 5FE2                        STR_12 5FBD                        STR_21 5FFA  
                      STR_13 5FF0                        STR_14 5FFA                        STR_22 5FD9  
                      STR_15 5F8E                        STR_16 5FFC                        STR_17 5F9E  
                      STR_18 5FE8                        STR_19 5FCC              __end_of___awmod 1DDA  
            __end_of___ftneg 22A6              __end_of___lldiv 1D6A              __end_of___ftmul 18FA  
            ___awdiv@divisor 001C              __end_of___llmod 1E40              __end_of___ftsub 217A  
            __end_of___fttol 1806                        i2l164 21A6                        i2l158 2012  
                      i2l159 2022              ___awdiv@counter 001E                        _RCREG 000FAE  
                      _SPBRG 000FAF                __CFG_USBDIV$1 000000                        _TRISB 000F93  
                      _TRISC 000F94                        _TRISD 000F95                        _TXREG 000FAD  
              __CFG_PWRT$OFF 000000                __CFG_WRT0$OFF 000000                __CFG_WRT1$OFF 000000  
              __CFG_WRT2$OFF 000000                 ___lltoft@exp 0024               __CFG_EBTR0$OFF 000000  
             __CFG_FCMEN$OFF 000000               __CFG_EBTR1$OFF 000000               __CFG_EBTR2$OFF 000000  
              __CFG_WRTB$OFF 000000                __CFG_WRTC$OFF 000000                __CFG_WRTD$OFF 000000  
             __CFG_EBTRB$OFF 000000                ___awtoft@sign 001F              __end_of_dpowers 5F05  
                      _scale 0964              __end_of_isdigit 22C4                ___ftpack@sign 0018  
                      atoi@a 002D                        atoi@s 0028              __end_of_send_sr 1EF2  
                      pclath 000FFA                        tablat 000FF5      uart_read_buffer@message 001C  
                      plusw1 000FE3                        plusw2 000FDB                        status 000FD8  
                      wtemp6 004D              __end_of_sprintf 0964              __end_of_strcspn 1F92  
             __CFG_ICPRT$OFF 000000               __CFG_PBADEN$ON 000000           _uart_set_baud_rate 22D6  
             __CFG_MCLRE$OFF 000000              __initialization 1F92                 __end_of_atoi 19C8  
               __end_of_main 10AC              ??_configure_pwm 0014          ?_uart_set_baud_rate 0001  
                     ??_atoi 002A                       ??_main 003E                ___fttol@sign1 00CD  
              __activetblptr 000002         __size_of__tdiv_to_l_ 0132             ___llmod@dividend 0014  
                     ?_scale 0037                       _CCPR1L 000FBE             ___awdiv@dividend 001A  
           __end_of___awtoft 2230             __end_of___ftpack 1B26         ??_uart_set_baud_rate 0014  
           __end_of___lltoft 1E9C                       _SPBRGH 000FB0            ?_uart_read_buffer 001C  
             __CFG_XINST$OFF 000000             __end_of__powers_ 5F2C                       ___ftge 1BD4  
         ??_uart_read_buffer 001E                       ___wmul 225C                    ??___awdiv 001E  
                  ??___ftadd 003A                    ??___awmod 0018                    ??___ftneg 0017  
                  ??___lldiv 001C                    ??___ftmul 002E                    ??___llmod 001C  
                  ??___ftsub 003D                    ??___fttol 00C8                       _memset 2230  
                     _fround 10AC                       clear_0 1FB0                       clear_1 1FBC  
                     clear_2 1FC8             ___awdiv@quotient 0020              ___awmod@divisor 0016  
            ___awmod@counter 0018            _rx_buffer_pointer 0042                       _strchr 21BC  
                     _strcmp 2026                       _strcpy 20B2                       _strtok 19C8  
                     _strspn 1EF2        ___ftmul@f3_as_product 0032                 __pdataCOMRAM 004A  
                  ??_isdigit 0014                 ?_uart_set_rx 0001                 ?_uart_set_tx 0001  
               ?_uart_rx_isr 0001                 __mediumconst 5EDC                 ?_uart_tx_isr 0001  
                  ??_send_sr 0016                       tblptrh 000FF7                       tblptrl 000FF6  
                     tblptru 000FF8                    ??_sprintf 00E1                    ??_strcspn 001C  
                 __accesstop 0060      __end_of__initialization 1FCE      uart_send_string@message 001C  
                 ___ftadd@f1 00CB                   ___ftadd@f2 00CE                   ___ftge@ff1 0014  
                 ___ftge@ff2 0017                ___rparam_used 000001                   ___ftneg@f1 0014  
                 ___awtoft@c 001C                   ___ftmul@f1 0028                   ___ftmul@f2 002B  
                 ___ftsub@f1 00D4                   ___ftsub@f2 00D7                   ___fttol@f1 00C4  
             __pcstackCOMRAM 0001                   ___lltoft@c 001C                __end_of_scale 0D6C  
          ?_uart_send_string 001C             ??_configure_tmr2 0014           ??_uart_send_string 001E  
                 __div_to_l_ 15E6              __div_to_l_@exp1 001F              __div_to_l_@cntr 001E  
                    ??_scale 003A              __div_to_l_@quot 001A                 sprintf@width 00F8  
                 __pbssBANK0 0060                   __pbssBANK1 0183                __div_to_l_@f1 0014  
              __div_to_l_@f2 0017                      ?___ftge 0014                      ?___wmul 0022  
                    ?_memset 0014                      ?_fround 0037                    ?___awtoft 001C  
                  ?___ftpack 0014                    ?___lltoft 001C                      ?_strchr 0014  
                    ?_strcmp 0014                      ?_strcpy 0014                      ?_strtok 001F  
                    ?_strspn 0018              __CFG_VREGEN$OFF 000000            _tx_buffer_pointer 0044  
          __end_of__npowers_ 5F53                      __Hparam 0000                   _scale$1539 003A  
                    __Lparam 0000              __size_of___ftge 0090                      ___awdiv 1C64  
                    ___ftadd 1306                      ___awmod 1D6A                      ___ftneg 2282  
                    ___lldiv 1CE8              __size_of___wmul 0026                      ___ftmul 1806  
                    ___llmod 1DDA                      ___ftsub 2138                      ___fttol 170E  
            __CFG_STVREN$OFF 000000                      __pcinit 1F92                   ??___awtoft 001F  
                 ??___ftpack 0019              __size_of_memset 002C              __size_of_fround 025A  
                    __ramtop 0800                   ??___lltoft 0020                      __ptext0 0D6C  
                    __ptext1 22E6                      __ptext2 22F2                      __ptext3 22D6  
                    __ptext4 206E                      __ptext5 20F6                      __ptext6 20B2  
                    __ptext7 2230                      __ptext8 19C8                      __ptext9 1EF2  
            __size_of_strchr 003C              __size_of_strcmp 0048              __size_of_strcpy 0044  
               __size_of_IRS 1BCC                  ?__div_to_l_ 0014              __size_of_strtok 00B0  
            __size_of_strspn 0050                      _dpowers 5EDD                    _T2CONbits 000FCA  
                    _isdigit 22A6             ___awmod@dividend 0014                      _send_sr 1E9C  
            main@L298_inputs 0169         __size_of_uart_set_rx 000C         __size_of_uart_set_tx 000C  
       __size_of_uart_rx_isr 004A                      _sprintf 0012         __size_of_uart_tx_isr 0042  
                    _strcspn 1F42               __pintcode_body 1B26         end_of_initialization 1FCE  
                    memset@c 0016                      memset@n 0018                      memset@p 001A  
              __Lmediumconst 5EDC                      int_func 1B26              ___lldiv@divisor 0018  
            ___lldiv@counter 0020                   _motor_1_ia 0193                    _RCSTAbits 000FAB  
                    postdec2 000FDD                      postinc0 000FEE                      postinc2 000FDE  
             __tdiv_to_l_@f1 0014               __tdiv_to_l_@f2 0017                      strcmp@r 0019  
      __end_of_configure_pwm 2308                ??__tdiv_to_l_ 001A                      strspn@i 001D  
  __size_of_uart_read_buffer 0042  __size_of_uart_set_baud_rate 0010                  _CCP1CONbits 000FBD  
                  _TXSTAbits 000FAC          __size_of__div_to_l_ 0128                  ___ftmul@exp 0031  
              send_sr@buffer 0014               __end_of___ftge 1C64               __end_of___wmul 2282  
                _BAUDCONbits 000FB8                __pidataCOMRAM 2308               __end_of_memset 225C  
             __end_of_fround 1306               __end_of_strchr 21F8               __end_of_strcmp 206E  
             __end_of_strcpy 20F6               __end_of_strtok 1A78               __end_of_strspn 1F42  
        start_initialization 1F92                  __end_of_IRS 1BD4          __end_of__tdiv_to_l_ 15E6  
  __size_of_uart_send_string 0044              ___llmod@divisor 0018              ___llmod@counter 001C  
                   ??___ftge 001A                     ??___wmul 0026             __CFG_LPT1OSC$OFF 000000  
                   ??_memset 001A                     ??_fround 003A                sprintf@tmpval 00F0  
                   ??_strchr 0018                     ??_strcmp 0018                     ??_strcpy 0018  
                   ??_strtok 0023                     ??_strspn 001C                   fround@prec 00CA  
          __size_of___awtoft 0038            __size_of___ftpack 00AE            __size_of___lltoft 005C  
                __pbssCOMRAM 003E                __pcstackBANK0 00C4                __pcstackBANK1 0100  
               _isdigit$1159 0015                  sprintf@flag 00F6                  sprintf@fval 00FA  
                sprintf@prec 00FD                    _main$1536 0166                    __pintcode 0008  
              __pmediumconst 5EDC                     ?___awdiv 001A                     ?___ftadd 00CB  
                   ?___awmod 0014                     ?___ftneg 0014                     ?___lldiv 0014  
                   ?___ftmul 0028                     ?___llmod 0014                     ?___ftsub 00D4  
                  __npowers_ 5F2C                     ?___fttol 00C4             main@send_current 0179  
                __tdiv_to_l_ 14B4                 ??__div_to_l_ 001A                     ?_isdigit 0001  
           _uart_read_buffer 20F6                     ?_send_sr 0014      __size_of_configure_tmr2 0012  
                   ?_sprintf 00DA               __size_of_scale 0408                     ?_strcspn 0018  
             ___wmul@product 0026                     _LATBbits 000F8A                     _PIE1bits 000F9D  
                   _PIR1bits 000F9E           __end_of__div_to_l_ 170E             __CFG_WDTPS$32768 000000  
                  main@F4085 0183                    _rx_buffer 0195                   _ADCON0bits 000FC2  
                 _ADCON1bits 000FC1                   _ADCON2bits 000FC0            ___wmul@multiplier 0022  
                  _tx_buffer 0060                ??_uart_set_rx 0014                ??_uart_set_tx 0014  
              ??_uart_rx_isr 0001                ??_uart_tx_isr 0001                  _INTCON2bits 000FF1  
           _uart_send_string 206E                     __Hrparam 0000                     __Lrparam 0000  
           __size_of___awdiv 0084             __size_of___ftadd 01AE             __size_of___awmod 0070  
           __size_of___ftneg 0024             __size_of___lldiv 0082             __size_of___ftmul 00F4  
           __size_of___llmod 0066             __size_of___ftsub 0042             __size_of___fttol 00F8  
                   ___awtoft 21F8                     ___ftpack 1A78                  _fround$1537 00C7  
                _fround$1538 00C4                     ___lltoft 1E40              main@raw_command 0100  
                 sprintf@exp 00F4                   sprintf@val 00EC             __size_of_isdigit 001E  
           __size_of_send_sr 0056                     __ptext10 1F42                     __ptext11 21BC  
                   __ptext20 15E6                     __ptext12 2026                     __ptext21 1E40  
                   __ptext13 0012                     __ptext30 22C4                     __ptext22 1DDA  
                   __ptext14 0964                     __ptext31 22FE                     __ptext23 1CE8  
                   __ptext15 10AC                     __ptext32 18FA                     __ptext24 170E  
                   __ptext16 1806                     __ptext33 22A6                     __ptext25 2138  
                   __ptext17 1D6A                     __ptext34 225C                     __ptext26 1306  
                   __ptext18 1C64                     __ptext35 21F8                     __ptext27 2282  
                   __ptext19 14B4                     __ptext36 1A78                     __ptext28 1BD4  
                   __ptext29 1E9C                     __ptext38 217A                     __ptext39 1FDC  
 __end_of_uart_set_baud_rate 22E6                     __powers_ 5F05          _tx_transmission_end 004A  
        __end_of_uart_set_rx 22FE          __end_of_uart_set_tx 22F2             __size_of_sprintf 0952  
           __size_of_strcspn 0050          __end_of_uart_rx_isr 2026                   strcpy@from 0016  
        __end_of_uart_tx_isr 21BC                __size_of_atoi 00CE       __size_of_configure_pwm 000A  
              __size_of_main 0340                     int$flags 004C                     atoi@sign 002C  
                   main@arg1 0164                     main@arg2 0181        __CFG_CPUDIV$OSC1_PLL2 000000  
                 _INTCONbits 000FF2               _configure_tmr2 22C4                     isdigit@c 0016  
                   memset@p1 0014                     scale@scl 003D                     intlevel2 0000  
                  sprintf@ap 00EA             __tdiv_to_l_@exp1 0022             __tdiv_to_l_@cntr 0021  
                  sprintf@sp 00DA             __tdiv_to_l_@quot 001D                    strchr@chr 0016  
                  strchr@ptr 0014             ___lldiv@dividend 0014                     send_sr@i 0017  
                  strcspn@s1 0018                    strcspn@s2 001A     __end_of_uart_read_buffer 2138  
               ?__tdiv_to_l_ 0014                _configure_pwm 22FE                     sprintf@c 00FF  
                   sprintf@f 00DC                     strcmp@s1 0014                     strcmp@s2 0016  
           ___lldiv@quotient 001C       __end_of_configure_tmr2 22D6                     strcpy@cp 0018  
                   strcpy@to 0014                  _uart_set_rx 22F2                  _uart_set_tx 22E6  
                   strcspn@i 001D                  _uart_rx_isr 1FDC                  _uart_tx_isr 217A  
                   strtok@s1 001F                     strtok@s2 0021                     strspn@s1 0018  
                   strspn@s2 001A                     strtok@sp 003E  
